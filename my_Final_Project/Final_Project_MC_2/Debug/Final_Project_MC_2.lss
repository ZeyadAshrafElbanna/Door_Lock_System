
Final_Project_MC_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002a08  00002a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800186  00800186  00002bc2  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00002bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001295  00000000  00000000  000051e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006475  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006615  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006807  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b170  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b626  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 0c 	call	0x1958	; 0x1958 <main>
      8a:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Buzzer_init>:
 */
#include"Buzzer.h"
#include"gpio.h"

void Buzzer_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN,PIN_OUTPUT);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	62 e0       	ldi	r22, 0x02	; 2
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_LOW);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	62 e0       	ldi	r22, 0x02	; 2
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Buzzer_on>:
void Buzzer_on(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_HIGH);
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	62 e0       	ldi	r22, 0x02	; 2
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Buzzer_off>:
void Buzzer_off(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_LOW);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	62 e0       	ldi	r22, 0x02	; 2
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <DcMotor_Init>:
 */
#include"DC_Motor.h"
#include"gpio.h"
#include"PWM.h"
void DcMotor_Init(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
   GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN_1, PIN_OUTPUT);
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_setupPinDirection>
   GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN_2, PIN_OUTPUT);
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_setupPinDirection>
   GPIO_setupPinDirection(MOTOR_ENABLE_PORT , MOTOR_ENABLE_PIN, PIN_OUTPUT);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	63 e0       	ldi	r22, 0x03	; 3
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_setupPinDirection>
   GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1, LOGIC_LOW);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
   GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2, LOGIC_LOW);
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <DcMotor_Rotate+0x6>
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <DcMotor_Rotate+0x8>
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	8a 83       	std	Y+2, r24	; 0x02
     ed0:	6b 83       	std	Y+3, r22	; 0x03
   switch(state)
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3d 83       	std	Y+5, r19	; 0x05
     eda:	2c 83       	std	Y+4, r18	; 0x04
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	9d 81       	ldd	r25, Y+5	; 0x05
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	a1 f0       	breq	.+40     	; 0xf0e <DcMotor_Rotate+0x4e>
     ee6:	2c 81       	ldd	r18, Y+4	; 0x04
     ee8:	3d 81       	ldd	r19, Y+5	; 0x05
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	d1 f0       	breq	.+52     	; 0xf24 <DcMotor_Rotate+0x64>
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	01 f5       	brne	.+64     	; 0xf38 <DcMotor_Rotate+0x78>
   {
       case 0 :  GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1, LOGIC_LOW);
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
                 GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2, LOGIC_LOW);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
     f0c:	15 c0       	rjmp	.+42     	; 0xf38 <DcMotor_Rotate+0x78>
                 break ;
       case 1 :  GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1, LOGIC_HIGH);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
                 GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2, LOGIC_LOW);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
     f22:	0a c0       	rjmp	.+20     	; 0xf38 <DcMotor_Rotate+0x78>
                 break ;
       case 2 :  GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1, LOGIC_LOW);
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
                 GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2, LOGIC_HIGH);
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_writePin>
                 break;
   }
   uint8 duty_cycle = 255 * ((float32)speed / 100) ;
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	48 ec       	ldi	r20, 0xC8	; 200
     f58:	52 e4       	ldi	r21, 0x42	; 66
     f5a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	4f e7       	ldi	r20, 0x7F	; 127
     f6c:	53 e4       	ldi	r21, 0x43	; 67
     f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	89 83       	std	Y+1, r24	; 0x01
   PWM_Timer0_Start(duty_cycle);
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	0e 94 cd 07 	call	0xf9a	; 0xf9a <PWM_Timer0_Start>

}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <PWM_Timer0_Start>:
 *      Author: Zeyad El-banna
 */
#include"PWM.h"
#include<avr/io.h>
void PWM_Timer0_Start(uint8 duty_cycle)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	0f 92       	push	r0
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
     fa6:	e2 e5       	ldi	r30, 0x52	; 82
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	10 82       	st	Z, r1

	OCR0  = duty_cycle; //Set Compare value
     fac:	ec e5       	ldi	r30, 0x5C	; 92
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
     fb4:	a7 e3       	ldi	r26, 0x37	; 55
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e3       	ldi	r30, 0x37	; 55
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	88 60       	ori	r24, 0x08	; 8
     fc0:	8c 93       	st	X, r24
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     fc2:	e3 e5       	ldi	r30, 0x53	; 83
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	8a e6       	ldi	r24, 0x6A	; 106
     fc8:	80 83       	st	Z, r24
}
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <__vector_7>:

static volatile void (*g_callBackPtr)(void) = NULL_PTR;


ISR(TIMER1_COMPA_vect)
{
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	ef 93       	push	r30
     ff2:	ff 93       	push	r31
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     ffc:	80 91 86 01 	lds	r24, 0x0186
    1000:	90 91 87 01 	lds	r25, 0x0187
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	29 f0       	breq	.+10     	; 0x1012 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1008:	e0 91 86 01 	lds	r30, 0x0186
    100c:	f0 91 87 01 	lds	r31, 0x0187
    1010:	09 95       	icall
	}
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	2f 93       	push	r18
    1044:	3f 93       	push	r19
    1046:	4f 93       	push	r20
    1048:	5f 93       	push	r21
    104a:	6f 93       	push	r22
    104c:	7f 93       	push	r23
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	af 93       	push	r26
    1054:	bf 93       	push	r27
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1062:	80 91 86 01 	lds	r24, 0x0186
    1066:	90 91 87 01 	lds	r25, 0x0187
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	29 f0       	breq	.+10     	; 0x1078 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    106e:	e0 91 86 01 	lds	r30, 0x0186
    1072:	f0 91 87 01 	lds	r31, 0x0187
    1076:	09 95       	icall
	}
}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <Timer1_init+0x6>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
   TCCR1A = (1<<FOC1A) | (1<<FOC1B) | (((Config_Ptr->mode)&0x03) | (TCCR1A & 0xFC));
    10ac:	af e4       	ldi	r26, 0x4F	; 79
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e9 81       	ldd	r30, Y+1	; 0x01
    10b2:	fa 81       	ldd	r31, Y+2	; 0x02
    10b4:	85 81       	ldd	r24, Z+5	; 0x05
    10b6:	98 2f       	mov	r25, r24
    10b8:	93 70       	andi	r25, 0x03	; 3
    10ba:	ef e4       	ldi	r30, 0x4F	; 79
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8c 7f       	andi	r24, 0xFC	; 252
    10c2:	89 2b       	or	r24, r25
    10c4:	8c 60       	ori	r24, 0x0C	; 12
    10c6:	8c 93       	st	X, r24
   TCCR1B = (((Config_Ptr->mode)>>2)<<WGM12) | ((Config_Ptr->prescaler) | (TCCR1B & 0xF8));
    10c8:	ae e4       	ldi	r26, 0x4E	; 78
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e9 81       	ldd	r30, Y+1	; 0x01
    10ce:	fa 81       	ldd	r31, Y+2	; 0x02
    10d0:	85 81       	ldd	r24, Z+5	; 0x05
    10d2:	86 95       	lsr	r24
    10d4:	86 95       	lsr	r24
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	28 2f       	mov	r18, r24
    10e8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ea:	fa 81       	ldd	r31, Y+2	; 0x02
    10ec:	84 81       	ldd	r24, Z+4	; 0x04
    10ee:	98 2f       	mov	r25, r24
    10f0:	ee e4       	ldi	r30, 0x4E	; 78
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 7f       	andi	r24, 0xF8	; 248
    10f8:	89 2b       	or	r24, r25
    10fa:	82 2b       	or	r24, r18
    10fc:	8c 93       	st	X, r24
   TCNT1 = Config_Ptr->initial_value;
    10fe:	ac e4       	ldi	r26, 0x4C	; 76
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	9c 93       	st	X, r25
    110e:	8e 93       	st	-X, r24
   OCR1A = Config_Ptr->compare_value;
    1110:	aa e4       	ldi	r26, 0x4A	; 74
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e9 81       	ldd	r30, Y+1	; 0x01
    1116:	fa 81       	ldd	r31, Y+2	; 0x02
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	93 81       	ldd	r25, Z+3	; 0x03
    111c:	11 96       	adiw	r26, 0x01	; 1
    111e:	9c 93       	st	X, r25
    1120:	8e 93       	st	-X, r24
   if((Config_Ptr->mode) == compar )
    1122:	e9 81       	ldd	r30, Y+1	; 0x01
    1124:	fa 81       	ldd	r31, Y+2	; 0x02
    1126:	85 81       	ldd	r24, Z+5	; 0x05
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	29 f4       	brne	.+10     	; 0x1136 <Timer1_init+0x98>
   {
	   TIMSK = (1<<OCIE1A);
    112c:	e9 e5       	ldi	r30, 0x59	; 89
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 e1       	ldi	r24, 0x10	; 16
    1132:	80 83       	st	Z, r24
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <Timer1_init+0xaa>
   }
   else if ((Config_Ptr->mode) == normal)
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	85 81       	ldd	r24, Z+5	; 0x05
    113c:	88 23       	and	r24, r24
    113e:	21 f4       	brne	.+8      	; 0x1148 <Timer1_init+0xaa>
   {
	   TIMSK = (1<<TOIE1);
    1140:	e9 e5       	ldi	r30, 0x59	; 89
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	80 83       	st	Z, r24
   }


}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <Timer1_deInit>:
void Timer1_deInit(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0 ;
    115a:	ee e4       	ldi	r30, 0x4E	; 78
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	10 82       	st	Z, r1
	TCNT1 = 0;
    1160:	ec e4       	ldi	r30, 0x4C	; 76
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	11 82       	std	Z+1, r1	; 0x01
    1166:	10 82       	st	Z, r1
	OCR1A = 0 ;
    1168:	ea e4       	ldi	r30, 0x4A	; 74
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	11 82       	std	Z+1, r1	; 0x01
    116e:	10 82       	st	Z, r1
}
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <Timer1_setCallBack+0x6>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	90 93 87 01 	sts	0x0187, r25
    118c:	80 93 86 01 	sts	0x0186, r24
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <EEPROM_writeByte+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <EEPROM_writeByte+0x8>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11ac:	0e 94 10 13 	call	0x2620	; 0x2620 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11b0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    11b4:	88 30       	cpi	r24, 0x08	; 8
    11b6:	11 f0       	breq	.+4      	; 0x11bc <EEPROM_writeByte+0x22>
        return ERROR;
    11b8:	1c 82       	std	Y+4, r1	; 0x04
    11ba:	28 c0       	rjmp	.+80     	; 0x120c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	80 70       	andi	r24, 0x00	; 0
    11c2:	97 70       	andi	r25, 0x07	; 7
    11c4:	88 0f       	add	r24, r24
    11c6:	89 2f       	mov	r24, r25
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 0b       	sbc	r25, r25
    11cc:	91 95       	neg	r25
    11ce:	80 6a       	ori	r24, 0xA0	; 160
    11d0:	0e 94 2b 13 	call	0x2656	; 0x2656 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11d4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    11d8:	88 31       	cpi	r24, 0x18	; 24
    11da:	11 f0       	breq	.+4      	; 0x11e0 <EEPROM_writeByte+0x46>
        return ERROR; 
    11dc:	1c 82       	std	Y+4, r1	; 0x04
    11de:	16 c0       	rjmp	.+44     	; 0x120c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	0e 94 2b 13 	call	0x2656	; 0x2656 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11e6:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    11ea:	88 32       	cpi	r24, 0x28	; 40
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <EEPROM_writeByte+0x58>
        return ERROR;
    11ee:	1c 82       	std	Y+4, r1	; 0x04
    11f0:	0d c0       	rjmp	.+26     	; 0x120c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	0e 94 2b 13 	call	0x2656	; 0x2656 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11f8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    11fc:	88 32       	cpi	r24, 0x28	; 40
    11fe:	11 f0       	breq	.+4      	; 0x1204 <EEPROM_writeByte+0x6a>
        return ERROR;
    1200:	1c 82       	std	Y+4, r1	; 0x04
    1202:	04 c0       	rjmp	.+8      	; 0x120c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1204:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_stop>
	
    return SUCCESS;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	8c 83       	std	Y+4, r24	; 0x04
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <EEPROM_readByte+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <EEPROM_readByte+0x8>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	7c 83       	std	Y+4, r23	; 0x04
    1230:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1232:	0e 94 10 13 	call	0x2620	; 0x2620 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1236:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    123a:	88 30       	cpi	r24, 0x08	; 8
    123c:	11 f0       	breq	.+4      	; 0x1242 <EEPROM_readByte+0x26>
        return ERROR;
    123e:	1d 82       	std	Y+5, r1	; 0x05
    1240:	44 c0       	rjmp	.+136    	; 0x12ca <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
    1246:	80 70       	andi	r24, 0x00	; 0
    1248:	97 70       	andi	r25, 0x07	; 7
    124a:	88 0f       	add	r24, r24
    124c:	89 2f       	mov	r24, r25
    124e:	88 1f       	adc	r24, r24
    1250:	99 0b       	sbc	r25, r25
    1252:	91 95       	neg	r25
    1254:	80 6a       	ori	r24, 0xA0	; 160
    1256:	0e 94 2b 13 	call	0x2656	; 0x2656 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    125a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    125e:	88 31       	cpi	r24, 0x18	; 24
    1260:	11 f0       	breq	.+4      	; 0x1266 <EEPROM_readByte+0x4a>
        return ERROR;
    1262:	1d 82       	std	Y+5, r1	; 0x05
    1264:	32 c0       	rjmp	.+100    	; 0x12ca <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	0e 94 2b 13 	call	0x2656	; 0x2656 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    126c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    1270:	88 32       	cpi	r24, 0x28	; 40
    1272:	11 f0       	breq	.+4      	; 0x1278 <EEPROM_readByte+0x5c>
        return ERROR;
    1274:	1d 82       	std	Y+5, r1	; 0x05
    1276:	29 c0       	rjmp	.+82     	; 0x12ca <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1278:	0e 94 10 13 	call	0x2620	; 0x2620 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    127c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    1280:	80 31       	cpi	r24, 0x10	; 16
    1282:	11 f0       	breq	.+4      	; 0x1288 <EEPROM_readByte+0x6c>
        return ERROR;
    1284:	1d 82       	std	Y+5, r1	; 0x05
    1286:	21 c0       	rjmp	.+66     	; 0x12ca <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	80 70       	andi	r24, 0x00	; 0
    128e:	97 70       	andi	r25, 0x07	; 7
    1290:	88 0f       	add	r24, r24
    1292:	89 2f       	mov	r24, r25
    1294:	88 1f       	adc	r24, r24
    1296:	99 0b       	sbc	r25, r25
    1298:	91 95       	neg	r25
    129a:	81 6a       	ori	r24, 0xA1	; 161
    129c:	0e 94 2b 13 	call	0x2656	; 0x2656 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12a0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    12a4:	80 34       	cpi	r24, 0x40	; 64
    12a6:	11 f0       	breq	.+4      	; 0x12ac <EEPROM_readByte+0x90>
        return ERROR;
    12a8:	1d 82       	std	Y+5, r1	; 0x05
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12ac:	0e 94 55 13 	call	0x26aa	; 0x26aa <TWI_readByteWithNACK>
    12b0:	eb 81       	ldd	r30, Y+3	; 0x03
    12b2:	fc 81       	ldd	r31, Y+4	; 0x04
    12b4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12b6:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_getStatus>
    12ba:	88 35       	cpi	r24, 0x58	; 88
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <EEPROM_readByte+0xa6>
        return ERROR;
    12be:	1d 82       	std	Y+5, r1	; 0x05
    12c0:	04 c0       	rjmp	.+8      	; 0x12ca <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    12c2:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_stop>

    return SUCCESS;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <GPIO_setupPinDirection+0x6>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <GPIO_setupPinDirection+0x8>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	6a 83       	std	Y+2, r22	; 0x02
    12ee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	88 30       	cpi	r24, 0x08	; 8
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <GPIO_setupPinDirection+0x1c>
    12f6:	d5 c0       	rjmp	.+426    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <GPIO_setupPinDirection+0x24>
    12fe:	d1 c0       	rjmp	.+418    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3d 83       	std	Y+5, r19	; 0x05
    1308:	2c 83       	std	Y+4, r18	; 0x04
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <GPIO_setupPinDirection+0x3a>
    1314:	43 c0       	rjmp	.+134    	; 0x139c <GPIO_setupPinDirection+0xc0>
    1316:	2c 81       	ldd	r18, Y+4	; 0x04
    1318:	3d 81       	ldd	r19, Y+5	; 0x05
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	2c f4       	brge	.+10     	; 0x132a <GPIO_setupPinDirection+0x4e>
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	71 f0       	breq	.+28     	; 0x1344 <GPIO_setupPinDirection+0x68>
    1328:	bc c0       	rjmp	.+376    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
    132a:	2c 81       	ldd	r18, Y+4	; 0x04
    132c:	3d 81       	ldd	r19, Y+5	; 0x05
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	09 f4       	brne	.+2      	; 0x1336 <GPIO_setupPinDirection+0x5a>
    1334:	5f c0       	rjmp	.+190    	; 0x13f4 <GPIO_setupPinDirection+0x118>
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	09 f4       	brne	.+2      	; 0x1342 <GPIO_setupPinDirection+0x66>
    1340:	85 c0       	rjmp	.+266    	; 0x144c <GPIO_setupPinDirection+0x170>
    1342:	af c0       	rjmp	.+350    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	a1 f4       	brne	.+40     	; 0x1372 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    134a:	aa e3       	ldi	r26, 0x3A	; 58
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ea e3       	ldi	r30, 0x3A	; 58
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <GPIO_setupPinDirection+0x8c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <GPIO_setupPinDirection+0x88>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	98 c0       	rjmp	.+304    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1372:	aa e3       	ldi	r26, 0x3A	; 58
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ea e3       	ldi	r30, 0x3A	; 58
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_setupPinDirection+0xb4>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_setupPinDirection+0xb0>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	83 c0       	rjmp	.+262    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13a2:	a7 e3       	ldi	r26, 0x37	; 55
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e7 e3       	ldi	r30, 0x37	; 55
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_setupPinDirection+0xe4>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_setupPinDirection+0xe0>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	6c c0       	rjmp	.+216    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13ca:	a7 e3       	ldi	r26, 0x37	; 55
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e7 e3       	ldi	r30, 0x37	; 55
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_setupPinDirection+0x10c>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_setupPinDirection+0x108>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	57 c0       	rjmp	.+174    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13fa:	a4 e3       	ldi	r26, 0x34	; 52
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e4 e3       	ldi	r30, 0x34	; 52
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_setupPinDirection+0x13c>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_setupPinDirection+0x138>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	40 c0       	rjmp	.+128    	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1422:	a4 e3       	ldi	r26, 0x34	; 52
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e4 e3       	ldi	r30, 0x34	; 52
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_setupPinDirection+0x164>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_setupPinDirection+0x160>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	2b c0       	rjmp	.+86     	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	a1 f4       	brne	.+40     	; 0x147a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1452:	a1 e3       	ldi	r26, 0x31	; 49
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e1 e3       	ldi	r30, 0x31	; 49
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_setupPinDirection+0x194>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_setupPinDirection+0x190>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	14 c0       	rjmp	.+40     	; 0x14a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    147a:	a1 e3       	ldi	r26, 0x31	; 49
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e1 e3       	ldi	r30, 0x31	; 49
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_setupPinDirection+0x1bc>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_setupPinDirection+0x1b8>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <GPIO_writePin+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <GPIO_writePin+0x8>
    14ba:	0f 92       	push	r0
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	6a 83       	std	Y+2, r22	; 0x02
    14c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	88 30       	cpi	r24, 0x08	; 8
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <GPIO_writePin+0x1c>
    14cc:	d5 c0       	rjmp	.+426    	; 0x1678 <GPIO_writePin+0x1c6>
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	84 30       	cpi	r24, 0x04	; 4
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <GPIO_writePin+0x24>
    14d4:	d1 c0       	rjmp	.+418    	; 0x1678 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3d 83       	std	Y+5, r19	; 0x05
    14de:	2c 83       	std	Y+4, r18	; 0x04
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	91 05       	cpc	r25, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <GPIO_writePin+0x3a>
    14ea:	43 c0       	rjmp	.+134    	; 0x1572 <GPIO_writePin+0xc0>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	2c f4       	brge	.+10     	; 0x1500 <GPIO_writePin+0x4e>
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	71 f0       	breq	.+28     	; 0x151a <GPIO_writePin+0x68>
    14fe:	bc c0       	rjmp	.+376    	; 0x1678 <GPIO_writePin+0x1c6>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <GPIO_writePin+0x5a>
    150a:	5f c0       	rjmp	.+190    	; 0x15ca <GPIO_writePin+0x118>
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	83 30       	cpi	r24, 0x03	; 3
    1512:	91 05       	cpc	r25, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <GPIO_writePin+0x66>
    1516:	85 c0       	rjmp	.+266    	; 0x1622 <GPIO_writePin+0x170>
    1518:	af c0       	rjmp	.+350    	; 0x1678 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	a1 f4       	brne	.+40     	; 0x1548 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1520:	ab e3       	ldi	r26, 0x3B	; 59
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	eb e3       	ldi	r30, 0x3B	; 59
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_writePin+0x8c>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_writePin+0x88>
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	98 c0       	rjmp	.+304    	; 0x1678 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1548:	ab e3       	ldi	r26, 0x3B	; 59
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	eb e3       	ldi	r30, 0x3B	; 59
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <GPIO_writePin+0xb4>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <GPIO_writePin+0xb0>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	83 c0       	rjmp	.+262    	; 0x1678 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1578:	a8 e3       	ldi	r26, 0x38	; 56
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_writePin+0xe4>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_writePin+0xe0>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	6c c0       	rjmp	.+216    	; 0x1678 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15a0:	a8 e3       	ldi	r26, 0x38	; 56
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e8 e3       	ldi	r30, 0x38	; 56
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_writePin+0x10c>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_writePin+0x108>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	57 c0       	rjmp	.+174    	; 0x1678 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	a1 f4       	brne	.+40     	; 0x15f8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15d0:	a5 e3       	ldi	r26, 0x35	; 53
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_writePin+0x13c>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_writePin+0x138>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	40 c0       	rjmp	.+128    	; 0x1678 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15f8:	a5 e3       	ldi	r26, 0x35	; 53
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e5 e3       	ldi	r30, 0x35	; 53
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_writePin+0x164>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_writePin+0x160>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	2b c0       	rjmp	.+86     	; 0x1678 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	a1 f4       	brne	.+40     	; 0x1650 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1628:	a2 e3       	ldi	r26, 0x32	; 50
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e2 e3       	ldi	r30, 0x32	; 50
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <GPIO_writePin+0x194>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <GPIO_writePin+0x190>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1650:	a2 e3       	ldi	r26, 0x32	; 50
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e2 e3       	ldi	r30, 0x32	; 50
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_writePin+0x1bc>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_writePin+0x1b8>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	00 d0       	rcall	.+0      	; 0x168e <GPIO_readPin+0x6>
    168e:	00 d0       	rcall	.+0      	; 0x1690 <GPIO_readPin+0x8>
    1690:	0f 92       	push	r0
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	8a 83       	std	Y+2, r24	; 0x02
    1698:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    169a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <GPIO_readPin+0x1c>
    16a2:	84 c0       	rjmp	.+264    	; 0x17ac <GPIO_readPin+0x124>
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	84 30       	cpi	r24, 0x04	; 4
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <GPIO_readPin+0x24>
    16aa:	80 c0       	rjmp	.+256    	; 0x17ac <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3d 83       	std	Y+5, r19	; 0x05
    16b4:	2c 83       	std	Y+4, r18	; 0x04
    16b6:	4c 81       	ldd	r20, Y+4	; 0x04
    16b8:	5d 81       	ldd	r21, Y+5	; 0x05
    16ba:	41 30       	cpi	r20, 0x01	; 1
    16bc:	51 05       	cpc	r21, r1
    16be:	79 f1       	breq	.+94     	; 0x171e <GPIO_readPin+0x96>
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	91 05       	cpc	r25, r1
    16c8:	34 f4       	brge	.+12     	; 0x16d6 <GPIO_readPin+0x4e>
    16ca:	2c 81       	ldd	r18, Y+4	; 0x04
    16cc:	3d 81       	ldd	r19, Y+5	; 0x05
    16ce:	21 15       	cp	r18, r1
    16d0:	31 05       	cpc	r19, r1
    16d2:	69 f0       	breq	.+26     	; 0x16ee <GPIO_readPin+0x66>
    16d4:	6b c0       	rjmp	.+214    	; 0x17ac <GPIO_readPin+0x124>
    16d6:	4c 81       	ldd	r20, Y+4	; 0x04
    16d8:	5d 81       	ldd	r21, Y+5	; 0x05
    16da:	42 30       	cpi	r20, 0x02	; 2
    16dc:	51 05       	cpc	r21, r1
    16de:	b9 f1       	breq	.+110    	; 0x174e <GPIO_readPin+0xc6>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <GPIO_readPin+0x64>
    16ea:	49 c0       	rjmp	.+146    	; 0x177e <GPIO_readPin+0xf6>
    16ec:	5f c0       	rjmp	.+190    	; 0x17ac <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    16ee:	e9 e3       	ldi	r30, 0x39	; 57
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <GPIO_readPin+0x7e>
    1702:	55 95       	asr	r21
    1704:	47 95       	ror	r20
    1706:	8a 95       	dec	r24
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <GPIO_readPin+0x7a>
    170a:	ca 01       	movw	r24, r20
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	90 70       	andi	r25, 0x00	; 0
    1710:	88 23       	and	r24, r24
    1712:	19 f0       	breq	.+6      	; 0x171a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	49 c0       	rjmp	.+146    	; 0x17ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    171a:	19 82       	std	Y+1, r1	; 0x01
    171c:	47 c0       	rjmp	.+142    	; 0x17ac <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    171e:	e6 e3       	ldi	r30, 0x36	; 54
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a9 01       	movw	r20, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <GPIO_readPin+0xae>
    1732:	55 95       	asr	r21
    1734:	47 95       	ror	r20
    1736:	8a 95       	dec	r24
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <GPIO_readPin+0xaa>
    173a:	ca 01       	movw	r24, r20
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	90 70       	andi	r25, 0x00	; 0
    1740:	88 23       	and	r24, r24
    1742:	19 f0       	breq	.+6      	; 0x174a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	31 c0       	rjmp	.+98     	; 0x17ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    174a:	19 82       	std	Y+1, r1	; 0x01
    174c:	2f c0       	rjmp	.+94     	; 0x17ac <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    174e:	e3 e3       	ldi	r30, 0x33	; 51
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a9 01       	movw	r20, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <GPIO_readPin+0xde>
    1762:	55 95       	asr	r21
    1764:	47 95       	ror	r20
    1766:	8a 95       	dec	r24
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <GPIO_readPin+0xda>
    176a:	ca 01       	movw	r24, r20
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	88 23       	and	r24, r24
    1772:	19 f0       	breq	.+6      	; 0x177a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	19 c0       	rjmp	.+50     	; 0x17ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    177a:	19 82       	std	Y+1, r1	; 0x01
    177c:	17 c0       	rjmp	.+46     	; 0x17ac <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    177e:	e0 e3       	ldi	r30, 0x30	; 48
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <GPIO_readPin+0x10e>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <GPIO_readPin+0x10a>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	90 70       	andi	r25, 0x00	; 0
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17aa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <GPIO_setupPortDirection+0x6>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <GPIO_setupPortDirection+0x8>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	84 30       	cpi	r24, 0x04	; 4
    17d2:	90 f5       	brcc	.+100    	; 0x1838 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	3c 83       	std	Y+4, r19	; 0x04
    17dc:	2b 83       	std	Y+3, r18	; 0x03
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	d1 f0       	breq	.+52     	; 0x181c <GPIO_setupPortDirection+0x5e>
    17e8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ea:	3c 81       	ldd	r19, Y+4	; 0x04
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	31 05       	cpc	r19, r1
    17f0:	2c f4       	brge	.+10     	; 0x17fc <GPIO_setupPortDirection+0x3e>
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	61 f0       	breq	.+24     	; 0x1812 <GPIO_setupPortDirection+0x54>
    17fa:	1e c0       	rjmp	.+60     	; 0x1838 <GPIO_setupPortDirection+0x7a>
    17fc:	2b 81       	ldd	r18, Y+3	; 0x03
    17fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1800:	22 30       	cpi	r18, 0x02	; 2
    1802:	31 05       	cpc	r19, r1
    1804:	81 f0       	breq	.+32     	; 0x1826 <GPIO_setupPortDirection+0x68>
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	91 05       	cpc	r25, r1
    180e:	81 f0       	breq	.+32     	; 0x1830 <GPIO_setupPortDirection+0x72>
    1810:	13 c0       	rjmp	.+38     	; 0x1838 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1812:	ea e3       	ldi	r30, 0x3A	; 58
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	80 83       	st	Z, r24
    181a:	0e c0       	rjmp	.+28     	; 0x1838 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    181c:	e7 e3       	ldi	r30, 0x37	; 55
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	80 83       	st	Z, r24
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1826:	e4 e3       	ldi	r30, 0x34	; 52
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	80 83       	st	Z, r24
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1830:	e1 e3       	ldi	r30, 0x31	; 49
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	80 83       	st	Z, r24
			break;
		}
	}
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <GPIO_writePort+0x6>
    184c:	00 d0       	rcall	.+0      	; 0x184e <GPIO_writePort+0x8>
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	90 f5       	brcc	.+100    	; 0x18c0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3c 83       	std	Y+4, r19	; 0x04
    1864:	2b 83       	std	Y+3, r18	; 0x03
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	91 05       	cpc	r25, r1
    186e:	d1 f0       	breq	.+52     	; 0x18a4 <GPIO_writePort+0x5e>
    1870:	2b 81       	ldd	r18, Y+3	; 0x03
    1872:	3c 81       	ldd	r19, Y+4	; 0x04
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	2c f4       	brge	.+10     	; 0x1884 <GPIO_writePort+0x3e>
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	61 f0       	breq	.+24     	; 0x189a <GPIO_writePort+0x54>
    1882:	1e c0       	rjmp	.+60     	; 0x18c0 <GPIO_writePort+0x7a>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	81 f0       	breq	.+32     	; 0x18ae <GPIO_writePort+0x68>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	91 05       	cpc	r25, r1
    1896:	81 f0       	breq	.+32     	; 0x18b8 <GPIO_writePort+0x72>
    1898:	13 c0       	rjmp	.+38     	; 0x18c0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    189a:	eb e3       	ldi	r30, 0x3B	; 59
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	80 83       	st	Z, r24
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	80 83       	st	Z, r24
    18ac:	09 c0       	rjmp	.+18     	; 0x18c0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18ae:	e5 e3       	ldi	r30, 0x35	; 53
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	80 83       	st	Z, r24
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18b8:	e2 e3       	ldi	r30, 0x32	; 50
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	80 83       	st	Z, r24
			break;
		}
	}
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <GPIO_readPort+0x6>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <GPIO_readPort+0x8>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    18dc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	84 30       	cpi	r24, 0x04	; 4
    18e2:	90 f5       	brcc	.+100    	; 0x1948 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3c 83       	std	Y+4, r19	; 0x04
    18ec:	2b 83       	std	Y+3, r18	; 0x03
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	d1 f0       	breq	.+52     	; 0x192c <GPIO_readPort+0x5e>
    18f8:	2b 81       	ldd	r18, Y+3	; 0x03
    18fa:	3c 81       	ldd	r19, Y+4	; 0x04
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	2c f4       	brge	.+10     	; 0x190c <GPIO_readPort+0x3e>
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	61 f0       	breq	.+24     	; 0x1922 <GPIO_readPort+0x54>
    190a:	1e c0       	rjmp	.+60     	; 0x1948 <GPIO_readPort+0x7a>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	81 f0       	breq	.+32     	; 0x1936 <GPIO_readPort+0x68>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	83 30       	cpi	r24, 0x03	; 3
    191c:	91 05       	cpc	r25, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <GPIO_readPort+0x72>
    1920:	13 c0       	rjmp	.+38     	; 0x1948 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1922:	e9 e3       	ldi	r30, 0x39	; 57
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	0e c0       	rjmp	.+28     	; 0x1948 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    192c:	e6 e3       	ldi	r30, 0x36	; 54
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1936:	e3 e3       	ldi	r30, 0x33	; 51
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1940:	e0 e3       	ldi	r30, 0x30	; 48
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <main>:
 *************************************************************************************************/

void timer_isr(void);

int main(void)
{
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	c6 58       	subi	r28, 0x86	; 134
    1966:	d0 40       	sbci	r29, 0x00	; 0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
	/* enable global I bit */
	SREG |= (1<<7);
    1972:	af e5       	ldi	r26, 0x5F	; 95
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ef e5       	ldi	r30, 0x5F	; 95
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 68       	ori	r24, 0x80	; 128
    197e:	8c 93       	st	X, r24
	/* configurations of timer to use in delay and motor timing */
	Timer1_ConfigType Timer_config = {26473 , 0 ,F_CPU_1024,normal };
    1980:	ce 01       	movw	r24, r28
    1982:	82 5b       	subi	r24, 0xB2	; 178
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	e0 96       	adiw	r28, 0x30	; 48
    1988:	9f af       	std	Y+63, r25	; 0x3f
    198a:	8e af       	std	Y+62, r24	; 0x3e
    198c:	e0 97       	sbiw	r28, 0x30	; 48
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	51 e0       	ldi	r21, 0x01	; 1
    1992:	e2 96       	adiw	r28, 0x32	; 50
    1994:	5f af       	std	Y+63, r21	; 0x3f
    1996:	4e af       	std	Y+62, r20	; 0x3e
    1998:	e2 97       	sbiw	r28, 0x32	; 50
    199a:	56 e0       	ldi	r21, 0x06	; 6
    199c:	e3 96       	adiw	r28, 0x33	; 51
    199e:	5f af       	std	Y+63, r21	; 0x3f
    19a0:	e3 97       	sbiw	r28, 0x33	; 51
    19a2:	e2 96       	adiw	r28, 0x32	; 50
    19a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    19a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    19a8:	e2 97       	sbiw	r28, 0x32	; 50
    19aa:	00 80       	ld	r0, Z
    19ac:	e2 96       	adiw	r28, 0x32	; 50
    19ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    19b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b2:	e2 97       	sbiw	r28, 0x32	; 50
    19b4:	4f 5f       	subi	r20, 0xFF	; 255
    19b6:	5f 4f       	sbci	r21, 0xFF	; 255
    19b8:	e2 96       	adiw	r28, 0x32	; 50
    19ba:	5f af       	std	Y+63, r21	; 0x3f
    19bc:	4e af       	std	Y+62, r20	; 0x3e
    19be:	e2 97       	sbiw	r28, 0x32	; 50
    19c0:	e0 96       	adiw	r28, 0x30	; 48
    19c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    19c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    19c6:	e0 97       	sbiw	r28, 0x30	; 48
    19c8:	00 82       	st	Z, r0
    19ca:	e0 96       	adiw	r28, 0x30	; 48
    19cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    19d0:	e0 97       	sbiw	r28, 0x30	; 48
    19d2:	4f 5f       	subi	r20, 0xFF	; 255
    19d4:	5f 4f       	sbci	r21, 0xFF	; 255
    19d6:	e0 96       	adiw	r28, 0x30	; 48
    19d8:	5f af       	std	Y+63, r21	; 0x3f
    19da:	4e af       	std	Y+62, r20	; 0x3e
    19dc:	e0 97       	sbiw	r28, 0x30	; 48
    19de:	e3 96       	adiw	r28, 0x33	; 51
    19e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    19e2:	e3 97       	sbiw	r28, 0x33	; 51
    19e4:	51 50       	subi	r21, 0x01	; 1
    19e6:	e3 96       	adiw	r28, 0x33	; 51
    19e8:	5f af       	std	Y+63, r21	; 0x3f
    19ea:	e3 97       	sbiw	r28, 0x33	; 51
    19ec:	e3 96       	adiw	r28, 0x33	; 51
    19ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    19f0:	e3 97       	sbiw	r28, 0x33	; 51
    19f2:	88 23       	and	r24, r24
    19f4:	b1 f6       	brne	.-84     	; 0x19a2 <main+0x4a>
	Timer1_ConfigType Timer_config_hold = {42098, 0 ,F_CPU_1024,normal };
    19f6:	ce 01       	movw	r24, r28
    19f8:	8c 5a       	subi	r24, 0xAC	; 172
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	e5 96       	adiw	r28, 0x35	; 53
    19fe:	9f af       	std	Y+63, r25	; 0x3f
    1a00:	8e af       	std	Y+62, r24	; 0x3e
    1a02:	e5 97       	sbiw	r28, 0x35	; 53
    1a04:	ea e7       	ldi	r30, 0x7A	; 122
    1a06:	f1 e0       	ldi	r31, 0x01	; 1
    1a08:	e7 96       	adiw	r28, 0x37	; 55
    1a0a:	ff af       	std	Y+63, r31	; 0x3f
    1a0c:	ee af       	std	Y+62, r30	; 0x3e
    1a0e:	e7 97       	sbiw	r28, 0x37	; 55
    1a10:	f6 e0       	ldi	r31, 0x06	; 6
    1a12:	e8 96       	adiw	r28, 0x38	; 56
    1a14:	ff af       	std	Y+63, r31	; 0x3f
    1a16:	e8 97       	sbiw	r28, 0x38	; 56
    1a18:	e7 96       	adiw	r28, 0x37	; 55
    1a1a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a1c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a1e:	e7 97       	sbiw	r28, 0x37	; 55
    1a20:	00 80       	ld	r0, Z
    1a22:	e7 96       	adiw	r28, 0x37	; 55
    1a24:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a26:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a28:	e7 97       	sbiw	r28, 0x37	; 55
    1a2a:	4f 5f       	subi	r20, 0xFF	; 255
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	e7 96       	adiw	r28, 0x37	; 55
    1a30:	5f af       	std	Y+63, r21	; 0x3f
    1a32:	4e af       	std	Y+62, r20	; 0x3e
    1a34:	e7 97       	sbiw	r28, 0x37	; 55
    1a36:	e5 96       	adiw	r28, 0x35	; 53
    1a38:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a3a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a3c:	e5 97       	sbiw	r28, 0x35	; 53
    1a3e:	00 82       	st	Z, r0
    1a40:	e5 96       	adiw	r28, 0x35	; 53
    1a42:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a44:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a46:	e5 97       	sbiw	r28, 0x35	; 53
    1a48:	4f 5f       	subi	r20, 0xFF	; 255
    1a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4c:	e5 96       	adiw	r28, 0x35	; 53
    1a4e:	5f af       	std	Y+63, r21	; 0x3f
    1a50:	4e af       	std	Y+62, r20	; 0x3e
    1a52:	e5 97       	sbiw	r28, 0x35	; 53
    1a54:	e8 96       	adiw	r28, 0x38	; 56
    1a56:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a58:	e8 97       	sbiw	r28, 0x38	; 56
    1a5a:	51 50       	subi	r21, 0x01	; 1
    1a5c:	e8 96       	adiw	r28, 0x38	; 56
    1a5e:	5f af       	std	Y+63, r21	; 0x3f
    1a60:	e8 97       	sbiw	r28, 0x38	; 56
    1a62:	e8 96       	adiw	r28, 0x38	; 56
    1a64:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a66:	e8 97       	sbiw	r28, 0x38	; 56
    1a68:	88 23       	and	r24, r24
    1a6a:	b1 f6       	brne	.-84     	; 0x1a18 <main+0xc0>
	/* set timer ISR function */
	Timer1_setCallBack(timer_isr);
    1a6c:	83 ec       	ldi	r24, 0xC3	; 195
    1a6e:	92 e1       	ldi	r25, 0x12	; 18
    1a70:	0e 94 bb 08 	call	0x1176	; 0x1176 <Timer1_setCallBack>
	/* initialise motor and buzzer */
	DcMotor_Init();
    1a74:	0e 94 40 07 	call	0xe80	; 0xe80 <DcMotor_Init>
	Buzzer_init();
    1a78:	0e 94 17 07 	call	0xe2e	; 0xe2e <Buzzer_init>
	/* I2C configuration and initialisation */
	TWI_ConfigType TWI_config = {0b00000010 , 400000};
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	86 5a       	subi	r24, 0xA6	; 166
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	ea 96       	adiw	r28, 0x3a	; 58
    1a84:	9f af       	std	Y+63, r25	; 0x3f
    1a86:	8e af       	std	Y+62, r24	; 0x3e
    1a88:	ea 97       	sbiw	r28, 0x3a	; 58
    1a8a:	e5 e7       	ldi	r30, 0x75	; 117
    1a8c:	f1 e0       	ldi	r31, 0x01	; 1
    1a8e:	ec 96       	adiw	r28, 0x3c	; 60
    1a90:	ff af       	std	Y+63, r31	; 0x3f
    1a92:	ee af       	std	Y+62, r30	; 0x3e
    1a94:	ec 97       	sbiw	r28, 0x3c	; 60
    1a96:	f5 e0       	ldi	r31, 0x05	; 5
    1a98:	ed 96       	adiw	r28, 0x3d	; 61
    1a9a:	ff af       	std	Y+63, r31	; 0x3f
    1a9c:	ed 97       	sbiw	r28, 0x3d	; 61
    1a9e:	ec 96       	adiw	r28, 0x3c	; 60
    1aa0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1aa2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1aa4:	ec 97       	sbiw	r28, 0x3c	; 60
    1aa6:	00 80       	ld	r0, Z
    1aa8:	ec 96       	adiw	r28, 0x3c	; 60
    1aaa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1aac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1aae:	ec 97       	sbiw	r28, 0x3c	; 60
    1ab0:	4f 5f       	subi	r20, 0xFF	; 255
    1ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab4:	ec 96       	adiw	r28, 0x3c	; 60
    1ab6:	5f af       	std	Y+63, r21	; 0x3f
    1ab8:	4e af       	std	Y+62, r20	; 0x3e
    1aba:	ec 97       	sbiw	r28, 0x3c	; 60
    1abc:	ea 96       	adiw	r28, 0x3a	; 58
    1abe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ac0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ac2:	ea 97       	sbiw	r28, 0x3a	; 58
    1ac4:	00 82       	st	Z, r0
    1ac6:	ea 96       	adiw	r28, 0x3a	; 58
    1ac8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1aca:	5f ad       	ldd	r21, Y+63	; 0x3f
    1acc:	ea 97       	sbiw	r28, 0x3a	; 58
    1ace:	4f 5f       	subi	r20, 0xFF	; 255
    1ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad2:	ea 96       	adiw	r28, 0x3a	; 58
    1ad4:	5f af       	std	Y+63, r21	; 0x3f
    1ad6:	4e af       	std	Y+62, r20	; 0x3e
    1ad8:	ea 97       	sbiw	r28, 0x3a	; 58
    1ada:	ed 96       	adiw	r28, 0x3d	; 61
    1adc:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ade:	ed 97       	sbiw	r28, 0x3d	; 61
    1ae0:	51 50       	subi	r21, 0x01	; 1
    1ae2:	ed 96       	adiw	r28, 0x3d	; 61
    1ae4:	5f af       	std	Y+63, r21	; 0x3f
    1ae6:	ed 97       	sbiw	r28, 0x3d	; 61
    1ae8:	ed 96       	adiw	r28, 0x3d	; 61
    1aea:	8f ad       	ldd	r24, Y+63	; 0x3f
    1aec:	ed 97       	sbiw	r28, 0x3d	; 61
    1aee:	88 23       	and	r24, r24
    1af0:	b1 f6       	brne	.-84     	; 0x1a9e <main+0x146>
	TWI_init(&TWI_config);
    1af2:	ce 01       	movw	r24, r28
    1af4:	86 5a       	subi	r24, 0xA6	; 166
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	0e 94 cf 12 	call	0x259e	; 0x259e <TWI_init>
	/* UART configuration and initialisation*/
	UART_ConfigType UART_Config = {eghit , diabled , one_bit ,9600};
    1afc:	ce 01       	movw	r24, r28
    1afe:	81 5a       	subi	r24, 0xA1	; 161
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	ef 96       	adiw	r28, 0x3f	; 63
    1b04:	9f af       	std	Y+63, r25	; 0x3f
    1b06:	8e af       	std	Y+62, r24	; 0x3e
    1b08:	ef 97       	sbiw	r28, 0x3f	; 63
    1b0a:	e0 e7       	ldi	r30, 0x70	; 112
    1b0c:	f1 e0       	ldi	r31, 0x01	; 1
    1b0e:	c1 58       	subi	r28, 0x81	; 129
    1b10:	df 4f       	sbci	r29, 0xFF	; 255
    1b12:	f9 83       	std	Y+1, r31	; 0x01
    1b14:	e8 83       	st	Y, r30
    1b16:	cf 57       	subi	r28, 0x7F	; 127
    1b18:	d0 40       	sbci	r29, 0x00	; 0
    1b1a:	f5 e0       	ldi	r31, 0x05	; 5
    1b1c:	cf 57       	subi	r28, 0x7F	; 127
    1b1e:	df 4f       	sbci	r29, 0xFF	; 255
    1b20:	f8 83       	st	Y, r31
    1b22:	c1 58       	subi	r28, 0x81	; 129
    1b24:	d0 40       	sbci	r29, 0x00	; 0
    1b26:	c1 58       	subi	r28, 0x81	; 129
    1b28:	df 4f       	sbci	r29, 0xFF	; 255
    1b2a:	e8 81       	ld	r30, Y
    1b2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2e:	cf 57       	subi	r28, 0x7F	; 127
    1b30:	d0 40       	sbci	r29, 0x00	; 0
    1b32:	00 80       	ld	r0, Z
    1b34:	c1 58       	subi	r28, 0x81	; 129
    1b36:	df 4f       	sbci	r29, 0xFF	; 255
    1b38:	48 81       	ld	r20, Y
    1b3a:	59 81       	ldd	r21, Y+1	; 0x01
    1b3c:	cf 57       	subi	r28, 0x7F	; 127
    1b3e:	d0 40       	sbci	r29, 0x00	; 0
    1b40:	4f 5f       	subi	r20, 0xFF	; 255
    1b42:	5f 4f       	sbci	r21, 0xFF	; 255
    1b44:	c1 58       	subi	r28, 0x81	; 129
    1b46:	df 4f       	sbci	r29, 0xFF	; 255
    1b48:	59 83       	std	Y+1, r21	; 0x01
    1b4a:	48 83       	st	Y, r20
    1b4c:	cf 57       	subi	r28, 0x7F	; 127
    1b4e:	d0 40       	sbci	r29, 0x00	; 0
    1b50:	ef 96       	adiw	r28, 0x3f	; 63
    1b52:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b54:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b56:	ef 97       	sbiw	r28, 0x3f	; 63
    1b58:	00 82       	st	Z, r0
    1b5a:	ef 96       	adiw	r28, 0x3f	; 63
    1b5c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b5e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b60:	ef 97       	sbiw	r28, 0x3f	; 63
    1b62:	4f 5f       	subi	r20, 0xFF	; 255
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	ef 96       	adiw	r28, 0x3f	; 63
    1b68:	5f af       	std	Y+63, r21	; 0x3f
    1b6a:	4e af       	std	Y+62, r20	; 0x3e
    1b6c:	ef 97       	sbiw	r28, 0x3f	; 63
    1b6e:	cf 57       	subi	r28, 0x7F	; 127
    1b70:	df 4f       	sbci	r29, 0xFF	; 255
    1b72:	58 81       	ld	r21, Y
    1b74:	c1 58       	subi	r28, 0x81	; 129
    1b76:	d0 40       	sbci	r29, 0x00	; 0
    1b78:	51 50       	subi	r21, 0x01	; 1
    1b7a:	cf 57       	subi	r28, 0x7F	; 127
    1b7c:	df 4f       	sbci	r29, 0xFF	; 255
    1b7e:	58 83       	st	Y, r21
    1b80:	c1 58       	subi	r28, 0x81	; 129
    1b82:	d0 40       	sbci	r29, 0x00	; 0
    1b84:	cf 57       	subi	r28, 0x7F	; 127
    1b86:	df 4f       	sbci	r29, 0xFF	; 255
    1b88:	88 81       	ld	r24, Y
    1b8a:	c1 58       	subi	r28, 0x81	; 129
    1b8c:	d0 40       	sbci	r29, 0x00	; 0
    1b8e:	88 23       	and	r24, r24
    1b90:	51 f6       	brne	.-108    	; 0x1b26 <main+0x1ce>
	UART_init(&UART_Config);
    1b92:	ce 01       	movw	r24, r28
    1b94:	81 5a       	subi	r24, 0xA1	; 161
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	0e 94 77 13 	call	0x26ee	; 0x26ee <UART_init>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	aa ef       	ldi	r26, 0xFA	; 250
    1ba2:	b3 e4       	ldi	r27, 0x43	; 67
    1ba4:	8d ab       	std	Y+53, r24	; 0x35
    1ba6:	9e ab       	std	Y+54, r25	; 0x36
    1ba8:	af ab       	std	Y+55, r26	; 0x37
    1baa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6d a9       	ldd	r22, Y+53	; 0x35
    1bae:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a ef       	ldi	r20, 0xFA	; 250
    1bba:	54 e4       	ldi	r21, 0x44	; 68
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	89 ab       	std	Y+49, r24	; 0x31
    1bc6:	9a ab       	std	Y+50, r25	; 0x32
    1bc8:	ab ab       	std	Y+51, r26	; 0x33
    1bca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bce:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <main+0x296>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	98 ab       	std	Y+48, r25	; 0x30
    1bea:	8f a7       	std	Y+47, r24	; 0x2f
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <main+0x314>
	else if (__tmp > 65535)
    1bee:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <main+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6d a9       	ldd	r22, Y+53	; 0x35
    1c08:	7e a9       	ldd	r23, Y+54	; 0x36
    1c0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	98 ab       	std	Y+48, r25	; 0x30
    1c2c:	8f a7       	std	Y+47, r24	; 0x2f
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <main+0x2f6>
    1c30:	88 ec       	ldi	r24, 0xC8	; 200
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9e a7       	std	Y+46, r25	; 0x2e
    1c36:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c38:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <main+0x2e4>
    1c40:	9e a7       	std	Y+46, r25	; 0x2e
    1c42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c46:	98 a9       	ldd	r25, Y+48	; 0x30
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	98 ab       	std	Y+48, r25	; 0x30
    1c4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c50:	98 a9       	ldd	r25, Y+48	; 0x30
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <main+0x2d8>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	98 ab       	std	Y+48, r25	; 0x30
    1c6a:	8f a7       	std	Y+47, r24	; 0x2f
    1c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c70:	9c a7       	std	Y+44, r25	; 0x2c
    1c72:	8b a7       	std	Y+43, r24	; 0x2b
    1c74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <main+0x320>
    1c7c:	9c a7       	std	Y+44, r25	; 0x2c
    1c7e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	/*sending ready to MC_1 to start receive instructions of each operation*/
	UART_sendByte(I_AM_READY);
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
	/* data received from MC_1*/
	uint8 data ;
	/*variables to receive passwords from MC_1 */
	uint8 data_pass  , data_pass_2, data_rePass;
	uint32 pass = 0 , pass_2 = 0, re_pass = 0;
    1c86:	fe 01       	movw	r30, r28
    1c88:	ea 5b       	subi	r30, 0xBA	; 186
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	10 82       	st	Z, r1
    1c8e:	11 82       	std	Z+1, r1	; 0x01
    1c90:	12 82       	std	Z+2, r1	; 0x02
    1c92:	13 82       	std	Z+3, r1	; 0x03
    1c94:	fe 01       	movw	r30, r28
    1c96:	ee 5b       	subi	r30, 0xBE	; 190
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	10 82       	st	Z, r1
    1c9c:	11 82       	std	Z+1, r1	; 0x01
    1c9e:	12 82       	std	Z+2, r1	; 0x02
    1ca0:	13 82       	std	Z+3, r1	; 0x03
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	fe 96       	adiw	r30, 0x3e	; 62
    1ca6:	10 82       	st	Z, r1
    1ca8:	11 82       	std	Z+1, r1	; 0x01
    1caa:	12 82       	std	Z+2, r1	; 0x02
    1cac:	13 82       	std	Z+3, r1	; 0x03
	/* counter variable */
	uint8 i ;
	/* variables to read and write in EEPROM */
	uint32 num = 0 , n;
    1cae:	19 ae       	std	Y+57, r1	; 0x39
    1cb0:	1a ae       	std	Y+58, r1	; 0x3a
    1cb2:	1b ae       	std	Y+59, r1	; 0x3b
    1cb4:	1c ae       	std	Y+60, r1	; 0x3c
	while(1)
	{
		/* receive instruction of operation from MC_1  */
		data = UART_recieveByte();
    1cb6:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e3 5b       	subi	r30, 0xB3	; 179
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 83       	st	Z, r24
		/* control first enter password condition */
		if(data == ENTER_PASS)
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e3 5b       	subi	r30, 0xB3	; 179
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 3d       	cpi	r24, 0xD0	; 208
    1ccc:	d1 f5       	brne	.+116    	; 0x1d42 <main+0x3ea>
		{
			/* receive 5 numbers of password from MC_1 */
			pass = 0;
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ea 5b       	subi	r30, 0xBA	; 186
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	10 82       	st	Z, r1
    1cd6:	11 82       	std	Z+1, r1	; 0x01
    1cd8:	12 82       	std	Z+2, r1	; 0x02
    1cda:	13 82       	std	Z+3, r1	; 0x03
			for( i = 0  ; i<5 ; i++)
    1cdc:	1d ae       	std	Y+61, r1	; 0x3d
    1cde:	2d c0       	rjmp	.+90     	; 0x1d3a <main+0x3e2>
			  {
			     data_pass = UART_recieveByte();
    1ce0:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e4 5b       	subi	r30, 0xB4	; 180
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 83       	st	Z, r24
			     pass = (pass*10) + data_pass;
    1cec:	fe 01       	movw	r30, r28
    1cee:	ea 5b       	subi	r30, 0xBA	; 186
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	a2 81       	ldd	r26, Z+2	; 0x02
    1cf8:	b3 81       	ldd	r27, Z+3	; 0x03
    1cfa:	2a e0       	ldi	r18, 0x0A	; 10
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 8a 14 	call	0x2914	; 0x2914 <__mulsi3>
    1d0a:	9b 01       	movw	r18, r22
    1d0c:	ac 01       	movw	r20, r24
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e4 5b       	subi	r30, 0xB4	; 180
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e0       	ldi	r26, 0x00	; 0
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ea 5b       	subi	r30, 0xBA	; 186
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	82 0f       	add	r24, r18
    1d26:	93 1f       	adc	r25, r19
    1d28:	a4 1f       	adc	r26, r20
    1d2a:	b5 1f       	adc	r27, r21
    1d2c:	80 83       	st	Z, r24
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	a2 83       	std	Z+2, r26	; 0x02
    1d32:	b3 83       	std	Z+3, r27	; 0x03
		/* control first enter password condition */
		if(data == ENTER_PASS)
		{
			/* receive 5 numbers of password from MC_1 */
			pass = 0;
			for( i = 0  ; i<5 ; i++)
    1d34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d36:	8f 5f       	subi	r24, 0xFF	; 255
    1d38:	8d af       	std	Y+61, r24	; 0x3d
    1d3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d3c:	85 30       	cpi	r24, 0x05	; 5
    1d3e:	80 f2       	brcs	.-96     	; 0x1ce0 <main+0x388>
    1d40:	ba cf       	rjmp	.-140    	; 0x1cb6 <main+0x35e>
			     data_pass = UART_recieveByte();
			     pass = (pass*10) + data_pass;
			  }
		}
		/* control re_entered password condition */
		else if (data == RE_ENTER_PASS)
    1d42:	fe 01       	movw	r30, r28
    1d44:	e3 5b       	subi	r30, 0xB3	; 179
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 81       	ld	r24, Z
    1d4a:	80 3c       	cpi	r24, 0xC0	; 192
    1d4c:	b9 f5       	brne	.+110    	; 0x1dbc <main+0x464>
		{
			/* receive 5 numbers of re_password from MC_1 */
			re_pass = 0;
    1d4e:	fe 01       	movw	r30, r28
    1d50:	fe 96       	adiw	r30, 0x3e	; 62
    1d52:	10 82       	st	Z, r1
    1d54:	11 82       	std	Z+1, r1	; 0x01
    1d56:	12 82       	std	Z+2, r1	; 0x02
    1d58:	13 82       	std	Z+3, r1	; 0x03
			for( i = 0  ; i<5 ; i++)
    1d5a:	1d ae       	std	Y+61, r1	; 0x3d
    1d5c:	2b c0       	rjmp	.+86     	; 0x1db4 <main+0x45c>
				{
				  data_rePass = UART_recieveByte();
    1d5e:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    1d62:	fe 01       	movw	r30, r28
    1d64:	e6 5b       	subi	r30, 0xB6	; 182
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 83       	st	Z, r24
				  re_pass = (re_pass*10) + data_rePass;
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	fe 96       	adiw	r30, 0x3e	; 62
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	a2 81       	ldd	r26, Z+2	; 0x02
    1d74:	b3 81       	ldd	r27, Z+3	; 0x03
    1d76:	2a e0       	ldi	r18, 0x0A	; 10
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 8a 14 	call	0x2914	; 0x2914 <__mulsi3>
    1d86:	9b 01       	movw	r18, r22
    1d88:	ac 01       	movw	r20, r24
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e6 5b       	subi	r30, 0xB6	; 182
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a0 e0       	ldi	r26, 0x00	; 0
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	fe 96       	adiw	r30, 0x3e	; 62
    1d9e:	82 0f       	add	r24, r18
    1da0:	93 1f       	adc	r25, r19
    1da2:	a4 1f       	adc	r26, r20
    1da4:	b5 1f       	adc	r27, r21
    1da6:	80 83       	st	Z, r24
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	a2 83       	std	Z+2, r26	; 0x02
    1dac:	b3 83       	std	Z+3, r27	; 0x03
		/* control re_entered password condition */
		else if (data == RE_ENTER_PASS)
		{
			/* receive 5 numbers of re_password from MC_1 */
			re_pass = 0;
			for( i = 0  ; i<5 ; i++)
    1dae:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db0:	8f 5f       	subi	r24, 0xFF	; 255
    1db2:	8d af       	std	Y+61, r24	; 0x3d
    1db4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db6:	85 30       	cpi	r24, 0x05	; 5
    1db8:	90 f2       	brcs	.-92     	; 0x1d5e <main+0x406>
    1dba:	7d cf       	rjmp	.-262    	; 0x1cb6 <main+0x35e>
				  data_rePass = UART_recieveByte();
				  re_pass = (re_pass*10) + data_rePass;
				}
		}
		/* compare password and re_password condition */
		else if (data == ENTER)
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e3 5b       	subi	r30, 0xB3	; 179
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8d 30       	cpi	r24, 0x0D	; 13
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <main+0x472>
    1dc8:	d9 c0       	rjmp	.+434    	; 0x1f7c <main+0x624>
		{
			num = 0;
    1dca:	19 ae       	std	Y+57, r1	; 0x39
    1dcc:	1a ae       	std	Y+58, r1	; 0x3a
    1dce:	1b ae       	std	Y+59, r1	; 0x3b
    1dd0:	1c ae       	std	Y+60, r1	; 0x3c
			/* when they are equal save password in EEPROM */
			if(pass == re_pass)
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ea 5b       	subi	r30, 0xBA	; 186
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	de 01       	movw	r26, r28
    1dda:	de 96       	adiw	r26, 0x3e	; 62
    1ddc:	20 81       	ld	r18, Z
    1dde:	31 81       	ldd	r19, Z+1	; 0x01
    1de0:	42 81       	ldd	r20, Z+2	; 0x02
    1de2:	53 81       	ldd	r21, Z+3	; 0x03
    1de4:	8d 91       	ld	r24, X+
    1de6:	9d 91       	ld	r25, X+
    1de8:	0d 90       	ld	r0, X+
    1dea:	bc 91       	ld	r27, X
    1dec:	a0 2d       	mov	r26, r0
    1dee:	28 17       	cp	r18, r24
    1df0:	39 07       	cpc	r19, r25
    1df2:	4a 07       	cpc	r20, r26
    1df4:	5b 07       	cpc	r21, r27
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <main+0x4a2>
    1df8:	bd c0       	rjmp	.+378    	; 0x1f74 <main+0x61c>
			{
				UART_sendByte(SAME_PASS);
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
				for(i = 0 ; i<5 ; i++ )
    1e00:	1d ae       	std	Y+61, r1	; 0x3d
    1e02:	b3 c0       	rjmp	.+358    	; 0x1f6a <main+0x612>
				{
					num = pass%10;
    1e04:	fe 01       	movw	r30, r28
    1e06:	ea 5b       	subi	r30, 0xBA	; 186
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	a2 81       	ldd	r26, Z+2	; 0x02
    1e10:	b3 81       	ldd	r27, Z+3	; 0x03
    1e12:	2a e0       	ldi	r18, 0x0A	; 10
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 a9 14 	call	0x2952	; 0x2952 <__udivmodsi4>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	89 af       	std	Y+57, r24	; 0x39
    1e28:	9a af       	std	Y+58, r25	; 0x3a
    1e2a:	ab af       	std	Y+59, r26	; 0x3b
    1e2c:	bc af       	std	Y+60, r27	; 0x3c
					pass = pass/10 ;
    1e2e:	8e 01       	movw	r16, r28
    1e30:	0a 5b       	subi	r16, 0xBA	; 186
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	fe 01       	movw	r30, r28
    1e36:	ea 5b       	subi	r30, 0xBA	; 186
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	a2 81       	ldd	r26, Z+2	; 0x02
    1e40:	b3 81       	ldd	r27, Z+3	; 0x03
    1e42:	2a e0       	ldi	r18, 0x0A	; 10
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	50 e0       	ldi	r21, 0x00	; 0
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	0e 94 a9 14 	call	0x2952	; 0x2952 <__udivmodsi4>
    1e52:	da 01       	movw	r26, r20
    1e54:	c9 01       	movw	r24, r18
    1e56:	f8 01       	movw	r30, r16
    1e58:	80 83       	st	Z, r24
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	a2 83       	std	Z+2, r26	; 0x02
    1e5e:	b3 83       	std	Z+3, r27	; 0x03
					EEPROM_writeByte((add+4-i),num);
    1e60:	20 91 68 01 	lds	r18, 0x0168
    1e64:	30 91 69 01 	lds	r19, 0x0169
    1e68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a9 01       	movw	r20, r18
    1e70:	48 1b       	sub	r20, r24
    1e72:	59 0b       	sbc	r21, r25
    1e74:	ca 01       	movw	r24, r20
    1e76:	04 96       	adiw	r24, 0x04	; 4
    1e78:	29 ad       	ldd	r18, Y+57	; 0x39
    1e7a:	62 2f       	mov	r22, r18
    1e7c:	0e 94 cd 08 	call	0x119a	; 0x119a <EEPROM_writeByte>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e2       	ldi	r26, 0x20	; 32
    1e86:	b1 e4       	ldi	r27, 0x41	; 65
    1e88:	8f a3       	std	Y+39, r24	; 0x27
    1e8a:	98 a7       	std	Y+40, r25	; 0x28
    1e8c:	a9 a7       	std	Y+41, r26	; 0x29
    1e8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6f a1       	ldd	r22, Y+39	; 0x27
    1e92:	78 a5       	ldd	r23, Y+40	; 0x28
    1e94:	89 a5       	ldd	r24, Y+41	; 0x29
    1e96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a ef       	ldi	r20, 0xFA	; 250
    1e9e:	54 e4       	ldi	r21, 0x44	; 68
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8b a3       	std	Y+35, r24	; 0x23
    1eaa:	9c a3       	std	Y+36, r25	; 0x24
    1eac:	ad a3       	std	Y+37, r26	; 0x25
    1eae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <main+0x57a>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9a a3       	std	Y+34, r25	; 0x22
    1ece:	89 a3       	std	Y+33, r24	; 0x21
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <main+0x5f8>
	else if (__tmp > 65535)
    1ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <main+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6f a1       	ldd	r22, Y+39	; 0x27
    1eec:	78 a5       	ldd	r23, Y+40	; 0x28
    1eee:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9a a3       	std	Y+34, r25	; 0x22
    1f10:	89 a3       	std	Y+33, r24	; 0x21
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <main+0x5da>
    1f14:	88 ec       	ldi	r24, 0xC8	; 200
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	98 a3       	std	Y+32, r25	; 0x20
    1f1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <main+0x5c8>
    1f24:	98 a3       	std	Y+32, r25	; 0x20
    1f26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <main+0x5bc>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <main+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f40:	8d a1       	ldd	r24, Y+37	; 0x25
    1f42:	9e a1       	ldd	r25, Y+38	; 0x26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	9e 8f       	std	Y+30, r25	; 0x1e
    1f56:	8d 8f       	std	Y+29, r24	; 0x1d
    1f58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <main+0x604>
    1f60:	9e 8f       	std	Y+30, r25	; 0x1e
    1f62:	8d 8f       	std	Y+29, r24	; 0x1d
			num = 0;
			/* when they are equal save password in EEPROM */
			if(pass == re_pass)
			{
				UART_sendByte(SAME_PASS);
				for(i = 0 ; i<5 ; i++ )
    1f64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f66:	8f 5f       	subi	r24, 0xFF	; 255
    1f68:	8d af       	std	Y+61, r24	; 0x3d
    1f6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f6c:	85 30       	cpi	r24, 0x05	; 5
    1f6e:	08 f4       	brcc	.+2      	; 0x1f72 <main+0x61a>
    1f70:	49 cf       	rjmp	.-366    	; 0x1e04 <main+0x4ac>
    1f72:	a1 ce       	rjmp	.-702    	; 0x1cb6 <main+0x35e>
				}
			}
			/* other that send not_same_pass to MC_1*/
			else
			{
				UART_sendByte(NOT_SAME_PASS);
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
    1f7a:	9d ce       	rjmp	.-710    	; 0x1cb6 <main+0x35e>
			}
		}
		/* control second entered password from main options condition */
		else if (data == ENTER_PASS_TWO)
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e3 5b       	subi	r30, 0xB3	; 179
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 81       	ld	r24, Z
    1f84:	80 3e       	cpi	r24, 0xE0	; 224
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <main+0x632>
    1f88:	71 c1       	rjmp	.+738    	; 0x226c <main+0x914>
		{
			/* get password saved in EEPROM */
			num = 0;
    1f8a:	19 ae       	std	Y+57, r1	; 0x39
    1f8c:	1a ae       	std	Y+58, r1	; 0x3a
    1f8e:	1b ae       	std	Y+59, r1	; 0x3b
    1f90:	1c ae       	std	Y+60, r1	; 0x3c
			pass_2 = 0;
    1f92:	fe 01       	movw	r30, r28
    1f94:	ee 5b       	subi	r30, 0xBE	; 190
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	10 82       	st	Z, r1
    1f9a:	11 82       	std	Z+1, r1	; 0x01
    1f9c:	12 82       	std	Z+2, r1	; 0x02
    1f9e:	13 82       	std	Z+3, r1	; 0x03
			for(i=0 ;i<5;i++ )
    1fa0:	1d ae       	std	Y+61, r1	; 0x3d
    1fa2:	a1 c0       	rjmp	.+322    	; 0x20e6 <main+0x78e>
				{
					 EEPROM_readByte((add+i),&n);
    1fa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	80 91 68 01 	lds	r24, 0x0168
    1fae:	90 91 69 01 	lds	r25, 0x0169
    1fb2:	82 0f       	add	r24, r18
    1fb4:	93 1f       	adc	r25, r19
    1fb6:	9e 01       	movw	r18, r28
    1fb8:	2c 59       	subi	r18, 0x9C	; 156
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	0e 94 0e 09 	call	0x121c	; 0x121c <EEPROM_readByte>
					 num = (num*10) + n ;
    1fc2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fc6:	ab ad       	ldd	r26, Y+59	; 0x3b
    1fc8:	bc ad       	ldd	r27, Y+60	; 0x3c
    1fca:	2a e0       	ldi	r18, 0x0A	; 10
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 8a 14 	call	0x2914	; 0x2914 <__mulsi3>
    1fda:	9b 01       	movw	r18, r22
    1fdc:	ac 01       	movw	r20, r24
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ec 59       	subi	r30, 0x9C	; 156
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	a2 81       	ldd	r26, Z+2	; 0x02
    1fea:	b3 81       	ldd	r27, Z+3	; 0x03
    1fec:	82 0f       	add	r24, r18
    1fee:	93 1f       	adc	r25, r19
    1ff0:	a4 1f       	adc	r26, r20
    1ff2:	b5 1f       	adc	r27, r21
    1ff4:	89 af       	std	Y+57, r24	; 0x39
    1ff6:	9a af       	std	Y+58, r25	; 0x3a
    1ff8:	ab af       	std	Y+59, r26	; 0x3b
    1ffa:	bc af       	std	Y+60, r27	; 0x3c
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 e2       	ldi	r26, 0x20	; 32
    2002:	b1 e4       	ldi	r27, 0x41	; 65
    2004:	89 8f       	std	Y+25, r24	; 0x19
    2006:	9a 8f       	std	Y+26, r25	; 0x1a
    2008:	ab 8f       	std	Y+27, r26	; 0x1b
    200a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	69 8d       	ldd	r22, Y+25	; 0x19
    200e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2010:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2012:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8d 8b       	std	Y+21, r24	; 0x15
    2026:	9e 8b       	std	Y+22, r25	; 0x16
    2028:	af 8b       	std	Y+23, r26	; 0x17
    202a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    202c:	6d 89       	ldd	r22, Y+21	; 0x15
    202e:	7e 89       	ldd	r23, Y+22	; 0x16
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <main+0x6f6>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <main+0x774>
	else if (__tmp > 65535)
    204e:	6d 89       	ldd	r22, Y+21	; 0x15
    2050:	7e 89       	ldd	r23, Y+22	; 0x16
    2052:	8f 89       	ldd	r24, Y+23	; 0x17
    2054:	98 8d       	ldd	r25, Y+24	; 0x18
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <main+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	69 8d       	ldd	r22, Y+25	; 0x19
    2068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    206c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9c 8b       	std	Y+20, r25	; 0x14
    208c:	8b 8b       	std	Y+19, r24	; 0x13
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <main+0x756>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9a 8b       	std	Y+18, r25	; 0x12
    2096:	89 8b       	std	Y+17, r24	; 0x11
    2098:	89 89       	ldd	r24, Y+17	; 0x11
    209a:	9a 89       	ldd	r25, Y+18	; 0x12
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <main+0x744>
    20a0:	9a 8b       	std	Y+18, r25	; 0x12
    20a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8b 89       	ldd	r24, Y+19	; 0x13
    20a6:	9c 89       	ldd	r25, Y+20	; 0x14
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9c 8b       	std	Y+20, r25	; 0x14
    20ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8b 89       	ldd	r24, Y+19	; 0x13
    20b0:	9c 89       	ldd	r25, Y+20	; 0x14
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <main+0x738>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <main+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ba:	7e 89       	ldd	r23, Y+22	; 0x16
    20bc:	8f 89       	ldd	r24, Y+23	; 0x17
    20be:	98 8d       	ldd	r25, Y+24	; 0x18
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9c 8b       	std	Y+20, r25	; 0x14
    20ca:	8b 8b       	std	Y+19, r24	; 0x13
    20cc:	8b 89       	ldd	r24, Y+19	; 0x13
    20ce:	9c 89       	ldd	r25, Y+20	; 0x14
    20d0:	98 8b       	std	Y+16, r25	; 0x10
    20d2:	8f 87       	std	Y+15, r24	; 0x0f
    20d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d6:	98 89       	ldd	r25, Y+16	; 0x10
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <main+0x780>
    20dc:	98 8b       	std	Y+16, r25	; 0x10
    20de:	8f 87       	std	Y+15, r24	; 0x0f
		else if (data == ENTER_PASS_TWO)
		{
			/* get password saved in EEPROM */
			num = 0;
			pass_2 = 0;
			for(i=0 ;i<5;i++ )
    20e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	8d af       	std	Y+61, r24	; 0x3d
    20e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20e8:	85 30       	cpi	r24, 0x05	; 5
    20ea:	08 f4       	brcc	.+2      	; 0x20ee <main+0x796>
    20ec:	5b cf       	rjmp	.-330    	; 0x1fa4 <main+0x64c>
					 EEPROM_readByte((add+i),&n);
					 num = (num*10) + n ;
					 _delay_ms(10);
				}
			/* receive 5 numbers of password from MC_1 */
			UART_sendByte(START);
    20ee:	84 e4       	ldi	r24, 0x44	; 68
    20f0:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
			for( i = 0  ; i<5 ; i++)
    20f4:	1d ae       	std	Y+61, r1	; 0x3d
    20f6:	2d c0       	rjmp	.+90     	; 0x2152 <main+0x7fa>
				 {
				      data_pass_2 = UART_recieveByte();
    20f8:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    20fc:	fe 01       	movw	r30, r28
    20fe:	e5 5b       	subi	r30, 0xB5	; 181
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 83       	st	Z, r24
					  pass_2 = (pass_2*10) + data_pass_2;
    2104:	fe 01       	movw	r30, r28
    2106:	ee 5b       	subi	r30, 0xBE	; 190
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	91 81       	ldd	r25, Z+1	; 0x01
    210e:	a2 81       	ldd	r26, Z+2	; 0x02
    2110:	b3 81       	ldd	r27, Z+3	; 0x03
    2112:	2a e0       	ldi	r18, 0x0A	; 10
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__mulsi3>
    2122:	9b 01       	movw	r18, r22
    2124:	ac 01       	movw	r20, r24
    2126:	fe 01       	movw	r30, r28
    2128:	e5 5b       	subi	r30, 0xB5	; 181
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e0       	ldi	r26, 0x00	; 0
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	fe 01       	movw	r30, r28
    2138:	ee 5b       	subi	r30, 0xBE	; 190
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	82 0f       	add	r24, r18
    213e:	93 1f       	adc	r25, r19
    2140:	a4 1f       	adc	r26, r20
    2142:	b5 1f       	adc	r27, r21
    2144:	80 83       	st	Z, r24
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	a2 83       	std	Z+2, r26	; 0x02
    214a:	b3 83       	std	Z+3, r27	; 0x03
					 num = (num*10) + n ;
					 _delay_ms(10);
				}
			/* receive 5 numbers of password from MC_1 */
			UART_sendByte(START);
			for( i = 0  ; i<5 ; i++)
    214c:	8d ad       	ldd	r24, Y+61	; 0x3d
    214e:	8f 5f       	subi	r24, 0xFF	; 255
    2150:	8d af       	std	Y+61, r24	; 0x3d
    2152:	8d ad       	ldd	r24, Y+61	; 0x3d
    2154:	85 30       	cpi	r24, 0x05	; 5
    2156:	80 f2       	brcs	.-96     	; 0x20f8 <main+0x7a0>
				 {
				      data_pass_2 = UART_recieveByte();
					  pass_2 = (pass_2*10) + data_pass_2;
				 }
			/* start comparing of saved password and entered password */
			if(UART_recieveByte() == ENTER)
    2158:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    215c:	8d 30       	cpi	r24, 0x0D	; 13
    215e:	19 f4       	brne	.+6      	; 0x2166 <main+0x80e>
			{
			   UART_sendByte(START);
    2160:	84 e4       	ldi	r24, 0x44	; 68
    2162:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
			}
			/* if entered password is true */
			if(num == pass_2)
    2166:	fe 01       	movw	r30, r28
    2168:	ee 5b       	subi	r30, 0xBE	; 190
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	29 ad       	ldd	r18, Y+57	; 0x39
    216e:	3a ad       	ldd	r19, Y+58	; 0x3a
    2170:	4b ad       	ldd	r20, Y+59	; 0x3b
    2172:	5c ad       	ldd	r21, Y+60	; 0x3c
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	a2 81       	ldd	r26, Z+2	; 0x02
    217a:	b3 81       	ldd	r27, Z+3	; 0x03
    217c:	28 17       	cp	r18, r24
    217e:	39 07       	cpc	r19, r25
    2180:	4a 07       	cpc	r20, r26
    2182:	5b 07       	cpc	r21, r27
    2184:	09 f0       	breq	.+2      	; 0x2188 <main+0x830>
    2186:	48 c0       	rjmp	.+144    	; 0x2218 <main+0x8c0>
			{
				/* send open door to MC_1 */
				UART_sendByte(START);
    2188:	84 e4       	ldi	r24, 0x44	; 68
    218a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
				/* rotate motor clockwise with full speed */
				UART_sendByte(DOOR_OPENED);
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
				DcMotor_Rotate(clock_wise,100);
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	64 e6       	ldi	r22, 0x64	; 100
    2198:	0e 94 60 07 	call	0xec0	; 0xec0 <DcMotor_Rotate>
				/* start timer to calculate and hold for 15 seconds */
				Timer1_init(&Timer_config);
    219c:	ce 01       	movw	r24, r28
    219e:	82 5b       	subi	r24, 0xB2	; 178
    21a0:	9f 4f       	sbci	r25, 0xFF	; 255
    21a2:	0e 94 4f 08 	call	0x109e	; 0x109e <Timer1_init>
				while(ticks != 3){}
    21a6:	80 91 88 01 	lds	r24, 0x0188
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	e1 f7       	brne	.-8      	; 0x21a6 <main+0x84e>
				/* stop motor and close timer */
				DcMotor_Rotate(stop_motor,0);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	0e 94 60 07 	call	0xec0	; 0xec0 <DcMotor_Rotate>
				Timer1_deInit();
    21b6:	0e 94 a9 08 	call	0x1152	; 0x1152 <Timer1_deInit>
				ticks = 0 ;
    21ba:	10 92 88 01 	sts	0x0188, r1
				/* start timer to hold for 3 seconds */
				Timer1_init(&Timer_config_hold);
    21be:	ce 01       	movw	r24, r28
    21c0:	8c 5a       	subi	r24, 0xAC	; 172
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	0e 94 4f 08 	call	0x109e	; 0x109e <Timer1_init>
				while(ticks != 1){}
    21c8:	80 91 88 01 	lds	r24, 0x0188
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <main+0x870>
				/* stop timer and send door_locking to MC_1 */
				Timer1_deInit();
    21d0:	0e 94 a9 08 	call	0x1152	; 0x1152 <Timer1_deInit>
				ticks = 0;
    21d4:	10 92 88 01 	sts	0x0188, r1
				while(UART_recieveByte() != DOOR_CLOSED){}
    21d8:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    21dc:	83 30       	cpi	r24, 0x03	; 3
    21de:	e1 f7       	brne	.-8      	; 0x21d8 <main+0x880>
				UART_sendByte(START);
    21e0:	84 e4       	ldi	r24, 0x44	; 68
    21e2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
				UART_sendByte(DOOR_CLOSED);
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
				/* rotate motor anti clockwise with full speed */
				DcMotor_Rotate(anti_clock_wise,100);
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	64 e6       	ldi	r22, 0x64	; 100
    21f0:	0e 94 60 07 	call	0xec0	; 0xec0 <DcMotor_Rotate>
				/*start timer to calculate 15 seconds */
				Timer1_init(&Timer_config);
    21f4:	ce 01       	movw	r24, r28
    21f6:	82 5b       	subi	r24, 0xB2	; 178
    21f8:	9f 4f       	sbci	r25, 0xFF	; 255
    21fa:	0e 94 4f 08 	call	0x109e	; 0x109e <Timer1_init>
				while(ticks != 3){}
    21fe:	80 91 88 01 	lds	r24, 0x0188
    2202:	83 30       	cpi	r24, 0x03	; 3
    2204:	e1 f7       	brne	.-8      	; 0x21fe <main+0x8a6>
				/* stop motor and close timer */
			    DcMotor_Rotate(stop_motor,0);
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	0e 94 60 07 	call	0xec0	; 0xec0 <DcMotor_Rotate>
				Timer1_deInit();
    220e:	0e 94 a9 08 	call	0x1152	; 0x1152 <Timer1_deInit>
			    ticks = 0;
    2212:	10 92 88 01 	sts	0x0188, r1
    2216:	4f cd       	rjmp	.-1378   	; 0x1cb6 <main+0x35e>
			}
			/* if entered password was wrong */
			else if (num != pass_2)
    2218:	fe 01       	movw	r30, r28
    221a:	ee 5b       	subi	r30, 0xBE	; 190
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	29 ad       	ldd	r18, Y+57	; 0x39
    2220:	3a ad       	ldd	r19, Y+58	; 0x3a
    2222:	4b ad       	ldd	r20, Y+59	; 0x3b
    2224:	5c ad       	ldd	r21, Y+60	; 0x3c
    2226:	80 81       	ld	r24, Z
    2228:	91 81       	ldd	r25, Z+1	; 0x01
    222a:	a2 81       	ldd	r26, Z+2	; 0x02
    222c:	b3 81       	ldd	r27, Z+3	; 0x03
    222e:	28 17       	cp	r18, r24
    2230:	39 07       	cpc	r19, r25
    2232:	4a 07       	cpc	r20, r26
    2234:	5b 07       	cpc	r21, r27
    2236:	09 f4       	brne	.+2      	; 0x223a <main+0x8e2>
    2238:	3e cd       	rjmp	.-1412   	; 0x1cb6 <main+0x35e>
			{
				/* give him 3 chances */
                chances ++;
    223a:	80 91 89 01 	lds	r24, 0x0189
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	80 93 89 01 	sts	0x0189, r24
                /* if chances equal 3 send Alarm instruction to MC_1 */
                if(chances == 3)
    2244:	80 91 89 01 	lds	r24, 0x0189
    2248:	83 30       	cpi	r24, 0x03	; 3
    224a:	49 f4       	brne	.+18     	; 0x225e <main+0x906>
                {
                	chances = 0;
    224c:	10 92 89 01 	sts	0x0189, r1
                	UART_sendByte(START);
    2250:	84 e4       	ldi	r24, 0x44	; 68
    2252:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
                	UART_sendByte(ALARM);
    2256:	80 ea       	ldi	r24, 0xA0	; 160
    2258:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
    225c:	2c cd       	rjmp	.-1448   	; 0x1cb6 <main+0x35e>
                }
                else
                {
                	UART_sendByte(START);
    225e:	84 e4       	ldi	r24, 0x44	; 68
    2260:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
                 	UART_sendByte(WRONG);
    2264:	8a ea       	ldi	r24, 0xAA	; 170
    2266:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
    226a:	25 cd       	rjmp	.-1462   	; 0x1cb6 <main+0x35e>
                }
			}
		}
		/* change password condition */
		else if (data == CHANGE_PASS)
    226c:	fe 01       	movw	r30, r28
    226e:	e3 5b       	subi	r30, 0xB3	; 179
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	80 3f       	cpi	r24, 0xF0	; 240
    2276:	09 f0       	breq	.+2      	; 0x227a <main+0x922>
    2278:	17 c1       	rjmp	.+558    	; 0x24a8 <main+0xb50>
		{
			/* first get old password from EEPROM */
			num = 0;
    227a:	19 ae       	std	Y+57, r1	; 0x39
    227c:	1a ae       	std	Y+58, r1	; 0x3a
    227e:	1b ae       	std	Y+59, r1	; 0x3b
    2280:	1c ae       	std	Y+60, r1	; 0x3c
			pass_2 = 0;
    2282:	fe 01       	movw	r30, r28
    2284:	ee 5b       	subi	r30, 0xBE	; 190
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	10 82       	st	Z, r1
    228a:	11 82       	std	Z+1, r1	; 0x01
    228c:	12 82       	std	Z+2, r1	; 0x02
    228e:	13 82       	std	Z+3, r1	; 0x03
			for(i=0 ;i<5;i++ )
    2290:	1d ae       	std	Y+61, r1	; 0x3d
    2292:	a1 c0       	rjmp	.+322    	; 0x23d6 <main+0xa7e>
				{
					 EEPROM_readByte((add+i),&n);
    2294:	8d ad       	ldd	r24, Y+61	; 0x3d
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	80 91 68 01 	lds	r24, 0x0168
    229e:	90 91 69 01 	lds	r25, 0x0169
    22a2:	82 0f       	add	r24, r18
    22a4:	93 1f       	adc	r25, r19
    22a6:	9e 01       	movw	r18, r28
    22a8:	2c 59       	subi	r18, 0x9C	; 156
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	b9 01       	movw	r22, r18
    22ae:	0e 94 0e 09 	call	0x121c	; 0x121c <EEPROM_readByte>
					 num = (num*10) + n ;
    22b2:	89 ad       	ldd	r24, Y+57	; 0x39
    22b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    22b6:	ab ad       	ldd	r26, Y+59	; 0x3b
    22b8:	bc ad       	ldd	r27, Y+60	; 0x3c
    22ba:	2a e0       	ldi	r18, 0x0A	; 10
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	bc 01       	movw	r22, r24
    22c4:	cd 01       	movw	r24, r26
    22c6:	0e 94 8a 14 	call	0x2914	; 0x2914 <__mulsi3>
    22ca:	9b 01       	movw	r18, r22
    22cc:	ac 01       	movw	r20, r24
    22ce:	fe 01       	movw	r30, r28
    22d0:	ec 59       	subi	r30, 0x9C	; 156
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
    22d8:	a2 81       	ldd	r26, Z+2	; 0x02
    22da:	b3 81       	ldd	r27, Z+3	; 0x03
    22dc:	82 0f       	add	r24, r18
    22de:	93 1f       	adc	r25, r19
    22e0:	a4 1f       	adc	r26, r20
    22e2:	b5 1f       	adc	r27, r21
    22e4:	89 af       	std	Y+57, r24	; 0x39
    22e6:	9a af       	std	Y+58, r25	; 0x3a
    22e8:	ab af       	std	Y+59, r26	; 0x3b
    22ea:	bc af       	std	Y+60, r27	; 0x3c
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e2       	ldi	r26, 0x20	; 32
    22f2:	b1 e4       	ldi	r27, 0x41	; 65
    22f4:	8b 87       	std	Y+11, r24	; 0x0b
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	ad 87       	std	Y+13, r26	; 0x0d
    22fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a ef       	ldi	r20, 0xFA	; 250
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8f 83       	std	Y+7, r24	; 0x07
    2316:	98 87       	std	Y+8, r25	; 0x08
    2318:	a9 87       	std	Y+9, r26	; 0x09
    231a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <main+0x9e6>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <main+0xa64>
	else if (__tmp > 65535)
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <main+0xa50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	0f c0       	rjmp	.+30     	; 0x239e <main+0xa46>
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	8b 83       	std	Y+3, r24	; 0x03
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <main+0xa34>
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <main+0xa28>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <main+0xa78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <main+0xa70>
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
		else if (data == CHANGE_PASS)
		{
			/* first get old password from EEPROM */
			num = 0;
			pass_2 = 0;
			for(i=0 ;i<5;i++ )
    23d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d2:	8f 5f       	subi	r24, 0xFF	; 255
    23d4:	8d af       	std	Y+61, r24	; 0x3d
    23d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d8:	85 30       	cpi	r24, 0x05	; 5
    23da:	08 f4       	brcc	.+2      	; 0x23de <main+0xa86>
    23dc:	5b cf       	rjmp	.-330    	; 0x2294 <main+0x93c>
					 EEPROM_readByte((add+i),&n);
					 num = (num*10) + n ;
					 _delay_ms(10);
				}
			/* get password from user in MC_1 */
			UART_sendByte(START);
    23de:	84 e4       	ldi	r24, 0x44	; 68
    23e0:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
			for( i = 0  ; i<5 ; i++)
    23e4:	1d ae       	std	Y+61, r1	; 0x3d
    23e6:	2d c0       	rjmp	.+90     	; 0x2442 <main+0xaea>
				{
				    data_pass_2 = UART_recieveByte();
    23e8:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    23ec:	fe 01       	movw	r30, r28
    23ee:	e5 5b       	subi	r30, 0xB5	; 181
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 83       	st	Z, r24
                    pass_2 = (pass_2*10) + data_pass_2;
    23f4:	fe 01       	movw	r30, r28
    23f6:	ee 5b       	subi	r30, 0xBE	; 190
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2400:	b3 81       	ldd	r27, Z+3	; 0x03
    2402:	2a e0       	ldi	r18, 0x0A	; 10
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__mulsi3>
    2412:	9b 01       	movw	r18, r22
    2414:	ac 01       	movw	r20, r24
    2416:	fe 01       	movw	r30, r28
    2418:	e5 5b       	subi	r30, 0xB5	; 181
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 e0       	ldi	r26, 0x00	; 0
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	fe 01       	movw	r30, r28
    2428:	ee 5b       	subi	r30, 0xBE	; 190
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	82 0f       	add	r24, r18
    242e:	93 1f       	adc	r25, r19
    2430:	a4 1f       	adc	r26, r20
    2432:	b5 1f       	adc	r27, r21
    2434:	80 83       	st	Z, r24
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	a2 83       	std	Z+2, r26	; 0x02
    243a:	b3 83       	std	Z+3, r27	; 0x03
					 num = (num*10) + n ;
					 _delay_ms(10);
				}
			/* get password from user in MC_1 */
			UART_sendByte(START);
			for( i = 0  ; i<5 ; i++)
    243c:	8d ad       	ldd	r24, Y+61	; 0x3d
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	8d af       	std	Y+61, r24	; 0x3d
    2442:	8d ad       	ldd	r24, Y+61	; 0x3d
    2444:	85 30       	cpi	r24, 0x05	; 5
    2446:	80 f2       	brcs	.-96     	; 0x23e8 <main+0xa90>
				{
				    data_pass_2 = UART_recieveByte();
                    pass_2 = (pass_2*10) + data_pass_2;
			    }
			if(UART_recieveByte() == ENTER)
    2448:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    244c:	8d 30       	cpi	r24, 0x0D	; 13
    244e:	19 f4       	brne	.+6      	; 0x2456 <main+0xafe>
				{
				  UART_sendByte(START);
    2450:	84 e4       	ldi	r24, 0x44	; 68
    2452:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
				}
			/* if two passwords are equal send one to MC_1 */
			if(num == pass_2)
    2456:	fe 01       	movw	r30, r28
    2458:	ee 5b       	subi	r30, 0xBE	; 190
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	29 ad       	ldd	r18, Y+57	; 0x39
    245e:	3a ad       	ldd	r19, Y+58	; 0x3a
    2460:	4b ad       	ldd	r20, Y+59	; 0x3b
    2462:	5c ad       	ldd	r21, Y+60	; 0x3c
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	a2 81       	ldd	r26, Z+2	; 0x02
    246a:	b3 81       	ldd	r27, Z+3	; 0x03
    246c:	28 17       	cp	r18, r24
    246e:	39 07       	cpc	r19, r25
    2470:	4a 07       	cpc	r20, r26
    2472:	5b 07       	cpc	r21, r27
    2474:	21 f4       	brne	.+8      	; 0x247e <main+0xb26>
				{
				  UART_sendByte(1);
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
    247c:	1c cc       	rjmp	.-1992   	; 0x1cb6 <main+0x35e>
				}
			/* if not send 0 to MC_1 */
			else if (num != pass_2)
    247e:	fe 01       	movw	r30, r28
    2480:	ee 5b       	subi	r30, 0xBE	; 190
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	29 ad       	ldd	r18, Y+57	; 0x39
    2486:	3a ad       	ldd	r19, Y+58	; 0x3a
    2488:	4b ad       	ldd	r20, Y+59	; 0x3b
    248a:	5c ad       	ldd	r21, Y+60	; 0x3c
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	a2 81       	ldd	r26, Z+2	; 0x02
    2492:	b3 81       	ldd	r27, Z+3	; 0x03
    2494:	28 17       	cp	r18, r24
    2496:	39 07       	cpc	r19, r25
    2498:	4a 07       	cpc	r20, r26
    249a:	5b 07       	cpc	r21, r27
    249c:	09 f4       	brne	.+2      	; 0x24a0 <main+0xb48>
    249e:	0b cc       	rjmp	.-2026   	; 0x1cb6 <main+0x35e>
				{
				  UART_sendByte(0);
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
    24a6:	07 cc       	rjmp	.-2034   	; 0x1cb6 <main+0x35e>
				}
		}
		/* Alarm condition */
		else if (data == ALARM)
    24a8:	fe 01       	movw	r30, r28
    24aa:	e3 5b       	subi	r30, 0xB3	; 179
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	80 3a       	cpi	r24, 0xA0	; 160
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <main+0xb5e>
    24b4:	00 cc       	rjmp	.-2048   	; 0x1cb6 <main+0x35e>
		{
			/* initialise timer to hold buzzer on for 1 min */
			Timer1_ConfigType Timer_config_buzzer = {0 , 0 ,F_CPU_1024,normal };
    24b6:	ce 01       	movw	r24, r28
    24b8:	88 59       	subi	r24, 0x98	; 152
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	ce 57       	subi	r28, 0x7E	; 126
    24be:	df 4f       	sbci	r29, 0xFF	; 255
    24c0:	99 83       	std	Y+1, r25	; 0x01
    24c2:	88 83       	st	Y, r24
    24c4:	c2 58       	subi	r28, 0x82	; 130
    24c6:	d0 40       	sbci	r29, 0x00	; 0
    24c8:	8a e6       	ldi	r24, 0x6A	; 106
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	cc 57       	subi	r28, 0x7C	; 124
    24ce:	df 4f       	sbci	r29, 0xFF	; 255
    24d0:	99 83       	std	Y+1, r25	; 0x01
    24d2:	88 83       	st	Y, r24
    24d4:	c4 58       	subi	r28, 0x84	; 132
    24d6:	d0 40       	sbci	r29, 0x00	; 0
    24d8:	96 e0       	ldi	r25, 0x06	; 6
    24da:	ca 57       	subi	r28, 0x7A	; 122
    24dc:	df 4f       	sbci	r29, 0xFF	; 255
    24de:	98 83       	st	Y, r25
    24e0:	c6 58       	subi	r28, 0x86	; 134
    24e2:	d0 40       	sbci	r29, 0x00	; 0
    24e4:	cc 57       	subi	r28, 0x7C	; 124
    24e6:	df 4f       	sbci	r29, 0xFF	; 255
    24e8:	e8 81       	ld	r30, Y
    24ea:	f9 81       	ldd	r31, Y+1	; 0x01
    24ec:	c4 58       	subi	r28, 0x84	; 132
    24ee:	d0 40       	sbci	r29, 0x00	; 0
    24f0:	00 80       	ld	r0, Z
    24f2:	cc 57       	subi	r28, 0x7C	; 124
    24f4:	df 4f       	sbci	r29, 0xFF	; 255
    24f6:	48 81       	ld	r20, Y
    24f8:	59 81       	ldd	r21, Y+1	; 0x01
    24fa:	c4 58       	subi	r28, 0x84	; 132
    24fc:	d0 40       	sbci	r29, 0x00	; 0
    24fe:	4f 5f       	subi	r20, 0xFF	; 255
    2500:	5f 4f       	sbci	r21, 0xFF	; 255
    2502:	cc 57       	subi	r28, 0x7C	; 124
    2504:	df 4f       	sbci	r29, 0xFF	; 255
    2506:	59 83       	std	Y+1, r21	; 0x01
    2508:	48 83       	st	Y, r20
    250a:	c4 58       	subi	r28, 0x84	; 132
    250c:	d0 40       	sbci	r29, 0x00	; 0
    250e:	ce 57       	subi	r28, 0x7E	; 126
    2510:	df 4f       	sbci	r29, 0xFF	; 255
    2512:	e8 81       	ld	r30, Y
    2514:	f9 81       	ldd	r31, Y+1	; 0x01
    2516:	c2 58       	subi	r28, 0x82	; 130
    2518:	d0 40       	sbci	r29, 0x00	; 0
    251a:	00 82       	st	Z, r0
    251c:	ce 57       	subi	r28, 0x7E	; 126
    251e:	df 4f       	sbci	r29, 0xFF	; 255
    2520:	48 81       	ld	r20, Y
    2522:	59 81       	ldd	r21, Y+1	; 0x01
    2524:	c2 58       	subi	r28, 0x82	; 130
    2526:	d0 40       	sbci	r29, 0x00	; 0
    2528:	4f 5f       	subi	r20, 0xFF	; 255
    252a:	5f 4f       	sbci	r21, 0xFF	; 255
    252c:	ce 57       	subi	r28, 0x7E	; 126
    252e:	df 4f       	sbci	r29, 0xFF	; 255
    2530:	59 83       	std	Y+1, r21	; 0x01
    2532:	48 83       	st	Y, r20
    2534:	c2 58       	subi	r28, 0x82	; 130
    2536:	d0 40       	sbci	r29, 0x00	; 0
    2538:	ca 57       	subi	r28, 0x7A	; 122
    253a:	df 4f       	sbci	r29, 0xFF	; 255
    253c:	58 81       	ld	r21, Y
    253e:	c6 58       	subi	r28, 0x86	; 134
    2540:	d0 40       	sbci	r29, 0x00	; 0
    2542:	51 50       	subi	r21, 0x01	; 1
    2544:	ca 57       	subi	r28, 0x7A	; 122
    2546:	df 4f       	sbci	r29, 0xFF	; 255
    2548:	58 83       	st	Y, r21
    254a:	c6 58       	subi	r28, 0x86	; 134
    254c:	d0 40       	sbci	r29, 0x00	; 0
    254e:	ca 57       	subi	r28, 0x7A	; 122
    2550:	df 4f       	sbci	r29, 0xFF	; 255
    2552:	88 81       	ld	r24, Y
    2554:	c6 58       	subi	r28, 0x86	; 134
    2556:	d0 40       	sbci	r29, 0x00	; 0
    2558:	88 23       	and	r24, r24
    255a:	21 f6       	brne	.-120    	; 0x24e4 <main+0xb8c>
			UART_sendByte(START);
    255c:	84 e4       	ldi	r24, 0x44	; 68
    255e:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
			Buzzer_on();
    2562:	0e 94 28 07 	call	0xe50	; 0xe50 <Buzzer_on>
			Timer1_init(&Timer_config_buzzer);
    2566:	ce 01       	movw	r24, r28
    2568:	88 59       	subi	r24, 0x98	; 152
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	0e 94 4f 08 	call	0x109e	; 0x109e <Timer1_init>
			while(ticks != 7){}
    2570:	80 91 88 01 	lds	r24, 0x0188
    2574:	87 30       	cpi	r24, 0x07	; 7
    2576:	e1 f7       	brne	.-8      	; 0x2570 <main+0xc18>
			/* turn off buzzer and close timer */
			Buzzer_off();
    2578:	0e 94 34 07 	call	0xe68	; 0xe68 <Buzzer_off>
			Timer1_deInit();
    257c:	0e 94 a9 08 	call	0x1152	; 0x1152 <Timer1_deInit>
			ticks = 0 ;
    2580:	10 92 88 01 	sts	0x0188, r1
    2584:	98 cb       	rjmp	.-2256   	; 0x1cb6 <main+0x35e>

00002586 <timer_isr>:
	}
	return 0 ;
}
/* timer ISR definition */
void timer_isr(void)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
	ticks ++;
    258e:	80 91 88 01 	lds	r24, 0x0188
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	80 93 88 01 	sts	0x0188, r24
}
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <TWI_init+0x6>
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <TWI_init+0x8>
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <TWI_init+0xa>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	uint32 cpu_over_freq = (8000000/Config_Ptr->bit_rate);
    25b0:	ed 81       	ldd	r30, Y+5	; 0x05
    25b2:	fe 81       	ldd	r31, Y+6	; 0x06
    25b4:	21 81       	ldd	r18, Z+1	; 0x01
    25b6:	32 81       	ldd	r19, Z+2	; 0x02
    25b8:	43 81       	ldd	r20, Z+3	; 0x03
    25ba:	54 81       	ldd	r21, Z+4	; 0x04
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	92 e1       	ldi	r25, 0x12	; 18
    25c0:	aa e7       	ldi	r26, 0x7A	; 122
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	bc 01       	movw	r22, r24
    25c6:	cd 01       	movw	r24, r26
    25c8:	0e 94 a9 14 	call	0x2952	; 0x2952 <__udivmodsi4>
    25cc:	da 01       	movw	r26, r20
    25ce:	c9 01       	movw	r24, r18
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	ab 83       	std	Y+3, r26	; 0x03
    25d6:	bc 83       	std	Y+4, r27	; 0x04
    TWBR = (cpu_over_freq-16)/2 ;
    25d8:	e0 e2       	ldi	r30, 0x20	; 32
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	ab 81       	ldd	r26, Y+3	; 0x03
    25e2:	bc 81       	ldd	r27, Y+4	; 0x04
    25e4:	40 97       	sbiw	r24, 0x10	; 16
    25e6:	a1 09       	sbc	r26, r1
    25e8:	b1 09       	sbc	r27, r1
    25ea:	b6 95       	lsr	r27
    25ec:	a7 95       	ror	r26
    25ee:	97 95       	ror	r25
    25f0:	87 95       	ror	r24
    25f2:	80 83       	st	Z, r24
	TWSR = 0x00;
    25f4:	e1 e2       	ldi	r30, 0x21	; 33
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: address (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address;
    25fa:	a2 e2       	ldi	r26, 0x22	; 34
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2600:	fe 81       	ldd	r31, Y+6	; 0x06
    2602:	80 81       	ld	r24, Z
    2604:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2606:	e6 e5       	ldi	r30, 0x56	; 86
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	84 e0       	ldi	r24, 0x04	; 4
    260c:	80 83       	st	Z, r24
}
    260e:	26 96       	adiw	r28, 0x06	; 6
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <TWI_start>:

void TWI_start(void)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2628:	e6 e5       	ldi	r30, 0x56	; 86
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	84 ea       	ldi	r24, 0xA4	; 164
    262e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2630:	e6 e5       	ldi	r30, 0x56	; 86
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	88 23       	and	r24, r24
    2638:	dc f7       	brge	.-10     	; 0x2630 <TWI_start+0x10>
}
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <TWI_stop>:

void TWI_stop(void)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2648:	e6 e5       	ldi	r30, 0x56	; 86
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	84 e9       	ldi	r24, 0x94	; 148
    264e:	80 83       	st	Z, r24
}
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	0f 92       	push	r0
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2662:	e3 e2       	ldi	r30, 0x23	; 35
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    266a:	e6 e5       	ldi	r30, 0x56	; 86
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	84 e8       	ldi	r24, 0x84	; 132
    2670:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2672:	e6 e5       	ldi	r30, 0x56	; 86
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	88 23       	and	r24, r24
    267a:	dc f7       	brge	.-10     	; 0x2672 <TWI_writeByte+0x1c>
}
    267c:	0f 90       	pop	r0
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    268c:	e6 e5       	ldi	r30, 0x56	; 86
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	84 ec       	ldi	r24, 0xC4	; 196
    2692:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2694:	e6 e5       	ldi	r30, 0x56	; 86
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	88 23       	and	r24, r24
    269c:	dc f7       	brge	.-10     	; 0x2694 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    269e:	e3 e2       	ldi	r30, 0x23	; 35
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
}
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    26b2:	e6 e5       	ldi	r30, 0x56	; 86
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	84 e8       	ldi	r24, 0x84	; 132
    26b8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26ba:	e6 e5       	ldi	r30, 0x56	; 86
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	88 23       	and	r24, r24
    26c2:	dc f7       	brge	.-10     	; 0x26ba <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    26c4:	e3 e2       	ldi	r30, 0x23	; 35
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	0f 92       	push	r0
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    26da:	e1 e2       	ldi	r30, 0x21	; 33
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	88 7f       	andi	r24, 0xF8	; 248
    26e2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <UART_init+0x6>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <UART_init+0x8>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	9c 83       	std	Y+4, r25	; 0x04
    26fc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    26fe:	1a 82       	std	Y+2, r1	; 0x02
    2700:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2702:	eb e2       	ldi	r30, 0x2B	; 43
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((((Config_Ptr->bit_data)>>2))<<UCSZ2);
    270a:	aa e2       	ldi	r26, 0x2A	; 42
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	eb 81       	ldd	r30, Y+3	; 0x03
    2710:	fc 81       	ldd	r31, Y+4	; 0x04
    2712:	80 81       	ld	r24, Z
    2714:	86 95       	lsr	r24
    2716:	86 95       	lsr	r24
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	88 61       	ori	r24, 0x18	; 24
    2726:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (UCSRC | ((Config_Ptr->bit_data)<<4)) | (UCSRC | ((Config_Ptr->stop_bit)<<3)) | (UCSRC | ((Config_Ptr->bit_data)&0x03));
    2728:	a0 e4       	ldi	r26, 0x40	; 64
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e0 e4       	ldi	r30, 0x40	; 64
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	28 2f       	mov	r18, r24
    2734:	eb 81       	ldd	r30, Y+3	; 0x03
    2736:	fc 81       	ldd	r31, Y+4	; 0x04
    2738:	80 81       	ld	r24, Z
    273a:	88 2f       	mov	r24, r24
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	82 95       	swap	r24
    2740:	92 95       	swap	r25
    2742:	90 7f       	andi	r25, 0xF0	; 240
    2744:	98 27       	eor	r25, r24
    2746:	80 7f       	andi	r24, 0xF0	; 240
    2748:	98 27       	eor	r25, r24
    274a:	82 2b       	or	r24, r18
    274c:	28 2f       	mov	r18, r24
    274e:	20 68       	ori	r18, 0x80	; 128
    2750:	e0 e4       	ldi	r30, 0x40	; 64
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	38 2f       	mov	r19, r24
    2758:	eb 81       	ldd	r30, Y+3	; 0x03
    275a:	fc 81       	ldd	r31, Y+4	; 0x04
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	83 2b       	or	r24, r19
    2770:	28 2b       	or	r18, r24
    2772:	e0 e4       	ldi	r30, 0x40	; 64
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	98 2f       	mov	r25, r24
    277a:	eb 81       	ldd	r30, Y+3	; 0x03
    277c:	fc 81       	ldd	r31, Y+4	; 0x04
    277e:	80 81       	ld	r24, Z
    2780:	83 70       	andi	r24, 0x03	; 3
    2782:	89 2b       	or	r24, r25
    2784:	82 2b       	or	r24, r18
    2786:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2788:	eb 81       	ldd	r30, Y+3	; 0x03
    278a:	fc 81       	ldd	r31, Y+4	; 0x04
    278c:	83 81       	ldd	r24, Z+3	; 0x03
    278e:	94 81       	ldd	r25, Z+4	; 0x04
    2790:	cc 01       	movw	r24, r24
    2792:	a0 e0       	ldi	r26, 0x00	; 0
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	aa 1f       	adc	r26, r26
    279c:	bb 1f       	adc	r27, r27
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	aa 1f       	adc	r26, r26
    27a4:	bb 1f       	adc	r27, r27
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	aa 1f       	adc	r26, r26
    27ac:	bb 1f       	adc	r27, r27
    27ae:	9c 01       	movw	r18, r24
    27b0:	ad 01       	movw	r20, r26
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	92 e1       	ldi	r25, 0x12	; 18
    27b6:	aa e7       	ldi	r26, 0x7A	; 122
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 a9 14 	call	0x2952	; 0x2952 <__udivmodsi4>
    27c2:	da 01       	movw	r26, r20
    27c4:	c9 01       	movw	r24, r18
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    27cc:	e0 e4       	ldi	r30, 0x40	; 64
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	89 2f       	mov	r24, r25
    27d6:	99 27       	eor	r25, r25
    27d8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    27da:	e9 e2       	ldi	r30, 0x29	; 41
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	80 83       	st	Z, r24
}
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	0f 92       	push	r0
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27fc:	eb e2       	ldi	r30, 0x2B	; 43
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	88 2f       	mov	r24, r24
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	80 72       	andi	r24, 0x20	; 32
    2808:	90 70       	andi	r25, 0x00	; 0
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	b9 f3       	breq	.-18     	; 0x27fc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    280e:	ec e2       	ldi	r30, 0x2C	; 44
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2816:	0f 90       	pop	r0
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2826:	eb e2       	ldi	r30, 0x2B	; 43
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	88 23       	and	r24, r24
    282e:	dc f7       	brge	.-10     	; 0x2826 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2830:	ec e2       	ldi	r30, 0x2C	; 44
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
}
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	00 d0       	rcall	.+0      	; 0x2842 <UART_sendString+0x6>
    2842:	0f 92       	push	r0
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	9b 83       	std	Y+3, r25	; 0x03
    284a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    284c:	19 82       	std	Y+1, r1	; 0x01
    284e:	0e c0       	rjmp	.+28     	; 0x286c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	9b 81       	ldd	r25, Y+3	; 0x03
    285a:	fc 01       	movw	r30, r24
    285c:	e2 0f       	add	r30, r18
    285e:	f3 1f       	adc	r31, r19
    2860:	80 81       	ld	r24, Z
    2862:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_sendByte>
		i++;
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	9b 81       	ldd	r25, Y+3	; 0x03
    2876:	fc 01       	movw	r30, r24
    2878:	e2 0f       	add	r30, r18
    287a:	f3 1f       	adc	r31, r19
    287c:	80 81       	ld	r24, Z
    287e:	88 23       	and	r24, r24
    2880:	39 f7       	brne	.-50     	; 0x2850 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <UART_receiveString+0xa>
    2898:	0f 92       	push	r0
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9b 83       	std	Y+3, r25	; 0x03
    28a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28a2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	9b 81       	ldd	r25, Y+3	; 0x03
    28ae:	8c 01       	movw	r16, r24
    28b0:	02 0f       	add	r16, r18
    28b2:	13 1f       	adc	r17, r19
    28b4:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    28b8:	f8 01       	movw	r30, r16
    28ba:	80 83       	st	Z, r24
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	8f 5f       	subi	r24, 0xFF	; 255
    28c2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	9b 81       	ldd	r25, Y+3	; 0x03
    28ce:	8c 01       	movw	r16, r24
    28d0:	02 0f       	add	r16, r18
    28d2:	13 1f       	adc	r17, r19
    28d4:	0e 94 0f 14 	call	0x281e	; 0x281e <UART_recieveByte>
    28d8:	f8 01       	movw	r30, r16
    28da:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	fc 01       	movw	r30, r24
    28e8:	e2 0f       	add	r30, r18
    28ea:	f3 1f       	adc	r31, r19
    28ec:	80 81       	ld	r24, Z
    28ee:	83 32       	cpi	r24, 0x23	; 35
    28f0:	31 f7       	brne	.-52     	; 0x28be <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	9b 81       	ldd	r25, Y+3	; 0x03
    28fc:	fc 01       	movw	r30, r24
    28fe:	e2 0f       	add	r30, r18
    2900:	f3 1f       	adc	r31, r19
    2902:	10 82       	st	Z, r1
}
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	08 95       	ret

00002914 <__mulsi3>:
    2914:	62 9f       	mul	r22, r18
    2916:	d0 01       	movw	r26, r0
    2918:	73 9f       	mul	r23, r19
    291a:	f0 01       	movw	r30, r0
    291c:	82 9f       	mul	r24, r18
    291e:	e0 0d       	add	r30, r0
    2920:	f1 1d       	adc	r31, r1
    2922:	64 9f       	mul	r22, r20
    2924:	e0 0d       	add	r30, r0
    2926:	f1 1d       	adc	r31, r1
    2928:	92 9f       	mul	r25, r18
    292a:	f0 0d       	add	r31, r0
    292c:	83 9f       	mul	r24, r19
    292e:	f0 0d       	add	r31, r0
    2930:	74 9f       	mul	r23, r20
    2932:	f0 0d       	add	r31, r0
    2934:	65 9f       	mul	r22, r21
    2936:	f0 0d       	add	r31, r0
    2938:	99 27       	eor	r25, r25
    293a:	72 9f       	mul	r23, r18
    293c:	b0 0d       	add	r27, r0
    293e:	e1 1d       	adc	r30, r1
    2940:	f9 1f       	adc	r31, r25
    2942:	63 9f       	mul	r22, r19
    2944:	b0 0d       	add	r27, r0
    2946:	e1 1d       	adc	r30, r1
    2948:	f9 1f       	adc	r31, r25
    294a:	bd 01       	movw	r22, r26
    294c:	cf 01       	movw	r24, r30
    294e:	11 24       	eor	r1, r1
    2950:	08 95       	ret

00002952 <__udivmodsi4>:
    2952:	a1 e2       	ldi	r26, 0x21	; 33
    2954:	1a 2e       	mov	r1, r26
    2956:	aa 1b       	sub	r26, r26
    2958:	bb 1b       	sub	r27, r27
    295a:	fd 01       	movw	r30, r26
    295c:	0d c0       	rjmp	.+26     	; 0x2978 <__udivmodsi4_ep>

0000295e <__udivmodsi4_loop>:
    295e:	aa 1f       	adc	r26, r26
    2960:	bb 1f       	adc	r27, r27
    2962:	ee 1f       	adc	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	a2 17       	cp	r26, r18
    2968:	b3 07       	cpc	r27, r19
    296a:	e4 07       	cpc	r30, r20
    296c:	f5 07       	cpc	r31, r21
    296e:	20 f0       	brcs	.+8      	; 0x2978 <__udivmodsi4_ep>
    2970:	a2 1b       	sub	r26, r18
    2972:	b3 0b       	sbc	r27, r19
    2974:	e4 0b       	sbc	r30, r20
    2976:	f5 0b       	sbc	r31, r21

00002978 <__udivmodsi4_ep>:
    2978:	66 1f       	adc	r22, r22
    297a:	77 1f       	adc	r23, r23
    297c:	88 1f       	adc	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	1a 94       	dec	r1
    2982:	69 f7       	brne	.-38     	; 0x295e <__udivmodsi4_loop>
    2984:	60 95       	com	r22
    2986:	70 95       	com	r23
    2988:	80 95       	com	r24
    298a:	90 95       	com	r25
    298c:	9b 01       	movw	r18, r22
    298e:	ac 01       	movw	r20, r24
    2990:	bd 01       	movw	r22, r26
    2992:	cf 01       	movw	r24, r30
    2994:	08 95       	ret

00002996 <__prologue_saves__>:
    2996:	2f 92       	push	r2
    2998:	3f 92       	push	r3
    299a:	4f 92       	push	r4
    299c:	5f 92       	push	r5
    299e:	6f 92       	push	r6
    29a0:	7f 92       	push	r7
    29a2:	8f 92       	push	r8
    29a4:	9f 92       	push	r9
    29a6:	af 92       	push	r10
    29a8:	bf 92       	push	r11
    29aa:	cf 92       	push	r12
    29ac:	df 92       	push	r13
    29ae:	ef 92       	push	r14
    29b0:	ff 92       	push	r15
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	ca 1b       	sub	r28, r26
    29c0:	db 0b       	sbc	r29, r27
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	09 94       	ijmp

000029ce <__epilogue_restores__>:
    29ce:	2a 88       	ldd	r2, Y+18	; 0x12
    29d0:	39 88       	ldd	r3, Y+17	; 0x11
    29d2:	48 88       	ldd	r4, Y+16	; 0x10
    29d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    29d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    29d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    29da:	8c 84       	ldd	r8, Y+12	; 0x0c
    29dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    29de:	aa 84       	ldd	r10, Y+10	; 0x0a
    29e0:	b9 84       	ldd	r11, Y+9	; 0x09
    29e2:	c8 84       	ldd	r12, Y+8	; 0x08
    29e4:	df 80       	ldd	r13, Y+7	; 0x07
    29e6:	ee 80       	ldd	r14, Y+6	; 0x06
    29e8:	fd 80       	ldd	r15, Y+5	; 0x05
    29ea:	0c 81       	ldd	r16, Y+4	; 0x04
    29ec:	1b 81       	ldd	r17, Y+3	; 0x03
    29ee:	aa 81       	ldd	r26, Y+2	; 0x02
    29f0:	b9 81       	ldd	r27, Y+1	; 0x01
    29f2:	ce 0f       	add	r28, r30
    29f4:	d1 1d       	adc	r29, r1
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	ed 01       	movw	r28, r26
    2a02:	08 95       	ret

00002a04 <_exit>:
    2a04:	f8 94       	cli

00002a06 <__stop_program>:
    2a06:	ff cf       	rjmp	.-2      	; 0x2a06 <__stop_program>


Final_Project_MC_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003ffe  00004092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000f6  008000f6  00004128  2**0
                  ALLOC
  3 .stab         000037b0  00000000  00000000  00004128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000118b  00000000  00000000  000078d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a95c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b847  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c5f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d1af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <main>
      8a:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ed       	ldi	r26, 0xD6	; 214
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ed       	ldi	r24, 0xD6	; 214
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_7>:

static volatile void (*g_callBackPtr)(void) = NULL_PTR;


ISR(TIMER1_COMPA_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     b70:	80 91 f6 00 	lds	r24, 0x00F6
     b74:	90 91 f7 00 	lds	r25, 0x00F7
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     b7c:	e0 91 f6 00 	lds	r30, 0x00F6
     b80:	f0 91 f7 00 	lds	r31, 0x00F7
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     bd6:	80 91 f6 00 	lds	r24, 0x00F6
     bda:	90 91 f7 00 	lds	r25, 0x00F7
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     be2:	e0 91 f6 00 	lds	r30, 0x00F6
     be6:	f0 91 f7 00 	lds	r31, 0x00F7
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer1_init+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
   TCCR1A = (1<<FOC1A) | (1<<FOC1B) | (((Config_Ptr->mode)&0x03) | (TCCR1A & 0xFC));
     c20:	af e4       	ldi	r26, 0x4F	; 79
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	85 81       	ldd	r24, Z+5	; 0x05
     c2a:	98 2f       	mov	r25, r24
     c2c:	93 70       	andi	r25, 0x03	; 3
     c2e:	ef e4       	ldi	r30, 0x4F	; 79
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	8c 7f       	andi	r24, 0xFC	; 252
     c36:	89 2b       	or	r24, r25
     c38:	8c 60       	ori	r24, 0x0C	; 12
     c3a:	8c 93       	st	X, r24
   TCCR1B = (((Config_Ptr->mode)>>2)<<WGM12) | ((Config_Ptr->prescaler) | (TCCR1B & 0xF8));
     c3c:	ae e4       	ldi	r26, 0x4E	; 78
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e9 81       	ldd	r30, Y+1	; 0x01
     c42:	fa 81       	ldd	r31, Y+2	; 0x02
     c44:	85 81       	ldd	r24, Z+5	; 0x05
     c46:	86 95       	lsr	r24
     c48:	86 95       	lsr	r24
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	28 2f       	mov	r18, r24
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	84 81       	ldd	r24, Z+4	; 0x04
     c62:	98 2f       	mov	r25, r24
     c64:	ee e4       	ldi	r30, 0x4E	; 78
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	88 7f       	andi	r24, 0xF8	; 248
     c6c:	89 2b       	or	r24, r25
     c6e:	82 2b       	or	r24, r18
     c70:	8c 93       	st	X, r24
   TCNT1 = Config_Ptr->initial_value;
     c72:	ac e4       	ldi	r26, 0x4C	; 76
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e9 81       	ldd	r30, Y+1	; 0x01
     c78:	fa 81       	ldd	r31, Y+2	; 0x02
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	8e 93       	st	-X, r24
   OCR1A = Config_Ptr->compare_value;
     c84:	aa e4       	ldi	r26, 0x4A	; 74
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	9c 93       	st	X, r25
     c94:	8e 93       	st	-X, r24
   if((Config_Ptr->mode) == compar )
     c96:	e9 81       	ldd	r30, Y+1	; 0x01
     c98:	fa 81       	ldd	r31, Y+2	; 0x02
     c9a:	85 81       	ldd	r24, Z+5	; 0x05
     c9c:	84 30       	cpi	r24, 0x04	; 4
     c9e:	29 f4       	brne	.+10     	; 0xcaa <Timer1_init+0x98>
   {
	   TIMSK = (1<<OCIE1A);
     ca0:	e9 e5       	ldi	r30, 0x59	; 89
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 e1       	ldi	r24, 0x10	; 16
     ca6:	80 83       	st	Z, r24
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <Timer1_init+0xaa>
   }
   else if ((Config_Ptr->mode) == normal)
     caa:	e9 81       	ldd	r30, Y+1	; 0x01
     cac:	fa 81       	ldd	r31, Y+2	; 0x02
     cae:	85 81       	ldd	r24, Z+5	; 0x05
     cb0:	88 23       	and	r24, r24
     cb2:	21 f4       	brne	.+8      	; 0xcbc <Timer1_init+0xaa>
   {
	   TIMSK = (1<<TOIE1);
     cb4:	e9 e5       	ldi	r30, 0x59	; 89
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	80 83       	st	Z, r24
   }


}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <Timer1_deInit>:
void Timer1_deInit(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0 ;
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1
	TCNT1 = 0;
     cd4:	ec e4       	ldi	r30, 0x4C	; 76
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	11 82       	std	Z+1, r1	; 0x01
     cda:	10 82       	st	Z, r1
	OCR1A = 0 ;
     cdc:	ea e4       	ldi	r30, 0x4A	; 74
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	11 82       	std	Z+1, r1	; 0x01
     ce2:	10 82       	st	Z, r1
}
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <Timer1_setCallBack+0x6>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	90 93 f7 00 	sts	0x00F7, r25
     d00:	80 93 f6 00 	sts	0x00F6, r24
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <GPIO_setupPinDirection+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <GPIO_setupPinDirection+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	88 30       	cpi	r24, 0x08	; 8
     d26:	08 f0       	brcs	.+2      	; 0xd2a <GPIO_setupPinDirection+0x1c>
     d28:	d5 c0       	rjmp	.+426    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <GPIO_setupPinDirection+0x24>
     d30:	d1 c0       	rjmp	.+418    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3d 83       	std	Y+5, r19	; 0x05
     d3a:	2c 83       	std	Y+4, r18	; 0x04
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	9d 81       	ldd	r25, Y+5	; 0x05
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 05       	cpc	r25, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <GPIO_setupPinDirection+0x3a>
     d46:	43 c0       	rjmp	.+134    	; 0xdce <GPIO_setupPinDirection+0xc0>
     d48:	2c 81       	ldd	r18, Y+4	; 0x04
     d4a:	3d 81       	ldd	r19, Y+5	; 0x05
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	2c f4       	brge	.+10     	; 0xd5c <GPIO_setupPinDirection+0x4e>
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	9d 81       	ldd	r25, Y+5	; 0x05
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	71 f0       	breq	.+28     	; 0xd76 <GPIO_setupPinDirection+0x68>
     d5a:	bc c0       	rjmp	.+376    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	3d 81       	ldd	r19, Y+5	; 0x05
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	09 f4       	brne	.+2      	; 0xd68 <GPIO_setupPinDirection+0x5a>
     d66:	5f c0       	rjmp	.+190    	; 0xe26 <GPIO_setupPinDirection+0x118>
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <GPIO_setupPinDirection+0x66>
     d72:	85 c0       	rjmp	.+266    	; 0xe7e <GPIO_setupPinDirection+0x170>
     d74:	af c0       	rjmp	.+350    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	a1 f4       	brne	.+40     	; 0xda4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d7c:	aa e3       	ldi	r26, 0x3A	; 58
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	ea e3       	ldi	r30, 0x3A	; 58
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <GPIO_setupPinDirection+0x8c>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <GPIO_setupPinDirection+0x88>
     d9e:	84 2b       	or	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	98 c0       	rjmp	.+304    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     da4:	aa e3       	ldi	r26, 0x3A	; 58
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ea e3       	ldi	r30, 0x3A	; 58
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <GPIO_setupPinDirection+0xb4>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <GPIO_setupPinDirection+0xb0>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	83 c0       	rjmp	.+262    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	a1 f4       	brne	.+40     	; 0xdfc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     dd4:	a7 e3       	ldi	r26, 0x37	; 55
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <GPIO_setupPinDirection+0xe4>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <GPIO_setupPinDirection+0xe0>
     df6:	84 2b       	or	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	6c c0       	rjmp	.+216    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     dfc:	a7 e3       	ldi	r26, 0x37	; 55
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e7 e3       	ldi	r30, 0x37	; 55
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <GPIO_setupPinDirection+0x10c>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <GPIO_setupPinDirection+0x108>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	57 c0       	rjmp	.+174    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	a1 f4       	brne	.+40     	; 0xe54 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e2c:	a4 e3       	ldi	r26, 0x34	; 52
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <GPIO_setupPinDirection+0x13c>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <GPIO_setupPinDirection+0x138>
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	40 c0       	rjmp	.+128    	; 0xed4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e54:	a4 e3       	ldi	r26, 0x34	; 52
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e4 e3       	ldi	r30, 0x34	; 52
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <GPIO_setupPinDirection+0x164>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <GPIO_setupPinDirection+0x160>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	2b c0       	rjmp	.+86     	; 0xed4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	a1 f4       	brne	.+40     	; 0xeac <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e84:	a1 e3       	ldi	r26, 0x31	; 49
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e1 e3       	ldi	r30, 0x31	; 49
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <GPIO_setupPinDirection+0x194>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <GPIO_setupPinDirection+0x190>
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	14 c0       	rjmp	.+40     	; 0xed4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     eac:	a1 e3       	ldi	r26, 0x31	; 49
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e1 e3       	ldi	r30, 0x31	; 49
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <GPIO_setupPinDirection+0x1bc>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <GPIO_setupPinDirection+0x1b8>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <GPIO_writePin+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <GPIO_writePin+0x8>
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	6a 83       	std	Y+2, r22	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	88 30       	cpi	r24, 0x08	; 8
     efc:	08 f0       	brcs	.+2      	; 0xf00 <GPIO_writePin+0x1c>
     efe:	d5 c0       	rjmp	.+426    	; 0x10aa <GPIO_writePin+0x1c6>
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	08 f0       	brcs	.+2      	; 0xf08 <GPIO_writePin+0x24>
     f06:	d1 c0       	rjmp	.+418    	; 0x10aa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3d 83       	std	Y+5, r19	; 0x05
     f10:	2c 83       	std	Y+4, r18	; 0x04
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <GPIO_writePin+0x3a>
     f1c:	43 c0       	rjmp	.+134    	; 0xfa4 <GPIO_writePin+0xc0>
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	2c f4       	brge	.+10     	; 0xf32 <GPIO_writePin+0x4e>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	71 f0       	breq	.+28     	; 0xf4c <GPIO_writePin+0x68>
     f30:	bc c0       	rjmp	.+376    	; 0x10aa <GPIO_writePin+0x1c6>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <GPIO_writePin+0x5a>
     f3c:	5f c0       	rjmp	.+190    	; 0xffc <GPIO_writePin+0x118>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <GPIO_writePin+0x66>
     f48:	85 c0       	rjmp	.+266    	; 0x1054 <GPIO_writePin+0x170>
     f4a:	af c0       	rjmp	.+350    	; 0x10aa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	a1 f4       	brne	.+40     	; 0xf7a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_writePin+0x8c>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_writePin+0x88>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	98 c0       	rjmp	.+304    	; 0x10aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f7a:	ab e3       	ldi	r26, 0x3B	; 59
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e3       	ldi	r30, 0x3B	; 59
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <GPIO_writePin+0xb4>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <GPIO_writePin+0xb0>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	83 c0       	rjmp	.+262    	; 0x10aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	a1 f4       	brne	.+40     	; 0xfd2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     faa:	a8 e3       	ldi	r26, 0x38	; 56
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e8 e3       	ldi	r30, 0x38	; 56
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <GPIO_writePin+0xe4>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <GPIO_writePin+0xe0>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	6c c0       	rjmp	.+216    	; 0x10aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     fd2:	a8 e3       	ldi	r26, 0x38	; 56
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e3       	ldi	r30, 0x38	; 56
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_writePin+0x10c>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_writePin+0x108>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	57 c0       	rjmp	.+174    	; 0x10aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	a1 f4       	brne	.+40     	; 0x102a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1002:	a5 e3       	ldi	r26, 0x35	; 53
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e3       	ldi	r30, 0x35	; 53
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_writePin+0x13c>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_writePin+0x138>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	40 c0       	rjmp	.+128    	; 0x10aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    102a:	a5 e3       	ldi	r26, 0x35	; 53
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e3       	ldi	r30, 0x35	; 53
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_writePin+0x164>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_writePin+0x160>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	2b c0       	rjmp	.+86     	; 0x10aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	a1 f4       	brne	.+40     	; 0x1082 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    105a:	a2 e3       	ldi	r26, 0x32	; 50
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e2 e3       	ldi	r30, 0x32	; 50
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_writePin+0x194>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_writePin+0x190>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1082:	a2 e3       	ldi	r26, 0x32	; 50
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e2 e3       	ldi	r30, 0x32	; 50
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_writePin+0x1bc>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_writePin+0x1b8>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_readPin+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <GPIO_readPin+0x8>
    10c2:	0f 92       	push	r0
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10cc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	88 30       	cpi	r24, 0x08	; 8
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <GPIO_readPin+0x1c>
    10d4:	84 c0       	rjmp	.+264    	; 0x11de <GPIO_readPin+0x124>
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	08 f0       	brcs	.+2      	; 0x10de <GPIO_readPin+0x24>
    10dc:	80 c0       	rjmp	.+256    	; 0x11de <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3d 83       	std	Y+5, r19	; 0x05
    10e6:	2c 83       	std	Y+4, r18	; 0x04
    10e8:	4c 81       	ldd	r20, Y+4	; 0x04
    10ea:	5d 81       	ldd	r21, Y+5	; 0x05
    10ec:	41 30       	cpi	r20, 0x01	; 1
    10ee:	51 05       	cpc	r21, r1
    10f0:	79 f1       	breq	.+94     	; 0x1150 <GPIO_readPin+0x96>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	91 05       	cpc	r25, r1
    10fa:	34 f4       	brge	.+12     	; 0x1108 <GPIO_readPin+0x4e>
    10fc:	2c 81       	ldd	r18, Y+4	; 0x04
    10fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1100:	21 15       	cp	r18, r1
    1102:	31 05       	cpc	r19, r1
    1104:	69 f0       	breq	.+26     	; 0x1120 <GPIO_readPin+0x66>
    1106:	6b c0       	rjmp	.+214    	; 0x11de <GPIO_readPin+0x124>
    1108:	4c 81       	ldd	r20, Y+4	; 0x04
    110a:	5d 81       	ldd	r21, Y+5	; 0x05
    110c:	42 30       	cpi	r20, 0x02	; 2
    110e:	51 05       	cpc	r21, r1
    1110:	b9 f1       	breq	.+110    	; 0x1180 <GPIO_readPin+0xc6>
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	9d 81       	ldd	r25, Y+5	; 0x05
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <GPIO_readPin+0x64>
    111c:	49 c0       	rjmp	.+146    	; 0x11b0 <GPIO_readPin+0xf6>
    111e:	5f c0       	rjmp	.+190    	; 0x11de <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1120:	e9 e3       	ldi	r30, 0x39	; 57
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GPIO_readPin+0x7e>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GPIO_readPin+0x7a>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	90 70       	andi	r25, 0x00	; 0
    1142:	88 23       	and	r24, r24
    1144:	19 f0       	breq	.+6      	; 0x114c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	49 c0       	rjmp	.+146    	; 0x11de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    114c:	19 82       	std	Y+1, r1	; 0x01
    114e:	47 c0       	rjmp	.+142    	; 0x11de <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1150:	e6 e3       	ldi	r30, 0x36	; 54
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_readPin+0xae>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_readPin+0xaa>
    116c:	ca 01       	movw	r24, r20
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	90 70       	andi	r25, 0x00	; 0
    1172:	88 23       	and	r24, r24
    1174:	19 f0       	breq	.+6      	; 0x117c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	31 c0       	rjmp	.+98     	; 0x11de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    117c:	19 82       	std	Y+1, r1	; 0x01
    117e:	2f c0       	rjmp	.+94     	; 0x11de <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1180:	e3 e3       	ldi	r30, 0x33	; 51
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_readPin+0xde>
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_readPin+0xda>
    119c:	ca 01       	movw	r24, r20
    119e:	81 70       	andi	r24, 0x01	; 1
    11a0:	90 70       	andi	r25, 0x00	; 0
    11a2:	88 23       	and	r24, r24
    11a4:	19 f0       	breq	.+6      	; 0x11ac <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	19 c0       	rjmp	.+50     	; 0x11de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11ac:	19 82       	std	Y+1, r1	; 0x01
    11ae:	17 c0       	rjmp	.+46     	; 0x11de <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    11b0:	e0 e3       	ldi	r30, 0x30	; 48
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <GPIO_readPin+0x10e>
    11c4:	55 95       	asr	r21
    11c6:	47 95       	ror	r20
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <GPIO_readPin+0x10a>
    11cc:	ca 01       	movw	r24, r20
    11ce:	81 70       	andi	r24, 0x01	; 1
    11d0:	90 70       	andi	r25, 0x00	; 0
    11d2:	88 23       	and	r24, r24
    11d4:	19 f0       	breq	.+6      	; 0x11dc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	01 c0       	rjmp	.+2      	; 0x11de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11dc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <GPIO_setupPortDirection+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <GPIO_setupPortDirection+0x8>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	90 f5       	brcc	.+100    	; 0x126a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	3c 83       	std	Y+4, r19	; 0x04
    120e:	2b 83       	std	Y+3, r18	; 0x03
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	91 05       	cpc	r25, r1
    1218:	d1 f0       	breq	.+52     	; 0x124e <GPIO_setupPortDirection+0x5e>
    121a:	2b 81       	ldd	r18, Y+3	; 0x03
    121c:	3c 81       	ldd	r19, Y+4	; 0x04
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	2c f4       	brge	.+10     	; 0x122e <GPIO_setupPortDirection+0x3e>
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	61 f0       	breq	.+24     	; 0x1244 <GPIO_setupPortDirection+0x54>
    122c:	1e c0       	rjmp	.+60     	; 0x126a <GPIO_setupPortDirection+0x7a>
    122e:	2b 81       	ldd	r18, Y+3	; 0x03
    1230:	3c 81       	ldd	r19, Y+4	; 0x04
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	81 f0       	breq	.+32     	; 0x1258 <GPIO_setupPortDirection+0x68>
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	91 05       	cpc	r25, r1
    1240:	81 f0       	breq	.+32     	; 0x1262 <GPIO_setupPortDirection+0x72>
    1242:	13 c0       	rjmp	.+38     	; 0x126a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1244:	ea e3       	ldi	r30, 0x3A	; 58
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	80 83       	st	Z, r24
    124c:	0e c0       	rjmp	.+28     	; 0x126a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    124e:	e7 e3       	ldi	r30, 0x37	; 55
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	80 83       	st	Z, r24
    1256:	09 c0       	rjmp	.+18     	; 0x126a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1258:	e4 e3       	ldi	r30, 0x34	; 52
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	80 83       	st	Z, r24
    1260:	04 c0       	rjmp	.+8      	; 0x126a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	80 83       	st	Z, r24
			break;
		}
	}
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <GPIO_writePort+0x6>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_writePort+0x8>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	90 f5       	brcc	.+100    	; 0x12f2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3c 83       	std	Y+4, r19	; 0x04
    1296:	2b 83       	std	Y+3, r18	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	91 05       	cpc	r25, r1
    12a0:	d1 f0       	breq	.+52     	; 0x12d6 <GPIO_writePort+0x5e>
    12a2:	2b 81       	ldd	r18, Y+3	; 0x03
    12a4:	3c 81       	ldd	r19, Y+4	; 0x04
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <GPIO_writePort+0x3e>
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	61 f0       	breq	.+24     	; 0x12cc <GPIO_writePort+0x54>
    12b4:	1e c0       	rjmp	.+60     	; 0x12f2 <GPIO_writePort+0x7a>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	81 f0       	breq	.+32     	; 0x12e0 <GPIO_writePort+0x68>
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	91 05       	cpc	r25, r1
    12c8:	81 f0       	breq	.+32     	; 0x12ea <GPIO_writePort+0x72>
    12ca:	13 c0       	rjmp	.+38     	; 0x12f2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	80 83       	st	Z, r24
    12d4:	0e c0       	rjmp	.+28     	; 0x12f2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12d6:	e8 e3       	ldi	r30, 0x38	; 56
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	80 83       	st	Z, r24
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	80 83       	st	Z, r24
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12ea:	e2 e3       	ldi	r30, 0x32	; 50
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <GPIO_readPort+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <GPIO_readPort+0x8>
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    130e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	84 30       	cpi	r24, 0x04	; 4
    1314:	90 f5       	brcc	.+100    	; 0x137a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3c 83       	std	Y+4, r19	; 0x04
    131e:	2b 83       	std	Y+3, r18	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	d1 f0       	breq	.+52     	; 0x135e <GPIO_readPort+0x5e>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <GPIO_readPort+0x3e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 f0       	breq	.+24     	; 0x1354 <GPIO_readPort+0x54>
    133c:	1e c0       	rjmp	.+60     	; 0x137a <GPIO_readPort+0x7a>
    133e:	2b 81       	ldd	r18, Y+3	; 0x03
    1340:	3c 81       	ldd	r19, Y+4	; 0x04
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	81 f0       	breq	.+32     	; 0x1368 <GPIO_readPort+0x68>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	81 f0       	breq	.+32     	; 0x1372 <GPIO_readPort+0x72>
    1352:	13 c0       	rjmp	.+38     	; 0x137a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1354:	e9 e3       	ldi	r30, 0x39	; 57
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	0e c0       	rjmp	.+28     	; 0x137a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    135e:	e6 e3       	ldi	r30, 0x36	; 54
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	09 c0       	rjmp	.+18     	; 0x137a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1368:	e3 e3       	ldi	r30, 0x33	; 51
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	04 c0       	rjmp	.+8      	; 0x137a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1372:	e0 e3       	ldi	r30, 0x30	; 48
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	60 97       	sbiw	r28, 0x10	; 16
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	64 e0       	ldi	r22, 0x04	; 4
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	65 e0       	ldi	r22, 0x05	; 5
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	66 e0       	ldi	r22, 0x06	; 6
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	67 e0       	ldi	r22, 0x07	; 7
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	62 e0       	ldi	r22, 0x02	; 2
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	63 e0       	ldi	r22, 0x03	; 3
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	64 e0       	ldi	r22, 0x04	; 4
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    13e4:	83 e0       	ldi	r24, 0x03	; 3
    13e6:	65 e0       	ldi	r22, 0x05	; 5
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13ee:	1f 86       	std	Y+15, r1	; 0x0f
    13f0:	b4 c0       	rjmp	.+360    	; 0x155a <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    13f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f4:	98 2f       	mov	r25, r24
    13f6:	9c 5f       	subi	r25, 0xFC	; 252
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	69 2f       	mov	r22, r25
    13fc:	41 e0       	ldi	r20, 0x01	; 1
    13fe:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1402:	8f 85       	ldd	r24, Y+15	; 0x0f
    1404:	98 2f       	mov	r25, r24
    1406:	9c 5f       	subi	r25, 0xFC	; 252
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	69 2f       	mov	r22, r25
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1412:	18 8a       	std	Y+16, r1	; 0x10
    1414:	22 c0       	rjmp	.+68     	; 0x145a <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1416:	88 89       	ldd	r24, Y+16	; 0x10
    1418:	98 2f       	mov	r25, r24
    141a:	9e 5f       	subi	r25, 0xFE	; 254
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	69 2f       	mov	r22, r25
    1420:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_readPin>
    1424:	88 23       	and	r24, r24
    1426:	b1 f4       	brne	.+44     	; 0x1454 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1428:	8f 85       	ldd	r24, Y+15	; 0x0f
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	98 2f       	mov	r25, r24
    1438:	88 89       	ldd	r24, Y+16	; 0x10
    143a:	89 0f       	add	r24, r25
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1442:	60 96       	adiw	r28, 0x10	; 16
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1454:	88 89       	ldd	r24, Y+16	; 0x10
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	88 8b       	std	Y+16, r24	; 0x10
    145a:	88 89       	ldd	r24, Y+16	; 0x10
    145c:	84 30       	cpi	r24, 0x04	; 4
    145e:	d8 f2       	brcs	.-74     	; 0x1416 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1460:	8f 85       	ldd	r24, Y+15	; 0x0f
    1462:	98 2f       	mov	r25, r24
    1464:	9c 5f       	subi	r25, 0xFC	; 252
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	69 2f       	mov	r22, r25
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 ea       	ldi	r26, 0xA0	; 160
    1476:	b0 e4       	ldi	r27, 0x40	; 64
    1478:	8b 87       	std	Y+11, r24	; 0x0b
    147a:	9c 87       	std	Y+12, r25	; 0x0c
    147c:	ad 87       	std	Y+13, r26	; 0x0d
    147e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	6b 85       	ldd	r22, Y+11	; 0x0b
    1482:	7c 85       	ldd	r23, Y+12	; 0x0c
    1484:	8d 85       	ldd	r24, Y+13	; 0x0d
    1486:	9e 85       	ldd	r25, Y+14	; 0x0e
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8f 83       	std	Y+7, r24	; 0x07
    149a:	98 87       	std	Y+8, r25	; 0x08
    149c:	a9 87       	std	Y+9, r26	; 0x09
    149e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <KEYPAD_getPressedKey+0x198>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <KEYPAD_getPressedKey+0x186>
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <KEYPAD_getPressedKey+0x17a>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <KEYPAD_getPressedKey+0x1c2>
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1554:	8f 85       	ldd	r24, Y+15	; 0x0f
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	8f 87       	std	Y+15, r24	; 0x0f
    155a:	8f 85       	ldd	r24, Y+15	; 0x0f
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	08 f4       	brcc	.+2      	; 0x1562 <KEYPAD_getPressedKey+0x1d8>
    1560:	48 cf       	rjmp	.-368    	; 0x13f2 <KEYPAD_getPressedKey+0x68>
    1562:	45 cf       	rjmp	.-374    	; 0x13ee <KEYPAD_getPressedKey+0x64>

00001564 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <KEYPAD_4x4_adjustKeyNumber+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <KEYPAD_4x4_adjustKeyNumber+0x8>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1572:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	88 30       	cpi	r24, 0x08	; 8
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1588:	70 c0       	rjmp	.+224    	; 0x166a <KEYPAD_4x4_adjustKeyNumber+0x106>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	29 30       	cpi	r18, 0x09	; 9
    1590:	31 05       	cpc	r19, r1
    1592:	5c f5       	brge	.+86     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x86>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	84 30       	cpi	r24, 0x04	; 4
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    159e:	59 c0       	rjmp	.+178    	; 0x1652 <KEYPAD_4x4_adjustKeyNumber+0xee>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	25 30       	cpi	r18, 0x05	; 5
    15a6:	31 05       	cpc	r19, r1
    15a8:	9c f4       	brge	.+38     	; 0x15d0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    15b4:	48 c0       	rjmp	.+144    	; 0x1646 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ba:	23 30       	cpi	r18, 0x03	; 3
    15bc:	31 05       	cpc	r19, r1
    15be:	0c f0       	brlt	.+2      	; 0x15c2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    15c0:	45 c0       	rjmp	.+138    	; 0x164c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <KEYPAD_4x4_adjustKeyNumber+0x6a>
    15cc:	39 c0       	rjmp	.+114    	; 0x1640 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    15ce:	67 c0       	rjmp	.+206    	; 0x169e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    15d0:	2b 81       	ldd	r18, Y+3	; 0x03
    15d2:	3c 81       	ldd	r19, Y+4	; 0x04
    15d4:	26 30       	cpi	r18, 0x06	; 6
    15d6:	31 05       	cpc	r19, r1
    15d8:	09 f4       	brne	.+2      	; 0x15dc <KEYPAD_4x4_adjustKeyNumber+0x78>
    15da:	41 c0       	rjmp	.+130    	; 0x165e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	87 30       	cpi	r24, 0x07	; 7
    15e2:	91 05       	cpc	r25, r1
    15e4:	0c f0       	brlt	.+2      	; 0x15e8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    15e6:	3e c0       	rjmp	.+124    	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x100>
    15e8:	37 c0       	rjmp	.+110    	; 0x1658 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	2c 30       	cpi	r18, 0x0C	; 12
    15f0:	31 05       	cpc	r19, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    15f4:	46 c0       	rjmp	.+140    	; 0x1682 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	8d 30       	cpi	r24, 0x0D	; 13
    15fc:	91 05       	cpc	r25, r1
    15fe:	5c f4       	brge	.+22     	; 0x1616 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1600:	2b 81       	ldd	r18, Y+3	; 0x03
    1602:	3c 81       	ldd	r19, Y+4	; 0x04
    1604:	2a 30       	cpi	r18, 0x0A	; 10
    1606:	31 05       	cpc	r19, r1
    1608:	b1 f1       	breq	.+108    	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x112>
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	8b 30       	cpi	r24, 0x0B	; 11
    1610:	91 05       	cpc	r25, r1
    1612:	a4 f5       	brge	.+104    	; 0x167c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1614:	2d c0       	rjmp	.+90     	; 0x1670 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1616:	2b 81       	ldd	r18, Y+3	; 0x03
    1618:	3c 81       	ldd	r19, Y+4	; 0x04
    161a:	2e 30       	cpi	r18, 0x0E	; 14
    161c:	31 05       	cpc	r19, r1
    161e:	b9 f1       	breq	.+110    	; 0x168e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	8e 30       	cpi	r24, 0x0E	; 14
    1626:	91 05       	cpc	r25, r1
    1628:	7c f1       	brlt	.+94     	; 0x1688 <KEYPAD_4x4_adjustKeyNumber+0x124>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	2f 30       	cpi	r18, 0x0F	; 15
    1630:	31 05       	cpc	r19, r1
    1632:	79 f1       	breq	.+94     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	80 31       	cpi	r24, 0x10	; 16
    163a:	91 05       	cpc	r25, r1
    163c:	69 f1       	breq	.+90     	; 0x1698 <KEYPAD_4x4_adjustKeyNumber+0x134>
    163e:	2f c0       	rjmp	.+94     	; 0x169e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1640:	87 e0       	ldi	r24, 0x07	; 7
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	2e c0       	rjmp	.+92     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1646:	88 e0       	ldi	r24, 0x08	; 8
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	2b c0       	rjmp	.+86     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    164c:	89 e0       	ldi	r24, 0x09	; 9
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	28 c0       	rjmp	.+80     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1652:	85 e2       	ldi	r24, 0x25	; 37
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	25 c0       	rjmp	.+74     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1658:	84 e0       	ldi	r24, 0x04	; 4
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	22 c0       	rjmp	.+68     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    165e:	85 e0       	ldi	r24, 0x05	; 5
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	1f c0       	rjmp	.+62     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1664:	86 e0       	ldi	r24, 0x06	; 6
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	1c c0       	rjmp	.+56     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    166a:	8a e2       	ldi	r24, 0x2A	; 42
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	19 c0       	rjmp	.+50     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	16 c0       	rjmp	.+44     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	10 c0       	rjmp	.+32     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1682:	8d e2       	ldi	r24, 0x2D	; 45
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1688:	8d e0       	ldi	r24, 0x0D	; 13
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	0a c0       	rjmp	.+20     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    168e:	19 82       	std	Y+1, r1	; 0x01
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1692:	8d e3       	ldi	r24, 0x3D	; 61
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1698:	8b e2       	ldi	r24, 0x2B	; 43
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	2e 97       	sbiw	r28, 0x0e	; 14
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	62 e0       	ldi	r22, 0x02	; 2
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 ea       	ldi	r26, 0xA0	; 160
    16e0:	b1 e4       	ldi	r27, 0x41	; 65
    16e2:	8b 87       	std	Y+11, r24	; 0x0b
    16e4:	9c 87       	std	Y+12, r25	; 0x0c
    16e6:	ad 87       	std	Y+13, r26	; 0x0d
    16e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8f 83       	std	Y+7, r24	; 0x07
    1704:	98 87       	std	Y+8, r25	; 0x08
    1706:	a9 87       	std	Y+9, r26	; 0x09
    1708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <LCD_init+0x7a>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <LCD_init+0xf8>
	else if (__tmp > 65535)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6b 85       	ldd	r22, Y+11	; 0x0b
    1746:	7c 85       	ldd	r23, Y+12	; 0x0c
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
    176c:	0f c0       	rjmp	.+30     	; 0x178c <LCD_init+0xda>
    176e:	88 ec       	ldi	r24, 0xC8	; 200
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_init+0xc8>
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <LCD_init+0xbc>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_init+0x104>
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	63 e0       	ldi	r22, 0x03	; 3
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	64 e0       	ldi	r22, 0x04	; 4
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	65 e0       	ldi	r22, 0x05	; 5
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	66 e0       	ldi	r22, 0x06	; 6
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 87 06 	call	0xd0e	; 0xd0e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    17e6:	83 e3       	ldi	r24, 0x33	; 51
    17e8:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17ec:	82 e3       	ldi	r24, 0x32	; 50
    17ee:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    17f2:	88 e2       	ldi	r24, 0x28	; 40
    17f4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    17f8:	8c e0       	ldi	r24, 0x0C	; 12
    17fa:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_sendCommand>
}
    1804:	2e 96       	adiw	r28, 0x0e	; 14
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	c3 56       	subi	r28, 0x63	; 99
    1824:	d0 40       	sbci	r29, 0x00	; 0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	fe 01       	movw	r30, r28
    1832:	ed 59       	subi	r30, 0x9D	; 157
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    1842:	fe 01       	movw	r30, r28
    1844:	e1 5a       	subi	r30, 0xA1	; 161
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e8       	ldi	r26, 0x80	; 128
    184e:	bf e3       	ldi	r27, 0x3F	; 63
    1850:	80 83       	st	Z, r24
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	a2 83       	std	Z+2, r26	; 0x02
    1856:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	8e 01       	movw	r16, r28
    185a:	05 5a       	subi	r16, 0xA5	; 165
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	fe 01       	movw	r30, r28
    1860:	e1 5a       	subi	r30, 0xA1	; 161
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a ef       	ldi	r20, 0xFA	; 250
    1872:	54 e4       	ldi	r21, 0x44	; 68
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	f8 01       	movw	r30, r16
    187e:	80 83       	st	Z, r24
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	a2 83       	std	Z+2, r26	; 0x02
    1884:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1886:	fe 01       	movw	r30, r28
    1888:	e5 5a       	subi	r30, 0xA5	; 165
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	44 f4       	brge	.+16     	; 0x18b4 <LCD_sendCommand+0x9e>
		__ticks = 1;
    18a4:	fe 01       	movw	r30, r28
    18a6:	e7 5a       	subi	r30, 0xA7	; 167
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
    18b2:	64 c0       	rjmp	.+200    	; 0x197c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    18b4:	fe 01       	movw	r30, r28
    18b6:	e5 5a       	subi	r30, 0xA5	; 165
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	0c f0       	brlt	.+2      	; 0x18d4 <LCD_sendCommand+0xbe>
    18d2:	43 c0       	rjmp	.+134    	; 0x195a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d4:	fe 01       	movw	r30, r28
    18d6:	e1 5a       	subi	r30, 0xA1	; 161
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8e 01       	movw	r16, r28
    18f4:	07 5a       	subi	r16, 0xA7	; 167
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	f8 01       	movw	r30, r16
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
    190a:	1f c0       	rjmp	.+62     	; 0x194a <LCD_sendCommand+0x134>
    190c:	fe 01       	movw	r30, r28
    190e:	e9 5a       	subi	r30, 0xA9	; 169
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	88 ec       	ldi	r24, 0xC8	; 200
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	fe 01       	movw	r30, r28
    191c:	e9 5a       	subi	r30, 0xA9	; 169
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	91 81       	ldd	r25, Z+1	; 0x01
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_sendCommand+0x10e>
    1928:	fe 01       	movw	r30, r28
    192a:	e9 5a       	subi	r30, 0xA9	; 169
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	de 01       	movw	r26, r28
    1934:	a7 5a       	subi	r26, 0xA7	; 167
    1936:	bf 4f       	sbci	r27, 0xFF	; 255
    1938:	fe 01       	movw	r30, r28
    193a:	e7 5a       	subi	r30, 0xA7	; 167
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	11 96       	adiw	r26, 0x01	; 1
    1946:	9c 93       	st	X, r25
    1948:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	fe 01       	movw	r30, r28
    194c:	e7 5a       	subi	r30, 0xA7	; 167
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	d1 f6       	brne	.-76     	; 0x190c <LCD_sendCommand+0xf6>
    1958:	27 c0       	rjmp	.+78     	; 0x19a8 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	8e 01       	movw	r16, r28
    195c:	07 5a       	subi	r16, 0xA7	; 167
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	fe 01       	movw	r30, r28
    1962:	e5 5a       	subi	r30, 0xA5	; 165
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	f8 01       	movw	r30, r16
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    197c:	de 01       	movw	r26, r28
    197e:	ab 5a       	subi	r26, 0xAB	; 171
    1980:	bf 4f       	sbci	r27, 0xFF	; 255
    1982:	fe 01       	movw	r30, r28
    1984:	e7 5a       	subi	r30, 0xA7	; 167
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	8d 93       	st	X+, r24
    198e:	9c 93       	st	X, r25
    1990:	fe 01       	movw	r30, r28
    1992:	eb 5a       	subi	r30, 0xAB	; 171
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_sendCommand+0x184>
    199e:	fe 01       	movw	r30, r28
    19a0:	eb 5a       	subi	r30, 0xAB	; 171
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	62 e0       	ldi	r22, 0x02	; 2
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    19b2:	fe 01       	movw	r30, r28
    19b4:	ef 5a       	subi	r30, 0xAF	; 175
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a0 e8       	ldi	r26, 0x80	; 128
    19be:	bf e3       	ldi	r27, 0x3F	; 63
    19c0:	80 83       	st	Z, r24
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	a2 83       	std	Z+2, r26	; 0x02
    19c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	8e 01       	movw	r16, r28
    19ca:	03 5b       	subi	r16, 0xB3	; 179
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	fe 01       	movw	r30, r28
    19d0:	ef 5a       	subi	r30, 0xAF	; 175
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	4a ef       	ldi	r20, 0xFA	; 250
    19e2:	54 e4       	ldi	r21, 0x44	; 68
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	80 83       	st	Z, r24
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	a2 83       	std	Z+2, r26	; 0x02
    19f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19f6:	fe 01       	movw	r30, r28
    19f8:	e3 5b       	subi	r30, 0xB3	; 179
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	60 81       	ld	r22, Z
    19fe:	71 81       	ldd	r23, Z+1	; 0x01
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	5f e3       	ldi	r21, 0x3F	; 63
    1a0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a10:	88 23       	and	r24, r24
    1a12:	44 f4       	brge	.+16     	; 0x1a24 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1a14:	fe 01       	movw	r30, r28
    1a16:	e5 5b       	subi	r30, 0xB5	; 181
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
    1a22:	64 c0       	rjmp	.+200    	; 0x1aec <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1a24:	fe 01       	movw	r30, r28
    1a26:	e3 5b       	subi	r30, 0xB3	; 179
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	0c f0       	brlt	.+2      	; 0x1a44 <LCD_sendCommand+0x22e>
    1a42:	43 c0       	rjmp	.+134    	; 0x1aca <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	fe 01       	movw	r30, r28
    1a46:	ef 5a       	subi	r30, 0xAF	; 175
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e2       	ldi	r20, 0x20	; 32
    1a58:	51 e4       	ldi	r21, 0x41	; 65
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8e 01       	movw	r16, r28
    1a64:	05 5b       	subi	r16, 0xB5	; 181
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	f8 01       	movw	r30, r16
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
    1a7a:	1f c0       	rjmp	.+62     	; 0x1aba <LCD_sendCommand+0x2a4>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e7 5b       	subi	r30, 0xB7	; 183
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	88 ec       	ldi	r24, 0xC8	; 200
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 5b       	subi	r30, 0xB7	; 183
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <LCD_sendCommand+0x27e>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e7 5b       	subi	r30, 0xB7	; 183
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	de 01       	movw	r26, r28
    1aa4:	a5 5b       	subi	r26, 0xB5	; 181
    1aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e5 5b       	subi	r30, 0xB5	; 181
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	11 96       	adiw	r26, 0x01	; 1
    1ab6:	9c 93       	st	X, r25
    1ab8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	fe 01       	movw	r30, r28
    1abc:	e5 5b       	subi	r30, 0xB5	; 181
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	d1 f6       	brne	.-76     	; 0x1a7c <LCD_sendCommand+0x266>
    1ac8:	27 c0       	rjmp	.+78     	; 0x1b18 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	8e 01       	movw	r16, r28
    1acc:	05 5b       	subi	r16, 0xB5	; 181
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e3 5b       	subi	r30, 0xB3	; 179
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
    1aec:	de 01       	movw	r26, r28
    1aee:	a9 5b       	subi	r26, 0xB9	; 185
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	e5 5b       	subi	r30, 0xB5	; 181
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	8d 93       	st	X+, r24
    1afe:	9c 93       	st	X, r25
    1b00:	fe 01       	movw	r30, r28
    1b02:	e9 5b       	subi	r30, 0xB9	; 185
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_sendCommand+0x2f4>
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e9 5b       	subi	r30, 0xB9	; 185
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ed 59       	subi	r30, 0x9D	; 157
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	80 71       	andi	r24, 0x10	; 16
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	95 95       	asr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	95 95       	asr	r25
    1b2e:	87 95       	ror	r24
    1b30:	95 95       	asr	r25
    1b32:	87 95       	ror	r24
    1b34:	95 95       	asr	r25
    1b36:	87 95       	ror	r24
    1b38:	98 2f       	mov	r25, r24
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	63 e0       	ldi	r22, 0x03	; 3
    1b3e:	49 2f       	mov	r20, r25
    1b40:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1b44:	fe 01       	movw	r30, r28
    1b46:	ed 59       	subi	r30, 0x9D	; 157
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	80 72       	andi	r24, 0x20	; 32
    1b52:	90 70       	andi	r25, 0x00	; 0
    1b54:	95 95       	asr	r25
    1b56:	87 95       	ror	r24
    1b58:	95 95       	asr	r25
    1b5a:	87 95       	ror	r24
    1b5c:	95 95       	asr	r25
    1b5e:	87 95       	ror	r24
    1b60:	95 95       	asr	r25
    1b62:	87 95       	ror	r24
    1b64:	95 95       	asr	r25
    1b66:	87 95       	ror	r24
    1b68:	98 2f       	mov	r25, r24
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	64 e0       	ldi	r22, 0x04	; 4
    1b6e:	49 2f       	mov	r20, r25
    1b70:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1b74:	fe 01       	movw	r30, r28
    1b76:	ed 59       	subi	r30, 0x9D	; 157
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	80 74       	andi	r24, 0x40	; 64
    1b82:	90 70       	andi	r25, 0x00	; 0
    1b84:	08 2e       	mov	r0, r24
    1b86:	89 2f       	mov	r24, r25
    1b88:	00 0c       	add	r0, r0
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	99 0b       	sbc	r25, r25
    1b8e:	00 0c       	add	r0, r0
    1b90:	88 1f       	adc	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	98 2f       	mov	r25, r24
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	65 e0       	ldi	r22, 0x05	; 5
    1b9a:	49 2f       	mov	r20, r25
    1b9c:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ed 59       	subi	r30, 0x9D	; 157
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	98 2f       	mov	r25, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	99 27       	eor	r25, r25
    1bae:	99 1f       	adc	r25, r25
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	66 e0       	ldi	r22, 0x06	; 6
    1bb4:	49 2f       	mov	r20, r25
    1bb6:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    1bba:	fe 01       	movw	r30, r28
    1bbc:	ed 5b       	subi	r30, 0xBD	; 189
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e8       	ldi	r26, 0x80	; 128
    1bc6:	bf e3       	ldi	r27, 0x3F	; 63
    1bc8:	80 83       	st	Z, r24
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	a2 83       	std	Z+2, r26	; 0x02
    1bce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	8e 01       	movw	r16, r28
    1bd2:	01 5c       	subi	r16, 0xC1	; 193
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ed 5b       	subi	r30, 0xBD	; 189
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a ef       	ldi	r20, 0xFA	; 250
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	80 83       	st	Z, r24
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	a2 83       	std	Z+2, r26	; 0x02
    1bfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ff 96       	adiw	r30, 0x3f	; 63
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9e af       	std	Y+62, r25	; 0x3e
    1c20:	8d af       	std	Y+61, r24	; 0x3d
    1c22:	46 c0       	rjmp	.+140    	; 0x1cb0 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1c24:	fe 01       	movw	r30, r28
    1c26:	ff 96       	adiw	r30, 0x3f	; 63
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	64 f5       	brge	.+88     	; 0x1c98 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	fe 01       	movw	r30, r28
    1c42:	ed 5b       	subi	r30, 0xBD	; 189
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9e af       	std	Y+62, r25	; 0x3e
    1c6c:	8d af       	std	Y+61, r24	; 0x3d
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <LCD_sendCommand+0x478>
    1c70:	88 ec       	ldi	r24, 0xC8	; 200
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9c af       	std	Y+60, r25	; 0x3c
    1c76:	8b af       	std	Y+59, r24	; 0x3b
    1c78:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_sendCommand+0x466>
    1c80:	9c af       	std	Y+60, r25	; 0x3c
    1c82:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c86:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9e af       	std	Y+62, r25	; 0x3e
    1c8c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c90:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <LCD_sendCommand+0x45a>
    1c96:	16 c0       	rjmp	.+44     	; 0x1cc4 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ff 96       	adiw	r30, 0x3f	; 63
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9e af       	std	Y+62, r25	; 0x3e
    1cae:	8d af       	std	Y+61, r24	; 0x3d
    1cb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb4:	9a af       	std	Y+58, r25	; 0x3a
    1cb6:	89 af       	std	Y+57, r24	; 0x39
    1cb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1cba:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_sendCommand+0x4a6>
    1cc0:	9a af       	std	Y+58, r25	; 0x3a
    1cc2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	62 e0       	ldi	r22, 0x02	; 2
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e8       	ldi	r26, 0x80	; 128
    1cd4:	bf e3       	ldi	r27, 0x3F	; 63
    1cd6:	8d ab       	std	Y+53, r24	; 0x35
    1cd8:	9e ab       	std	Y+54, r25	; 0x36
    1cda:	af ab       	std	Y+55, r26	; 0x37
    1cdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a ef       	ldi	r20, 0xFA	; 250
    1cec:	54 e4       	ldi	r21, 0x44	; 68
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	89 ab       	std	Y+49, r24	; 0x31
    1cf8:	9a ab       	std	Y+50, r25	; 0x32
    1cfa:	ab ab       	std	Y+51, r26	; 0x33
    1cfc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1d00:	7a a9       	ldd	r23, Y+50	; 0x32
    1d02:	8b a9       	ldd	r24, Y+51	; 0x33
    1d04:	9c a9       	ldd	r25, Y+52	; 0x34
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e8       	ldi	r20, 0x80	; 128
    1d0c:	5f e3       	ldi	r21, 0x3F	; 63
    1d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	98 ab       	std	Y+48, r25	; 0x30
    1d1c:	8f a7       	std	Y+47, r24	; 0x2f
    1d1e:	3f c0       	rjmp	.+126    	; 0x1d9e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1d20:	69 a9       	ldd	r22, Y+49	; 0x31
    1d22:	7a a9       	ldd	r23, Y+50	; 0x32
    1d24:	8b a9       	ldd	r24, Y+51	; 0x33
    1d26:	9c a9       	ldd	r25, Y+52	; 0x34
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	57 e4       	ldi	r21, 0x47	; 71
    1d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	4c f5       	brge	.+82     	; 0x1d8a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d38:	6d a9       	ldd	r22, Y+53	; 0x35
    1d3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	51 e4       	ldi	r21, 0x41	; 65
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	98 ab       	std	Y+48, r25	; 0x30
    1d5e:	8f a7       	std	Y+47, r24	; 0x2f
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <LCD_sendCommand+0x56a>
    1d62:	88 ec       	ldi	r24, 0xC8	; 200
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9e a7       	std	Y+46, r25	; 0x2e
    1d68:	8d a7       	std	Y+45, r24	; 0x2d
    1d6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_sendCommand+0x558>
    1d72:	9e a7       	std	Y+46, r25	; 0x2e
    1d74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d78:	98 a9       	ldd	r25, Y+48	; 0x30
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	98 ab       	std	Y+48, r25	; 0x30
    1d7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d82:	98 a9       	ldd	r25, Y+48	; 0x30
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <LCD_sendCommand+0x54c>
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d90:	9c a9       	ldd	r25, Y+52	; 0x34
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	98 ab       	std	Y+48, r25	; 0x30
    1d9c:	8f a7       	std	Y+47, r24	; 0x2f
    1d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da0:	98 a9       	ldd	r25, Y+48	; 0x30
    1da2:	9c a7       	std	Y+44, r25	; 0x2c
    1da4:	8b a7       	std	Y+43, r24	; 0x2b
    1da6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1da8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_sendCommand+0x594>
    1dae:	9c a7       	std	Y+44, r25	; 0x2c
    1db0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	62 e0       	ldi	r22, 0x02	; 2
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e8       	ldi	r26, 0x80	; 128
    1dc2:	bf e3       	ldi	r27, 0x3F	; 63
    1dc4:	8f a3       	std	Y+39, r24	; 0x27
    1dc6:	98 a7       	std	Y+40, r25	; 0x28
    1dc8:	a9 a7       	std	Y+41, r26	; 0x29
    1dca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dcc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dce:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4a ef       	ldi	r20, 0xFA	; 250
    1dda:	54 e4       	ldi	r21, 0x44	; 68
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8b a3       	std	Y+35, r24	; 0x23
    1de6:	9c a3       	std	Y+36, r25	; 0x24
    1de8:	ad a3       	std	Y+37, r26	; 0x25
    1dea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dec:	6b a1       	ldd	r22, Y+35	; 0x23
    1dee:	7c a1       	ldd	r23, Y+36	; 0x24
    1df0:	8d a1       	ldd	r24, Y+37	; 0x25
    1df2:	9e a1       	ldd	r25, Y+38	; 0x26
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9a a3       	std	Y+34, r25	; 0x22
    1e0a:	89 a3       	std	Y+33, r24	; 0x21
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1e0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e10:	7c a1       	ldd	r23, Y+36	; 0x24
    1e12:	8d a1       	ldd	r24, Y+37	; 0x25
    1e14:	9e a1       	ldd	r25, Y+38	; 0x26
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	4c f5       	brge	.+82     	; 0x1e78 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e26:	6f a1       	ldd	r22, Y+39	; 0x27
    1e28:	78 a5       	ldd	r23, Y+40	; 0x28
    1e2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9a a3       	std	Y+34, r25	; 0x22
    1e4c:	89 a3       	std	Y+33, r24	; 0x21
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <LCD_sendCommand+0x658>
    1e50:	88 ec       	ldi	r24, 0xC8	; 200
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	98 a3       	std	Y+32, r25	; 0x20
    1e56:	8f 8f       	std	Y+31, r24	; 0x1f
    1e58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_sendCommand+0x646>
    1e60:	98 a3       	std	Y+32, r25	; 0x20
    1e62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	89 a1       	ldd	r24, Y+33	; 0x21
    1e66:	9a a1       	ldd	r25, Y+34	; 0x22
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	9a a3       	std	Y+34, r25	; 0x22
    1e6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e70:	9a a1       	ldd	r25, Y+34	; 0x22
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <LCD_sendCommand+0x63a>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9a a3       	std	Y+34, r25	; 0x22
    1e8a:	89 a3       	std	Y+33, r24	; 0x21
    1e8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e90:	9e 8f       	std	Y+30, r25	; 0x1e
    1e92:	8d 8f       	std	Y+29, r24	; 0x1d
    1e94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_sendCommand+0x682>
    1e9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ed 59       	subi	r30, 0x9D	; 157
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	91 70       	andi	r25, 0x01	; 1
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	63 e0       	ldi	r22, 0x03	; 3
    1eb0:	49 2f       	mov	r20, r25
    1eb2:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ed 59       	subi	r30, 0x9D	; 157
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	82 70       	andi	r24, 0x02	; 2
    1ec4:	90 70       	andi	r25, 0x00	; 0
    1ec6:	95 95       	asr	r25
    1ec8:	87 95       	ror	r24
    1eca:	98 2f       	mov	r25, r24
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	64 e0       	ldi	r22, 0x04	; 4
    1ed0:	49 2f       	mov	r20, r25
    1ed2:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ed 59       	subi	r30, 0x9D	; 157
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	84 70       	andi	r24, 0x04	; 4
    1ee4:	90 70       	andi	r25, 0x00	; 0
    1ee6:	95 95       	asr	r25
    1ee8:	87 95       	ror	r24
    1eea:	95 95       	asr	r25
    1eec:	87 95       	ror	r24
    1eee:	98 2f       	mov	r25, r24
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	65 e0       	ldi	r22, 0x05	; 5
    1ef4:	49 2f       	mov	r20, r25
    1ef6:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1efa:	fe 01       	movw	r30, r28
    1efc:	ed 59       	subi	r30, 0x9D	; 157
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	88 70       	andi	r24, 0x08	; 8
    1f08:	90 70       	andi	r25, 0x00	; 0
    1f0a:	95 95       	asr	r25
    1f0c:	87 95       	ror	r24
    1f0e:	95 95       	asr	r25
    1f10:	87 95       	ror	r24
    1f12:	95 95       	asr	r25
    1f14:	87 95       	ror	r24
    1f16:	98 2f       	mov	r25, r24
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	66 e0       	ldi	r22, 0x06	; 6
    1f1c:	49 2f       	mov	r20, r25
    1f1e:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a0 e8       	ldi	r26, 0x80	; 128
    1f28:	bf e3       	ldi	r27, 0x3F	; 63
    1f2a:	89 8f       	std	Y+25, r24	; 0x19
    1f2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f32:	69 8d       	ldd	r22, Y+25	; 0x19
    1f34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4a ef       	ldi	r20, 0xFA	; 250
    1f40:	54 e4       	ldi	r21, 0x44	; 68
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	8d 8b       	std	Y+21, r24	; 0x15
    1f4c:	9e 8b       	std	Y+22, r25	; 0x16
    1f4e:	af 8b       	std	Y+23, r26	; 0x17
    1f50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f52:	6d 89       	ldd	r22, Y+21	; 0x15
    1f54:	7e 89       	ldd	r23, Y+22	; 0x16
    1f56:	8f 89       	ldd	r24, Y+23	; 0x17
    1f58:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e8       	ldi	r20, 0x80	; 128
    1f60:	5f e3       	ldi	r21, 0x3F	; 63
    1f62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f66:	88 23       	and	r24, r24
    1f68:	2c f4       	brge	.+10     	; 0x1f74 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9c 8b       	std	Y+20, r25	; 0x14
    1f70:	8b 8b       	std	Y+19, r24	; 0x13
    1f72:	3f c0       	rjmp	.+126    	; 0x1ff2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1f74:	6d 89       	ldd	r22, Y+21	; 0x15
    1f76:	7e 89       	ldd	r23, Y+22	; 0x16
    1f78:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	3f ef       	ldi	r19, 0xFF	; 255
    1f80:	4f e7       	ldi	r20, 0x7F	; 127
    1f82:	57 e4       	ldi	r21, 0x47	; 71
    1f84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	4c f5       	brge	.+82     	; 0x1fde <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e2       	ldi	r20, 0x20	; 32
    1f9a:	51 e4       	ldi	r21, 0x41	; 65
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9c 8b       	std	Y+20, r25	; 0x14
    1fb2:	8b 8b       	std	Y+19, r24	; 0x13
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <LCD_sendCommand+0x7be>
    1fb6:	88 ec       	ldi	r24, 0xC8	; 200
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9a 8b       	std	Y+18, r25	; 0x12
    1fbc:	89 8b       	std	Y+17, r24	; 0x11
    1fbe:	89 89       	ldd	r24, Y+17	; 0x11
    1fc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_sendCommand+0x7ac>
    1fc6:	9a 8b       	std	Y+18, r25	; 0x12
    1fc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fca:	8b 89       	ldd	r24, Y+19	; 0x13
    1fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	9c 8b       	std	Y+20, r25	; 0x14
    1fd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	69 f7       	brne	.-38     	; 0x1fb6 <LCD_sendCommand+0x7a0>
    1fdc:	14 c0       	rjmp	.+40     	; 0x2006 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fde:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
    1ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff6:	98 8b       	std	Y+16, r25	; 0x10
    1ff8:	8f 87       	std	Y+15, r24	; 0x0f
    1ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffc:	98 89       	ldd	r25, Y+16	; 0x10
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_sendCommand+0x7e8>
    2002:	98 8b       	std	Y+16, r25	; 0x10
    2004:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	62 e0       	ldi	r22, 0x02	; 2
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 e8       	ldi	r26, 0x80	; 128
    2016:	bf e3       	ldi	r27, 0x3F	; 63
    2018:	8b 87       	std	Y+11, r24	; 0x0b
    201a:	9c 87       	std	Y+12, r25	; 0x0c
    201c:	ad 87       	std	Y+13, r26	; 0x0d
    201e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a ef       	ldi	r20, 0xFA	; 250
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8f 83       	std	Y+7, r24	; 0x07
    203a:	98 87       	std	Y+8, r25	; 0x08
    203c:	a9 87       	std	Y+9, r26	; 0x09
    203e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2062:	6f 81       	ldd	r22, Y+7	; 0x07
    2064:	78 85       	ldd	r23, Y+8	; 0x08
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	6b 85       	ldd	r22, Y+11	; 0x0b
    207c:	7c 85       	ldd	r23, Y+12	; 0x0c
    207e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2080:	9e 85       	ldd	r25, Y+14	; 0x0e
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <LCD_sendCommand+0x8ac>
    20a4:	88 ec       	ldi	r24, 0xC8	; 200
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9c 83       	std	Y+4, r25	; 0x04
    20aa:	8b 83       	std	Y+3, r24	; 0x03
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_sendCommand+0x89a>
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	8d 81       	ldd	r24, Y+5	; 0x05
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <LCD_sendCommand+0x88e>
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_sendCommand+0x8d6>
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    20f4:	cd 59       	subi	r28, 0x9D	; 157
    20f6:	df 4f       	sbci	r29, 0xFF	; 255
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	08 95       	ret

0000210c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	c3 56       	subi	r28, 0x63	; 99
    211a:	d0 40       	sbci	r29, 0x00	; 0
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	fe 01       	movw	r30, r28
    2128:	ed 59       	subi	r30, 0x9D	; 157
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	61 e0       	ldi	r22, 0x01	; 1
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    2138:	fe 01       	movw	r30, r28
    213a:	e1 5a       	subi	r30, 0xA1	; 161
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a0 e8       	ldi	r26, 0x80	; 128
    2144:	bf e3       	ldi	r27, 0x3F	; 63
    2146:	80 83       	st	Z, r24
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	a2 83       	std	Z+2, r26	; 0x02
    214c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214e:	8e 01       	movw	r16, r28
    2150:	05 5a       	subi	r16, 0xA5	; 165
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	fe 01       	movw	r30, r28
    2156:	e1 5a       	subi	r30, 0xA1	; 161
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a ef       	ldi	r20, 0xFA	; 250
    2168:	54 e4       	ldi	r21, 0x44	; 68
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	f8 01       	movw	r30, r16
    2174:	80 83       	st	Z, r24
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	a2 83       	std	Z+2, r26	; 0x02
    217a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    217c:	fe 01       	movw	r30, r28
    217e:	e5 5a       	subi	r30, 0xA5	; 165
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	44 f4       	brge	.+16     	; 0x21aa <LCD_displayCharacter+0x9e>
		__ticks = 1;
    219a:	fe 01       	movw	r30, r28
    219c:	e7 5a       	subi	r30, 0xA7	; 167
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	64 c0       	rjmp	.+200    	; 0x2272 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    21aa:	fe 01       	movw	r30, r28
    21ac:	e5 5a       	subi	r30, 0xA5	; 165
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	0c f0       	brlt	.+2      	; 0x21ca <LCD_displayCharacter+0xbe>
    21c8:	43 c0       	rjmp	.+134    	; 0x2250 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	fe 01       	movw	r30, r28
    21cc:	e1 5a       	subi	r30, 0xA1	; 161
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8e 01       	movw	r16, r28
    21ea:	07 5a       	subi	r16, 0xA7	; 167
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	f8 01       	movw	r30, r16
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
    2200:	1f c0       	rjmp	.+62     	; 0x2240 <LCD_displayCharacter+0x134>
    2202:	fe 01       	movw	r30, r28
    2204:	e9 5a       	subi	r30, 0xA9	; 169
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	fe 01       	movw	r30, r28
    2212:	e9 5a       	subi	r30, 0xA9	; 169
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_displayCharacter+0x10e>
    221e:	fe 01       	movw	r30, r28
    2220:	e9 5a       	subi	r30, 0xA9	; 169
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	de 01       	movw	r26, r28
    222a:	a7 5a       	subi	r26, 0xA7	; 167
    222c:	bf 4f       	sbci	r27, 0xFF	; 255
    222e:	fe 01       	movw	r30, r28
    2230:	e7 5a       	subi	r30, 0xA7	; 167
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	11 96       	adiw	r26, 0x01	; 1
    223c:	9c 93       	st	X, r25
    223e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	fe 01       	movw	r30, r28
    2242:	e7 5a       	subi	r30, 0xA7	; 167
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	d1 f6       	brne	.-76     	; 0x2202 <LCD_displayCharacter+0xf6>
    224e:	27 c0       	rjmp	.+78     	; 0x229e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	8e 01       	movw	r16, r28
    2252:	07 5a       	subi	r16, 0xA7	; 167
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e5 5a       	subi	r30, 0xA5	; 165
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	f8 01       	movw	r30, r16
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	de 01       	movw	r26, r28
    2274:	ab 5a       	subi	r26, 0xAB	; 171
    2276:	bf 4f       	sbci	r27, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	e7 5a       	subi	r30, 0xA7	; 167
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	8d 93       	st	X+, r24
    2284:	9c 93       	st	X, r25
    2286:	fe 01       	movw	r30, r28
    2288:	eb 5a       	subi	r30, 0xAB	; 171
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_displayCharacter+0x184>
    2294:	fe 01       	movw	r30, r28
    2296:	eb 5a       	subi	r30, 0xAB	; 171
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	62 e0       	ldi	r22, 0x02	; 2
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    22a8:	fe 01       	movw	r30, r28
    22aa:	ef 5a       	subi	r30, 0xAF	; 175
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e8       	ldi	r26, 0x80	; 128
    22b4:	bf e3       	ldi	r27, 0x3F	; 63
    22b6:	80 83       	st	Z, r24
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	a2 83       	std	Z+2, r26	; 0x02
    22bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	8e 01       	movw	r16, r28
    22c0:	03 5b       	subi	r16, 0xB3	; 179
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	fe 01       	movw	r30, r28
    22c6:	ef 5a       	subi	r30, 0xAF	; 175
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	f8 01       	movw	r30, r16
    22e4:	80 83       	st	Z, r24
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	a2 83       	std	Z+2, r26	; 0x02
    22ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ec:	fe 01       	movw	r30, r28
    22ee:	e3 5b       	subi	r30, 0xB3	; 179
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	44 f4       	brge	.+16     	; 0x231a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    230a:	fe 01       	movw	r30, r28
    230c:	e5 5b       	subi	r30, 0xB5	; 181
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	91 83       	std	Z+1, r25	; 0x01
    2316:	80 83       	st	Z, r24
    2318:	64 c0       	rjmp	.+200    	; 0x23e2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    231a:	fe 01       	movw	r30, r28
    231c:	e3 5b       	subi	r30, 0xB3	; 179
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	0c f0       	brlt	.+2      	; 0x233a <LCD_displayCharacter+0x22e>
    2338:	43 c0       	rjmp	.+134    	; 0x23c0 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233a:	fe 01       	movw	r30, r28
    233c:	ef 5a       	subi	r30, 0xAF	; 175
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	8e 01       	movw	r16, r28
    235a:	05 5b       	subi	r16, 0xB5	; 181
    235c:	1f 4f       	sbci	r17, 0xFF	; 255
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	f8 01       	movw	r30, r16
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	80 83       	st	Z, r24
    2370:	1f c0       	rjmp	.+62     	; 0x23b0 <LCD_displayCharacter+0x2a4>
    2372:	fe 01       	movw	r30, r28
    2374:	e7 5b       	subi	r30, 0xB7	; 183
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
    2380:	fe 01       	movw	r30, r28
    2382:	e7 5b       	subi	r30, 0xB7	; 183
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_displayCharacter+0x27e>
    238e:	fe 01       	movw	r30, r28
    2390:	e7 5b       	subi	r30, 0xB7	; 183
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	de 01       	movw	r26, r28
    239a:	a5 5b       	subi	r26, 0xB5	; 181
    239c:	bf 4f       	sbci	r27, 0xFF	; 255
    239e:	fe 01       	movw	r30, r28
    23a0:	e5 5b       	subi	r30, 0xB5	; 181
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	11 96       	adiw	r26, 0x01	; 1
    23ac:	9c 93       	st	X, r25
    23ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e5 5b       	subi	r30, 0xB5	; 181
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	d1 f6       	brne	.-76     	; 0x2372 <LCD_displayCharacter+0x266>
    23be:	27 c0       	rjmp	.+78     	; 0x240e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	8e 01       	movw	r16, r28
    23c2:	05 5b       	subi	r16, 0xB5	; 181
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	fe 01       	movw	r30, r28
    23c8:	e3 5b       	subi	r30, 0xB3	; 179
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	f8 01       	movw	r30, r16
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	80 83       	st	Z, r24
    23e2:	de 01       	movw	r26, r28
    23e4:	a9 5b       	subi	r26, 0xB9	; 185
    23e6:	bf 4f       	sbci	r27, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e5 5b       	subi	r30, 0xB5	; 181
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	8d 93       	st	X+, r24
    23f4:	9c 93       	st	X, r25
    23f6:	fe 01       	movw	r30, r28
    23f8:	e9 5b       	subi	r30, 0xB9	; 185
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	91 81       	ldd	r25, Z+1	; 0x01
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <LCD_displayCharacter+0x2f4>
    2404:	fe 01       	movw	r30, r28
    2406:	e9 5b       	subi	r30, 0xB9	; 185
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    240e:	fe 01       	movw	r30, r28
    2410:	ed 59       	subi	r30, 0x9D	; 157
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	80 81       	ld	r24, Z
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	80 71       	andi	r24, 0x10	; 16
    241c:	90 70       	andi	r25, 0x00	; 0
    241e:	95 95       	asr	r25
    2420:	87 95       	ror	r24
    2422:	95 95       	asr	r25
    2424:	87 95       	ror	r24
    2426:	95 95       	asr	r25
    2428:	87 95       	ror	r24
    242a:	95 95       	asr	r25
    242c:	87 95       	ror	r24
    242e:	98 2f       	mov	r25, r24
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	63 e0       	ldi	r22, 0x03	; 3
    2434:	49 2f       	mov	r20, r25
    2436:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    243a:	fe 01       	movw	r30, r28
    243c:	ed 59       	subi	r30, 0x9D	; 157
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	80 72       	andi	r24, 0x20	; 32
    2448:	90 70       	andi	r25, 0x00	; 0
    244a:	95 95       	asr	r25
    244c:	87 95       	ror	r24
    244e:	95 95       	asr	r25
    2450:	87 95       	ror	r24
    2452:	95 95       	asr	r25
    2454:	87 95       	ror	r24
    2456:	95 95       	asr	r25
    2458:	87 95       	ror	r24
    245a:	95 95       	asr	r25
    245c:	87 95       	ror	r24
    245e:	98 2f       	mov	r25, r24
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	64 e0       	ldi	r22, 0x04	; 4
    2464:	49 2f       	mov	r20, r25
    2466:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    246a:	fe 01       	movw	r30, r28
    246c:	ed 59       	subi	r30, 0x9D	; 157
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 81       	ld	r24, Z
    2472:	88 2f       	mov	r24, r24
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	80 74       	andi	r24, 0x40	; 64
    2478:	90 70       	andi	r25, 0x00	; 0
    247a:	08 2e       	mov	r0, r24
    247c:	89 2f       	mov	r24, r25
    247e:	00 0c       	add	r0, r0
    2480:	88 1f       	adc	r24, r24
    2482:	99 0b       	sbc	r25, r25
    2484:	00 0c       	add	r0, r0
    2486:	88 1f       	adc	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	98 2f       	mov	r25, r24
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	65 e0       	ldi	r22, 0x05	; 5
    2490:	49 2f       	mov	r20, r25
    2492:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2496:	fe 01       	movw	r30, r28
    2498:	ed 59       	subi	r30, 0x9D	; 157
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	98 2f       	mov	r25, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	99 27       	eor	r25, r25
    24a4:	99 1f       	adc	r25, r25
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	66 e0       	ldi	r22, 0x06	; 6
    24aa:	49 2f       	mov	r20, r25
    24ac:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    24b0:	fe 01       	movw	r30, r28
    24b2:	ed 5b       	subi	r30, 0xBD	; 189
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	a0 e8       	ldi	r26, 0x80	; 128
    24bc:	bf e3       	ldi	r27, 0x3F	; 63
    24be:	80 83       	st	Z, r24
    24c0:	91 83       	std	Z+1, r25	; 0x01
    24c2:	a2 83       	std	Z+2, r26	; 0x02
    24c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c6:	8e 01       	movw	r16, r28
    24c8:	01 5c       	subi	r16, 0xC1	; 193
    24ca:	1f 4f       	sbci	r17, 0xFF	; 255
    24cc:	fe 01       	movw	r30, r28
    24ce:	ed 5b       	subi	r30, 0xBD	; 189
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4a ef       	ldi	r20, 0xFA	; 250
    24e0:	54 e4       	ldi	r21, 0x44	; 68
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	f8 01       	movw	r30, r16
    24ec:	80 83       	st	Z, r24
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	a2 83       	std	Z+2, r26	; 0x02
    24f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f4:	fe 01       	movw	r30, r28
    24f6:	ff 96       	adiw	r30, 0x3f	; 63
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9e af       	std	Y+62, r25	; 0x3e
    2516:	8d af       	std	Y+61, r24	; 0x3d
    2518:	46 c0       	rjmp	.+140    	; 0x25a6 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    251a:	fe 01       	movw	r30, r28
    251c:	ff 96       	adiw	r30, 0x3f	; 63
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	64 f5       	brge	.+88     	; 0x258e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2536:	fe 01       	movw	r30, r28
    2538:	ed 5b       	subi	r30, 0xBD	; 189
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e2       	ldi	r20, 0x20	; 32
    254a:	51 e4       	ldi	r21, 0x41	; 65
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9e af       	std	Y+62, r25	; 0x3e
    2562:	8d af       	std	Y+61, r24	; 0x3d
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <LCD_displayCharacter+0x478>
    2566:	88 ec       	ldi	r24, 0xC8	; 200
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9c af       	std	Y+60, r25	; 0x3c
    256c:	8b af       	std	Y+59, r24	; 0x3b
    256e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2570:	9c ad       	ldd	r25, Y+60	; 0x3c
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_displayCharacter+0x466>
    2576:	9c af       	std	Y+60, r25	; 0x3c
    2578:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257a:	8d ad       	ldd	r24, Y+61	; 0x3d
    257c:	9e ad       	ldd	r25, Y+62	; 0x3e
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	9e af       	std	Y+62, r25	; 0x3e
    2582:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2584:	8d ad       	ldd	r24, Y+61	; 0x3d
    2586:	9e ad       	ldd	r25, Y+62	; 0x3e
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	69 f7       	brne	.-38     	; 0x2566 <LCD_displayCharacter+0x45a>
    258c:	16 c0       	rjmp	.+44     	; 0x25ba <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258e:	fe 01       	movw	r30, r28
    2590:	ff 96       	adiw	r30, 0x3f	; 63
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9e af       	std	Y+62, r25	; 0x3e
    25a4:	8d af       	std	Y+61, r24	; 0x3d
    25a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    25aa:	9a af       	std	Y+58, r25	; 0x3a
    25ac:	89 af       	std	Y+57, r24	; 0x39
    25ae:	89 ad       	ldd	r24, Y+57	; 0x39
    25b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_displayCharacter+0x4a6>
    25b6:	9a af       	std	Y+58, r25	; 0x3a
    25b8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	62 e0       	ldi	r22, 0x02	; 2
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e8       	ldi	r26, 0x80	; 128
    25ca:	bf e3       	ldi	r27, 0x3F	; 63
    25cc:	8d ab       	std	Y+53, r24	; 0x35
    25ce:	9e ab       	std	Y+54, r25	; 0x36
    25d0:	af ab       	std	Y+55, r26	; 0x37
    25d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	6d a9       	ldd	r22, Y+53	; 0x35
    25d6:	7e a9       	ldd	r23, Y+54	; 0x36
    25d8:	8f a9       	ldd	r24, Y+55	; 0x37
    25da:	98 ad       	ldd	r25, Y+56	; 0x38
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a ef       	ldi	r20, 0xFA	; 250
    25e2:	54 e4       	ldi	r21, 0x44	; 68
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	89 ab       	std	Y+49, r24	; 0x31
    25ee:	9a ab       	std	Y+50, r25	; 0x32
    25f0:	ab ab       	std	Y+51, r26	; 0x33
    25f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25f4:	69 a9       	ldd	r22, Y+49	; 0x31
    25f6:	7a a9       	ldd	r23, Y+50	; 0x32
    25f8:	8b a9       	ldd	r24, Y+51	; 0x33
    25fa:	9c a9       	ldd	r25, Y+52	; 0x34
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	98 ab       	std	Y+48, r25	; 0x30
    2612:	8f a7       	std	Y+47, r24	; 0x2f
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2616:	69 a9       	ldd	r22, Y+49	; 0x31
    2618:	7a a9       	ldd	r23, Y+50	; 0x32
    261a:	8b a9       	ldd	r24, Y+51	; 0x33
    261c:	9c a9       	ldd	r25, Y+52	; 0x34
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	6d a9       	ldd	r22, Y+53	; 0x35
    2630:	7e a9       	ldd	r23, Y+54	; 0x36
    2632:	8f a9       	ldd	r24, Y+55	; 0x37
    2634:	98 ad       	ldd	r25, Y+56	; 0x38
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	98 ab       	std	Y+48, r25	; 0x30
    2654:	8f a7       	std	Y+47, r24	; 0x2f
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <LCD_displayCharacter+0x56a>
    2658:	88 ec       	ldi	r24, 0xC8	; 200
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9e a7       	std	Y+46, r25	; 0x2e
    265e:	8d a7       	std	Y+45, r24	; 0x2d
    2660:	8d a5       	ldd	r24, Y+45	; 0x2d
    2662:	9e a5       	ldd	r25, Y+46	; 0x2e
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_displayCharacter+0x558>
    2668:	9e a7       	std	Y+46, r25	; 0x2e
    266a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8f a5       	ldd	r24, Y+47	; 0x2f
    266e:	98 a9       	ldd	r25, Y+48	; 0x30
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	98 ab       	std	Y+48, r25	; 0x30
    2674:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8f a5       	ldd	r24, Y+47	; 0x2f
    2678:	98 a9       	ldd	r25, Y+48	; 0x30
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <LCD_displayCharacter+0x54c>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	69 a9       	ldd	r22, Y+49	; 0x31
    2682:	7a a9       	ldd	r23, Y+50	; 0x32
    2684:	8b a9       	ldd	r24, Y+51	; 0x33
    2686:	9c a9       	ldd	r25, Y+52	; 0x34
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	98 ab       	std	Y+48, r25	; 0x30
    2692:	8f a7       	std	Y+47, r24	; 0x2f
    2694:	8f a5       	ldd	r24, Y+47	; 0x2f
    2696:	98 a9       	ldd	r25, Y+48	; 0x30
    2698:	9c a7       	std	Y+44, r25	; 0x2c
    269a:	8b a7       	std	Y+43, r24	; 0x2b
    269c:	8b a5       	ldd	r24, Y+43	; 0x2b
    269e:	9c a5       	ldd	r25, Y+44	; 0x2c
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_displayCharacter+0x594>
    26a4:	9c a7       	std	Y+44, r25	; 0x2c
    26a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	62 e0       	ldi	r22, 0x02	; 2
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e8       	ldi	r26, 0x80	; 128
    26b8:	bf e3       	ldi	r27, 0x3F	; 63
    26ba:	8f a3       	std	Y+39, r24	; 0x27
    26bc:	98 a7       	std	Y+40, r25	; 0x28
    26be:	a9 a7       	std	Y+41, r26	; 0x29
    26c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6f a1       	ldd	r22, Y+39	; 0x27
    26c4:	78 a5       	ldd	r23, Y+40	; 0x28
    26c6:	89 a5       	ldd	r24, Y+41	; 0x29
    26c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a ef       	ldi	r20, 0xFA	; 250
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8b a3       	std	Y+35, r24	; 0x23
    26dc:	9c a3       	std	Y+36, r25	; 0x24
    26de:	ad a3       	std	Y+37, r26	; 0x25
    26e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9a a3       	std	Y+34, r25	; 0x22
    2700:	89 a3       	std	Y+33, r24	; 0x21
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2704:	6b a1       	ldd	r22, Y+35	; 0x23
    2706:	7c a1       	ldd	r23, Y+36	; 0x24
    2708:	8d a1       	ldd	r24, Y+37	; 0x25
    270a:	9e a1       	ldd	r25, Y+38	; 0x26
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6f a1       	ldd	r22, Y+39	; 0x27
    271e:	78 a5       	ldd	r23, Y+40	; 0x28
    2720:	89 a5       	ldd	r24, Y+41	; 0x29
    2722:	9a a5       	ldd	r25, Y+42	; 0x2a
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9a a3       	std	Y+34, r25	; 0x22
    2742:	89 a3       	std	Y+33, r24	; 0x21
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <LCD_displayCharacter+0x658>
    2746:	88 ec       	ldi	r24, 0xC8	; 200
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	98 a3       	std	Y+32, r25	; 0x20
    274c:	8f 8f       	std	Y+31, r24	; 0x1f
    274e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2750:	98 a1       	ldd	r25, Y+32	; 0x20
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_displayCharacter+0x646>
    2756:	98 a3       	std	Y+32, r25	; 0x20
    2758:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	89 a1       	ldd	r24, Y+33	; 0x21
    275c:	9a a1       	ldd	r25, Y+34	; 0x22
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9a a3       	std	Y+34, r25	; 0x22
    2762:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	89 a1       	ldd	r24, Y+33	; 0x21
    2766:	9a a1       	ldd	r25, Y+34	; 0x22
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <LCD_displayCharacter+0x63a>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6b a1       	ldd	r22, Y+35	; 0x23
    2770:	7c a1       	ldd	r23, Y+36	; 0x24
    2772:	8d a1       	ldd	r24, Y+37	; 0x25
    2774:	9e a1       	ldd	r25, Y+38	; 0x26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	89 a1       	ldd	r24, Y+33	; 0x21
    2784:	9a a1       	ldd	r25, Y+34	; 0x22
    2786:	9e 8f       	std	Y+30, r25	; 0x1e
    2788:	8d 8f       	std	Y+29, r24	; 0x1d
    278a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_displayCharacter+0x682>
    2792:	9e 8f       	std	Y+30, r25	; 0x1e
    2794:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2796:	fe 01       	movw	r30, r28
    2798:	ed 59       	subi	r30, 0x9D	; 157
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	98 2f       	mov	r25, r24
    27a0:	91 70       	andi	r25, 0x01	; 1
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	63 e0       	ldi	r22, 0x03	; 3
    27a6:	49 2f       	mov	r20, r25
    27a8:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    27ac:	fe 01       	movw	r30, r28
    27ae:	ed 59       	subi	r30, 0x9D	; 157
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	88 2f       	mov	r24, r24
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	82 70       	andi	r24, 0x02	; 2
    27ba:	90 70       	andi	r25, 0x00	; 0
    27bc:	95 95       	asr	r25
    27be:	87 95       	ror	r24
    27c0:	98 2f       	mov	r25, r24
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	64 e0       	ldi	r22, 0x04	; 4
    27c6:	49 2f       	mov	r20, r25
    27c8:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    27cc:	fe 01       	movw	r30, r28
    27ce:	ed 59       	subi	r30, 0x9D	; 157
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	88 2f       	mov	r24, r24
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	84 70       	andi	r24, 0x04	; 4
    27da:	90 70       	andi	r25, 0x00	; 0
    27dc:	95 95       	asr	r25
    27de:	87 95       	ror	r24
    27e0:	95 95       	asr	r25
    27e2:	87 95       	ror	r24
    27e4:	98 2f       	mov	r25, r24
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	65 e0       	ldi	r22, 0x05	; 5
    27ea:	49 2f       	mov	r20, r25
    27ec:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    27f0:	fe 01       	movw	r30, r28
    27f2:	ed 59       	subi	r30, 0x9D	; 157
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 81       	ld	r24, Z
    27f8:	88 2f       	mov	r24, r24
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	88 70       	andi	r24, 0x08	; 8
    27fe:	90 70       	andi	r25, 0x00	; 0
    2800:	95 95       	asr	r25
    2802:	87 95       	ror	r24
    2804:	95 95       	asr	r25
    2806:	87 95       	ror	r24
    2808:	95 95       	asr	r25
    280a:	87 95       	ror	r24
    280c:	98 2f       	mov	r25, r24
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	66 e0       	ldi	r22, 0x06	; 6
    2812:	49 2f       	mov	r20, r25
    2814:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	a0 e8       	ldi	r26, 0x80	; 128
    281e:	bf e3       	ldi	r27, 0x3F	; 63
    2820:	89 8f       	std	Y+25, r24	; 0x19
    2822:	9a 8f       	std	Y+26, r25	; 0x1a
    2824:	ab 8f       	std	Y+27, r26	; 0x1b
    2826:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2828:	69 8d       	ldd	r22, Y+25	; 0x19
    282a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	4a ef       	ldi	r20, 0xFA	; 250
    2836:	54 e4       	ldi	r21, 0x44	; 68
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	8d 8b       	std	Y+21, r24	; 0x15
    2842:	9e 8b       	std	Y+22, r25	; 0x16
    2844:	af 8b       	std	Y+23, r26	; 0x17
    2846:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2848:	6d 89       	ldd	r22, Y+21	; 0x15
    284a:	7e 89       	ldd	r23, Y+22	; 0x16
    284c:	8f 89       	ldd	r24, Y+23	; 0x17
    284e:	98 8d       	ldd	r25, Y+24	; 0x18
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e8       	ldi	r20, 0x80	; 128
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285c:	88 23       	and	r24, r24
    285e:	2c f4       	brge	.+10     	; 0x286a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9c 8b       	std	Y+20, r25	; 0x14
    2866:	8b 8b       	std	Y+19, r24	; 0x13
    2868:	3f c0       	rjmp	.+126    	; 0x28e8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    286a:	6d 89       	ldd	r22, Y+21	; 0x15
    286c:	7e 89       	ldd	r23, Y+22	; 0x16
    286e:	8f 89       	ldd	r24, Y+23	; 0x17
    2870:	98 8d       	ldd	r25, Y+24	; 0x18
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	3f ef       	ldi	r19, 0xFF	; 255
    2876:	4f e7       	ldi	r20, 0x7F	; 127
    2878:	57 e4       	ldi	r21, 0x47	; 71
    287a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287e:	18 16       	cp	r1, r24
    2880:	4c f5       	brge	.+82     	; 0x28d4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2882:	69 8d       	ldd	r22, Y+25	; 0x19
    2884:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2886:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2888:	9c 8d       	ldd	r25, Y+28	; 0x1c
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e2       	ldi	r20, 0x20	; 32
    2890:	51 e4       	ldi	r21, 0x41	; 65
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	bc 01       	movw	r22, r24
    289c:	cd 01       	movw	r24, r26
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9c 8b       	std	Y+20, r25	; 0x14
    28a8:	8b 8b       	std	Y+19, r24	; 0x13
    28aa:	0f c0       	rjmp	.+30     	; 0x28ca <LCD_displayCharacter+0x7be>
    28ac:	88 ec       	ldi	r24, 0xC8	; 200
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9a 8b       	std	Y+18, r25	; 0x12
    28b2:	89 8b       	std	Y+17, r24	; 0x11
    28b4:	89 89       	ldd	r24, Y+17	; 0x11
    28b6:	9a 89       	ldd	r25, Y+18	; 0x12
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <LCD_displayCharacter+0x7ac>
    28bc:	9a 8b       	std	Y+18, r25	; 0x12
    28be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c0:	8b 89       	ldd	r24, Y+19	; 0x13
    28c2:	9c 89       	ldd	r25, Y+20	; 0x14
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	9c 8b       	std	Y+20, r25	; 0x14
    28c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ca:	8b 89       	ldd	r24, Y+19	; 0x13
    28cc:	9c 89       	ldd	r25, Y+20	; 0x14
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	69 f7       	brne	.-38     	; 0x28ac <LCD_displayCharacter+0x7a0>
    28d2:	14 c0       	rjmp	.+40     	; 0x28fc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	6d 89       	ldd	r22, Y+21	; 0x15
    28d6:	7e 89       	ldd	r23, Y+22	; 0x16
    28d8:	8f 89       	ldd	r24, Y+23	; 0x17
    28da:	98 8d       	ldd	r25, Y+24	; 0x18
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9c 8b       	std	Y+20, r25	; 0x14
    28e6:	8b 8b       	std	Y+19, r24	; 0x13
    28e8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ea:	9c 89       	ldd	r25, Y+20	; 0x14
    28ec:	98 8b       	std	Y+16, r25	; 0x10
    28ee:	8f 87       	std	Y+15, r24	; 0x0f
    28f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f2:	98 89       	ldd	r25, Y+16	; 0x10
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <LCD_displayCharacter+0x7e8>
    28f8:	98 8b       	std	Y+16, r25	; 0x10
    28fa:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	a0 e8       	ldi	r26, 0x80	; 128
    290c:	bf e3       	ldi	r27, 0x3F	; 63
    290e:	8b 87       	std	Y+11, r24	; 0x0b
    2910:	9c 87       	std	Y+12, r25	; 0x0c
    2912:	ad 87       	std	Y+13, r26	; 0x0d
    2914:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2916:	6b 85       	ldd	r22, Y+11	; 0x0b
    2918:	7c 85       	ldd	r23, Y+12	; 0x0c
    291a:	8d 85       	ldd	r24, Y+13	; 0x0d
    291c:	9e 85       	ldd	r25, Y+14	; 0x0e
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	4a ef       	ldi	r20, 0xFA	; 250
    2924:	54 e4       	ldi	r21, 0x44	; 68
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	8f 83       	std	Y+7, r24	; 0x07
    2930:	98 87       	std	Y+8, r25	; 0x08
    2932:	a9 87       	std	Y+9, r26	; 0x09
    2934:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2936:	6f 81       	ldd	r22, Y+7	; 0x07
    2938:	78 85       	ldd	r23, Y+8	; 0x08
    293a:	89 85       	ldd	r24, Y+9	; 0x09
    293c:	9a 85       	ldd	r25, Y+10	; 0x0a
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e8       	ldi	r20, 0x80	; 128
    2944:	5f e3       	ldi	r21, 0x3F	; 63
    2946:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    294a:	88 23       	and	r24, r24
    294c:	2c f4       	brge	.+10     	; 0x2958 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	9e 83       	std	Y+6, r25	; 0x06
    2954:	8d 83       	std	Y+5, r24	; 0x05
    2956:	3f c0       	rjmp	.+126    	; 0x29d6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2958:	6f 81       	ldd	r22, Y+7	; 0x07
    295a:	78 85       	ldd	r23, Y+8	; 0x08
    295c:	89 85       	ldd	r24, Y+9	; 0x09
    295e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	3f ef       	ldi	r19, 0xFF	; 255
    2964:	4f e7       	ldi	r20, 0x7F	; 127
    2966:	57 e4       	ldi	r21, 0x47	; 71
    2968:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296c:	18 16       	cp	r1, r24
    296e:	4c f5       	brge	.+82     	; 0x29c2 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2970:	6b 85       	ldd	r22, Y+11	; 0x0b
    2972:	7c 85       	ldd	r23, Y+12	; 0x0c
    2974:	8d 85       	ldd	r24, Y+13	; 0x0d
    2976:	9e 85       	ldd	r25, Y+14	; 0x0e
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e2       	ldi	r20, 0x20	; 32
    297e:	51 e4       	ldi	r21, 0x41	; 65
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	0f c0       	rjmp	.+30     	; 0x29b8 <LCD_displayCharacter+0x8ac>
    299a:	88 ec       	ldi	r24, 0xC8	; 200
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	8b 83       	std	Y+3, r24	; 0x03
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	9c 81       	ldd	r25, Y+4	; 0x04
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <LCD_displayCharacter+0x89a>
    29aa:	9c 83       	std	Y+4, r25	; 0x04
    29ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	69 f7       	brne	.-38     	; 0x299a <LCD_displayCharacter+0x88e>
    29c0:	14 c0       	rjmp	.+40     	; 0x29ea <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c2:	6f 81       	ldd	r22, Y+7	; 0x07
    29c4:	78 85       	ldd	r23, Y+8	; 0x08
    29c6:	89 85       	ldd	r24, Y+9	; 0x09
    29c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
    29d8:	9e 81       	ldd	r25, Y+6	; 0x06
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <LCD_displayCharacter+0x8d6>
    29e6:	9a 83       	std	Y+2, r25	; 0x02
    29e8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29ea:	cd 59       	subi	r28, 0x9D	; 157
    29ec:	df 4f       	sbci	r29, 0xFF	; 255
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	1f 91       	pop	r17
    29fe:	0f 91       	pop	r16
    2a00:	08 95       	ret

00002a02 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <LCD_displayString+0x6>
    2a08:	0f 92       	push	r0
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	9b 83       	std	Y+3, r25	; 0x03
    2a10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a12:	19 82       	std	Y+1, r1	; 0x01
    2a14:	0e c0       	rjmp	.+28     	; 0x2a32 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	28 2f       	mov	r18, r24
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	fc 01       	movw	r30, r24
    2a22:	e2 0f       	add	r30, r18
    2a24:	f3 1f       	adc	r31, r19
    2a26:	80 81       	ld	r24, Z
    2a28:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayCharacter>
		i++;
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	e2 0f       	add	r30, r18
    2a40:	f3 1f       	adc	r31, r19
    2a42:	80 81       	ld	r24, Z
    2a44:	88 23       	and	r24, r24
    2a46:	39 f7       	brne	.-50     	; 0x2a16 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <LCD_moveCursor+0x6>
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <LCD_moveCursor+0x8>
    2a5c:	0f 92       	push	r0
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	8a 83       	std	Y+2, r24	; 0x02
    2a64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	3d 83       	std	Y+5, r19	; 0x05
    2a6e:	2c 83       	std	Y+4, r18	; 0x04
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	91 05       	cpc	r25, r1
    2a78:	c1 f0       	breq	.+48     	; 0x2aaa <LCD_moveCursor+0x56>
    2a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a7e:	22 30       	cpi	r18, 0x02	; 2
    2a80:	31 05       	cpc	r19, r1
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <LCD_moveCursor+0x3a>
    2a84:	8c 81       	ldd	r24, Y+4	; 0x04
    2a86:	9d 81       	ldd	r25, Y+5	; 0x05
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	61 f0       	breq	.+24     	; 0x2aa4 <LCD_moveCursor+0x50>
    2a8c:	19 c0       	rjmp	.+50     	; 0x2ac0 <LCD_moveCursor+0x6c>
    2a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a90:	3d 81       	ldd	r19, Y+5	; 0x05
    2a92:	22 30       	cpi	r18, 0x02	; 2
    2a94:	31 05       	cpc	r19, r1
    2a96:	69 f0       	breq	.+26     	; 0x2ab2 <LCD_moveCursor+0x5e>
    2a98:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9c:	83 30       	cpi	r24, 0x03	; 3
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	61 f0       	breq	.+24     	; 0x2aba <LCD_moveCursor+0x66>
    2aa2:	0e c0       	rjmp	.+28     	; 0x2ac0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	0b c0       	rjmp	.+22     	; 0x2ac0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	80 5c       	subi	r24, 0xC0	; 192
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	07 c0       	rjmp	.+14     	; 0x2ac0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	80 5f       	subi	r24, 0xF0	; 240
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	03 c0       	rjmp	.+6      	; 0x2ac0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	80 5b       	subi	r24, 0xB0	; 176
    2abe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	80 68       	ori	r24, 0x80	; 128
    2ac4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_sendCommand>
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <LCD_displayStringRowColumn+0x6>
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <LCD_displayStringRowColumn+0x8>
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	6a 83       	std	Y+2, r22	; 0x02
    2ae8:	5c 83       	std	Y+4, r21	; 0x04
    2aea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	6a 81       	ldd	r22, Y+2	; 0x02
    2af0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
}
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	62 97       	sbiw	r28, 0x12	; 18
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b22:	89 89       	ldd	r24, Y+17	; 0x11
    2b24:	9a 89       	ldd	r25, Y+18	; 0x12
    2b26:	9e 01       	movw	r18, r28
    2b28:	2f 5f       	subi	r18, 0xFF	; 255
    2b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2c:	b9 01       	movw	r22, r18
    2b2e:	4a e0       	ldi	r20, 0x0A	; 10
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <itoa>
   LCD_displayString(buff); /* Display the string */
    2b36:	ce 01       	movw	r24, r28
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
}
    2b3e:	62 96       	adiw	r28, 0x12	; 18
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_sendCommand>
}
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <main>:

volatile static uint8 chances= 0;
volatile static uint8 ticks = 0;

int main(void)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	68 97       	sbiw	r28, 0x18	; 24
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
	/* initialise lcd and UART */
	LCD_init();
    2b78:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_init>
	UART_ConfigType UART_Config = {eghit , diabled , one_bit ,9600};
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	0f 96       	adiw	r24, 0x0f	; 15
    2b80:	9d 8b       	std	Y+21, r25	; 0x15
    2b82:	8c 8b       	std	Y+20, r24	; 0x14
    2b84:	ee ed       	ldi	r30, 0xDE	; 222
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	ff 8b       	std	Y+23, r31	; 0x17
    2b8a:	ee 8b       	std	Y+22, r30	; 0x16
    2b8c:	f5 e0       	ldi	r31, 0x05	; 5
    2b8e:	f8 8f       	std	Y+24, r31	; 0x18
    2b90:	ee 89       	ldd	r30, Y+22	; 0x16
    2b92:	ff 89       	ldd	r31, Y+23	; 0x17
    2b94:	00 80       	ld	r0, Z
    2b96:	8e 89       	ldd	r24, Y+22	; 0x16
    2b98:	9f 89       	ldd	r25, Y+23	; 0x17
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	9f 8b       	std	Y+23, r25	; 0x17
    2b9e:	8e 8b       	std	Y+22, r24	; 0x16
    2ba0:	ec 89       	ldd	r30, Y+20	; 0x14
    2ba2:	fd 89       	ldd	r31, Y+21	; 0x15
    2ba4:	00 82       	st	Z, r0
    2ba6:	8c 89       	ldd	r24, Y+20	; 0x14
    2ba8:	9d 89       	ldd	r25, Y+21	; 0x15
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	9d 8b       	std	Y+21, r25	; 0x15
    2bae:	8c 8b       	std	Y+20, r24	; 0x14
    2bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb2:	91 50       	subi	r25, 0x01	; 1
    2bb4:	98 8f       	std	Y+24, r25	; 0x18
    2bb6:	e8 8d       	ldd	r30, Y+24	; 0x18
    2bb8:	ee 23       	and	r30, r30
    2bba:	51 f7       	brne	.-44     	; 0x2b90 <main+0x2c>
	UART_init(&UART_Config);
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	0f 96       	adiw	r24, 0x0f	; 15
    2bc0:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <UART_init>
	/* set timer call back function */
	Timer1_setCallBack(timer_isr);
    2bc4:	80 e4       	ldi	r24, 0x40	; 64
    2bc6:	9e e1       	ldi	r25, 0x1E	; 30
    2bc8:	0e 94 75 06 	call	0xcea	; 0xcea <Timer1_setCallBack>
	/* enable global I bit */
	SREG |= (1<<7);
    2bcc:	af e5       	ldi	r26, 0x5F	; 95
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	ef e5       	ldi	r30, 0x5F	; 95
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	80 68       	ori	r24, 0x80	; 128
    2bd8:	8c 93       	st	X, r24
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	aa ef       	ldi	r26, 0xFA	; 250
    2be0:	b3 e4       	ldi	r27, 0x43	; 67
    2be2:	8b 87       	std	Y+11, r24	; 0x0b
    2be4:	9c 87       	std	Y+12, r25	; 0x0c
    2be6:	ad 87       	std	Y+13, r26	; 0x0d
    2be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a ef       	ldi	r20, 0xFA	; 250
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8f 83       	std	Y+7, r24	; 0x07
    2c04:	98 87       	std	Y+8, r25	; 0x08
    2c06:	a9 87       	std	Y+9, r26	; 0x09
    2c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0c:	78 85       	ldd	r23, Y+8	; 0x08
    2c0e:	89 85       	ldd	r24, Y+9	; 0x09
    2c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <main+0xc8>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <main+0x146>
	else if (__tmp > 65535)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <main+0x128>
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <main+0x116>
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <main+0x10a>
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <main+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <main+0x152>
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	/* wait util MC_2 be ready to communicate */
	while(UART_recieveByte() != MC2_READY){}
    2cbe:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    2cc2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc4:	e1 f7       	brne	.-8      	; 0x2cbe <main+0x15a>
	while(1)
	{
		Enter_Pass();
    2cc6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <Enter_Pass>
    2cca:	fd cf       	rjmp	.-6      	; 0x2cc6 <main+0x162>

00002ccc <Enter_Pass>:
	}
	return 0 ;
}
/* first enter function to get password consists of 5 numbers from the user */
void Enter_Pass(void)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	6e 97       	sbiw	r28, 0x1e	; 30
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(ENTER_PASS);
    2ce0:	80 ed       	ldi	r24, 0xD0	; 208
    2ce2:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
	LCD_moveCursor(0,0);
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_clearScreen();
    2cee:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass : ");
    2cf2:	80 e6       	ldi	r24, 0x60	; 96
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	LCD_moveCursor(1,0);
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	uint8 key , i ;
	/* get password of 5 numbers from keypad and send them to MC_2 */
	for(i=0 ; i<6;i++)
    2d02:	1d 8e       	std	Y+29, r1	; 0x1d
    2d04:	fa c0       	rjmp	.+500    	; 0x2efa <Enter_Pass+0x22e>
	{
	key = KEYPAD_getPressedKey();
    2d06:	0e 94 c5 09 	call	0x138a	; 0x138a <KEYPAD_getPressedKey>
    2d0a:	8e 8f       	std	Y+30, r24	; 0x1e
			if((key >= 0) && (key <= 9))
    2d0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d0e:	8a 30       	cpi	r24, 0x0A	; 10
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <Enter_Pass+0x48>
    2d12:	79 c0       	rjmp	.+242    	; 0x2e06 <Enter_Pass+0x13a>
			{
				LCD_displayCharacter('*');
    2d14:	8a e2       	ldi	r24, 0x2A	; 42
    2d16:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayCharacter>
				UART_sendByte(key);
    2d1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d1c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	a0 ea       	ldi	r26, 0xA0	; 160
    2d26:	b0 e4       	ldi	r27, 0x40	; 64
    2d28:	89 8f       	std	Y+25, r24	; 0x19
    2d2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d30:	69 8d       	ldd	r22, Y+25	; 0x19
    2d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4a ef       	ldi	r20, 0xFA	; 250
    2d3e:	54 e4       	ldi	r21, 0x44	; 68
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	8d 8b       	std	Y+21, r24	; 0x15
    2d4a:	9e 8b       	std	Y+22, r25	; 0x16
    2d4c:	af 8b       	std	Y+23, r26	; 0x17
    2d4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d50:	6d 89       	ldd	r22, Y+21	; 0x15
    2d52:	7e 89       	ldd	r23, Y+22	; 0x16
    2d54:	8f 89       	ldd	r24, Y+23	; 0x17
    2d56:	98 8d       	ldd	r25, Y+24	; 0x18
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 e8       	ldi	r20, 0x80	; 128
    2d5e:	5f e3       	ldi	r21, 0x3F	; 63
    2d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d64:	88 23       	and	r24, r24
    2d66:	2c f4       	brge	.+10     	; 0x2d72 <Enter_Pass+0xa6>
		__ticks = 1;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9c 8b       	std	Y+20, r25	; 0x14
    2d6e:	8b 8b       	std	Y+19, r24	; 0x13
    2d70:	3f c0       	rjmp	.+126    	; 0x2df0 <Enter_Pass+0x124>
	else if (__tmp > 65535)
    2d72:	6d 89       	ldd	r22, Y+21	; 0x15
    2d74:	7e 89       	ldd	r23, Y+22	; 0x16
    2d76:	8f 89       	ldd	r24, Y+23	; 0x17
    2d78:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	3f ef       	ldi	r19, 0xFF	; 255
    2d7e:	4f e7       	ldi	r20, 0x7F	; 127
    2d80:	57 e4       	ldi	r21, 0x47	; 71
    2d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d86:	18 16       	cp	r1, r24
    2d88:	4c f5       	brge	.+82     	; 0x2ddc <Enter_Pass+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e2       	ldi	r20, 0x20	; 32
    2d98:	51 e4       	ldi	r21, 0x41	; 65
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	9c 8b       	std	Y+20, r25	; 0x14
    2db0:	8b 8b       	std	Y+19, r24	; 0x13
    2db2:	0f c0       	rjmp	.+30     	; 0x2dd2 <Enter_Pass+0x106>
    2db4:	88 ec       	ldi	r24, 0xC8	; 200
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9a 8b       	std	Y+18, r25	; 0x12
    2dba:	89 8b       	std	Y+17, r24	; 0x11
    2dbc:	89 89       	ldd	r24, Y+17	; 0x11
    2dbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <Enter_Pass+0xf4>
    2dc4:	9a 8b       	std	Y+18, r25	; 0x12
    2dc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dca:	9c 89       	ldd	r25, Y+20	; 0x14
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	9c 8b       	std	Y+20, r25	; 0x14
    2dd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	69 f7       	brne	.-38     	; 0x2db4 <Enter_Pass+0xe8>
    2dda:	1a c0       	rjmp	.+52     	; 0x2e10 <Enter_Pass+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dde:	7e 89       	ldd	r23, Y+22	; 0x16
    2de0:	8f 89       	ldd	r24, Y+23	; 0x17
    2de2:	98 8d       	ldd	r25, Y+24	; 0x18
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9c 8b       	std	Y+20, r25	; 0x14
    2dee:	8b 8b       	std	Y+19, r24	; 0x13
    2df0:	8b 89       	ldd	r24, Y+19	; 0x13
    2df2:	9c 89       	ldd	r25, Y+20	; 0x14
    2df4:	98 8b       	std	Y+16, r25	; 0x10
    2df6:	8f 87       	std	Y+15, r24	; 0x0f
    2df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfa:	98 89       	ldd	r25, Y+16	; 0x10
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <Enter_Pass+0x130>
    2e00:	98 8b       	std	Y+16, r25	; 0x10
    2e02:	8f 87       	std	Y+15, r24	; 0x0f
    2e04:	05 c0       	rjmp	.+10     	; 0x2e10 <Enter_Pass+0x144>
				_delay_ms(5);
			}
			else if(key == ENTER)
    2e06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e08:	8d 30       	cpi	r24, 0x0D	; 13
    2e0a:	11 f4       	brne	.+4      	; 0x2e10 <Enter_Pass+0x144>
			{
				/* call re_enter_pass function when user press enter */
				Re_Enter_Pass();
    2e0c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <Re_Enter_Pass>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	aa ef       	ldi	r26, 0xFA	; 250
    2e16:	b3 e4       	ldi	r27, 0x43	; 67
    2e18:	8b 87       	std	Y+11, r24	; 0x0b
    2e1a:	9c 87       	std	Y+12, r25	; 0x0c
    2e1c:	ad 87       	std	Y+13, r26	; 0x0d
    2e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	4a ef       	ldi	r20, 0xFA	; 250
    2e2e:	54 e4       	ldi	r21, 0x44	; 68
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	8f 83       	std	Y+7, r24	; 0x07
    2e3a:	98 87       	std	Y+8, r25	; 0x08
    2e3c:	a9 87       	std	Y+9, r26	; 0x09
    2e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e8       	ldi	r20, 0x80	; 128
    2e4e:	5f e3       	ldi	r21, 0x3F	; 63
    2e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <Enter_Pass+0x196>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9e 83       	std	Y+6, r25	; 0x06
    2e5e:	8d 83       	std	Y+5, r24	; 0x05
    2e60:	3f c0       	rjmp	.+126    	; 0x2ee0 <Enter_Pass+0x214>
	else if (__tmp > 65535)
    2e62:	6f 81       	ldd	r22, Y+7	; 0x07
    2e64:	78 85       	ldd	r23, Y+8	; 0x08
    2e66:	89 85       	ldd	r24, Y+9	; 0x09
    2e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	4c f5       	brge	.+82     	; 0x2ecc <Enter_Pass+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e2       	ldi	r20, 0x20	; 32
    2e88:	51 e4       	ldi	r21, 0x41	; 65
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9e 83       	std	Y+6, r25	; 0x06
    2ea0:	8d 83       	std	Y+5, r24	; 0x05
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <Enter_Pass+0x1f6>
    2ea4:	88 ec       	ldi	r24, 0xC8	; 200
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9c 83       	std	Y+4, r25	; 0x04
    2eaa:	8b 83       	std	Y+3, r24	; 0x03
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <Enter_Pass+0x1e4>
    2eb4:	9c 83       	std	Y+4, r25	; 0x04
    2eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eba:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <Enter_Pass+0x1d8>
    2eca:	14 c0       	rjmp	.+40     	; 0x2ef4 <Enter_Pass+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9e 83       	std	Y+6, r25	; 0x06
    2ede:	8d 83       	std	Y+5, r24	; 0x05
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	9a 83       	std	Y+2, r25	; 0x02
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <Enter_Pass+0x220>
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Plz Enter Pass : ");
	LCD_moveCursor(1,0);
	uint8 key , i ;
	/* get password of 5 numbers from keypad and send them to MC_2 */
	for(i=0 ; i<6;i++)
    2ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef6:	8f 5f       	subi	r24, 0xFF	; 255
    2ef8:	8d 8f       	std	Y+29, r24	; 0x1d
    2efa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2efc:	86 30       	cpi	r24, 0x06	; 6
    2efe:	08 f4       	brcc	.+2      	; 0x2f02 <Enter_Pass+0x236>
    2f00:	02 cf       	rjmp	.-508    	; 0x2d06 <Enter_Pass+0x3a>
				/* call re_enter_pass function when user press enter */
				Re_Enter_Pass();
			}
			_delay_ms(500);
	}
}
    2f02:	6e 96       	adiw	r28, 0x1e	; 30
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	08 95       	ret

00002f14 <Re_Enter_Pass>:
/* get re_password 5 numbers from keypad and send them to MC_2 */
void Re_Enter_Pass(void)
{
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	ac 97       	sbiw	r28, 0x2c	; 44
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(RE_ENTER_PASS);
    2f28:	80 ec       	ldi	r24, 0xC0	; 192
    2f2a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
	LCD_moveCursor(0,0);
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_clearScreen();
    2f36:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
	LCD_displayString("Plz Re_Enter the ");
    2f3a:	82 e7       	ldi	r24, 0x72	; 114
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	LCD_moveCursor(1,0);
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_displayString("same pass:");
    2f4a:	84 e8       	ldi	r24, 0x84	; 132
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	uint8 key , i ;
	/* get re_password of 5 numbers from keypad and send them to MC_2 */
		for(i=0 ; i<6;i++)
    2f52:	1b a6       	std	Y+43, r1	; 0x2b
    2f54:	70 c1       	rjmp	.+736    	; 0x3236 <Re_Enter_Pass+0x322>
		{
		key = KEYPAD_getPressedKey();
    2f56:	0e 94 c5 09 	call	0x138a	; 0x138a <KEYPAD_getPressedKey>
    2f5a:	8c a7       	std	Y+44, r24	; 0x2c
				if((key >= 0) && (key <= 9))
    2f5c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f5e:	8a 30       	cpi	r24, 0x0A	; 10
    2f60:	08 f0       	brcs	.+2      	; 0x2f64 <Re_Enter_Pass+0x50>
    2f62:	79 c0       	rjmp	.+242    	; 0x3056 <Re_Enter_Pass+0x142>
				{
					LCD_displayCharacter('*');
    2f64:	8a e2       	ldi	r24, 0x2A	; 42
    2f66:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayCharacter>
					UART_sendByte(key);
    2f6a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f6c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	a0 ea       	ldi	r26, 0xA0	; 160
    2f76:	b0 e4       	ldi	r27, 0x40	; 64
    2f78:	8f a3       	std	Y+39, r24	; 0x27
    2f7a:	98 a7       	std	Y+40, r25	; 0x28
    2f7c:	a9 a7       	std	Y+41, r26	; 0x29
    2f7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f80:	6f a1       	ldd	r22, Y+39	; 0x27
    2f82:	78 a5       	ldd	r23, Y+40	; 0x28
    2f84:	89 a5       	ldd	r24, Y+41	; 0x29
    2f86:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	4a ef       	ldi	r20, 0xFA	; 250
    2f8e:	54 e4       	ldi	r21, 0x44	; 68
    2f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	8b a3       	std	Y+35, r24	; 0x23
    2f9a:	9c a3       	std	Y+36, r25	; 0x24
    2f9c:	ad a3       	std	Y+37, r26	; 0x25
    2f9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e8       	ldi	r20, 0x80	; 128
    2fae:	5f e3       	ldi	r21, 0x3F	; 63
    2fb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fb4:	88 23       	and	r24, r24
    2fb6:	2c f4       	brge	.+10     	; 0x2fc2 <Re_Enter_Pass+0xae>
		__ticks = 1;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9a a3       	std	Y+34, r25	; 0x22
    2fbe:	89 a3       	std	Y+33, r24	; 0x21
    2fc0:	3f c0       	rjmp	.+126    	; 0x3040 <Re_Enter_Pass+0x12c>
	else if (__tmp > 65535)
    2fc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	3f ef       	ldi	r19, 0xFF	; 255
    2fce:	4f e7       	ldi	r20, 0x7F	; 127
    2fd0:	57 e4       	ldi	r21, 0x47	; 71
    2fd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fd6:	18 16       	cp	r1, r24
    2fd8:	4c f5       	brge	.+82     	; 0x302c <Re_Enter_Pass+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fda:	6f a1       	ldd	r22, Y+39	; 0x27
    2fdc:	78 a5       	ldd	r23, Y+40	; 0x28
    2fde:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e2       	ldi	r20, 0x20	; 32
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9a a3       	std	Y+34, r25	; 0x22
    3000:	89 a3       	std	Y+33, r24	; 0x21
    3002:	0f c0       	rjmp	.+30     	; 0x3022 <Re_Enter_Pass+0x10e>
    3004:	88 ec       	ldi	r24, 0xC8	; 200
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	98 a3       	std	Y+32, r25	; 0x20
    300a:	8f 8f       	std	Y+31, r24	; 0x1f
    300c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    300e:	98 a1       	ldd	r25, Y+32	; 0x20
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <Re_Enter_Pass+0xfc>
    3014:	98 a3       	std	Y+32, r25	; 0x20
    3016:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3018:	89 a1       	ldd	r24, Y+33	; 0x21
    301a:	9a a1       	ldd	r25, Y+34	; 0x22
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	9a a3       	std	Y+34, r25	; 0x22
    3020:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	89 a1       	ldd	r24, Y+33	; 0x21
    3024:	9a a1       	ldd	r25, Y+34	; 0x22
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	69 f7       	brne	.-38     	; 0x3004 <Re_Enter_Pass+0xf0>
    302a:	90 c0       	rjmp	.+288    	; 0x314c <Re_Enter_Pass+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	6b a1       	ldd	r22, Y+35	; 0x23
    302e:	7c a1       	ldd	r23, Y+36	; 0x24
    3030:	8d a1       	ldd	r24, Y+37	; 0x25
    3032:	9e a1       	ldd	r25, Y+38	; 0x26
    3034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	9a a3       	std	Y+34, r25	; 0x22
    303e:	89 a3       	std	Y+33, r24	; 0x21
    3040:	89 a1       	ldd	r24, Y+33	; 0x21
    3042:	9a a1       	ldd	r25, Y+34	; 0x22
    3044:	9e 8f       	std	Y+30, r25	; 0x1e
    3046:	8d 8f       	std	Y+29, r24	; 0x1d
    3048:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <Re_Enter_Pass+0x138>
    3050:	9e 8f       	std	Y+30, r25	; 0x1e
    3052:	8d 8f       	std	Y+29, r24	; 0x1d
    3054:	7b c0       	rjmp	.+246    	; 0x314c <Re_Enter_Pass+0x238>
					_delay_ms(5);
				}
				else if(key == ENTER)
    3056:	8c a5       	ldd	r24, Y+44	; 0x2c
    3058:	8d 30       	cpi	r24, 0x0D	; 13
    305a:	09 f0       	breq	.+2      	; 0x305e <Re_Enter_Pass+0x14a>
    305c:	77 c0       	rjmp	.+238    	; 0x314c <Re_Enter_Pass+0x238>
				{
					/* when user press enter call conroller response function to receive response of MC_2 */
					UART_sendByte(ENTER);
    305e:	8d e0       	ldi	r24, 0x0D	; 13
    3060:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	aa ef       	ldi	r26, 0xFA	; 250
    306a:	b3 e4       	ldi	r27, 0x43	; 67
    306c:	89 8f       	std	Y+25, r24	; 0x19
    306e:	9a 8f       	std	Y+26, r25	; 0x1a
    3070:	ab 8f       	std	Y+27, r26	; 0x1b
    3072:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3074:	69 8d       	ldd	r22, Y+25	; 0x19
    3076:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	4a ef       	ldi	r20, 0xFA	; 250
    3082:	54 e4       	ldi	r21, 0x44	; 68
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	8d 8b       	std	Y+21, r24	; 0x15
    308e:	9e 8b       	std	Y+22, r25	; 0x16
    3090:	af 8b       	std	Y+23, r26	; 0x17
    3092:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3094:	6d 89       	ldd	r22, Y+21	; 0x15
    3096:	7e 89       	ldd	r23, Y+22	; 0x16
    3098:	8f 89       	ldd	r24, Y+23	; 0x17
    309a:	98 8d       	ldd	r25, Y+24	; 0x18
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e8       	ldi	r20, 0x80	; 128
    30a2:	5f e3       	ldi	r21, 0x3F	; 63
    30a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	2c f4       	brge	.+10     	; 0x30b6 <Re_Enter_Pass+0x1a2>
		__ticks = 1;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9c 8b       	std	Y+20, r25	; 0x14
    30b2:	8b 8b       	std	Y+19, r24	; 0x13
    30b4:	3f c0       	rjmp	.+126    	; 0x3134 <Re_Enter_Pass+0x220>
	else if (__tmp > 65535)
    30b6:	6d 89       	ldd	r22, Y+21	; 0x15
    30b8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ba:	8f 89       	ldd	r24, Y+23	; 0x17
    30bc:	98 8d       	ldd	r25, Y+24	; 0x18
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	3f ef       	ldi	r19, 0xFF	; 255
    30c2:	4f e7       	ldi	r20, 0x7F	; 127
    30c4:	57 e4       	ldi	r21, 0x47	; 71
    30c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ca:	18 16       	cp	r1, r24
    30cc:	4c f5       	brge	.+82     	; 0x3120 <Re_Enter_Pass+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ce:	69 8d       	ldd	r22, Y+25	; 0x19
    30d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e2       	ldi	r20, 0x20	; 32
    30dc:	51 e4       	ldi	r21, 0x41	; 65
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9c 8b       	std	Y+20, r25	; 0x14
    30f4:	8b 8b       	std	Y+19, r24	; 0x13
    30f6:	0f c0       	rjmp	.+30     	; 0x3116 <Re_Enter_Pass+0x202>
    30f8:	88 ec       	ldi	r24, 0xC8	; 200
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9a 8b       	std	Y+18, r25	; 0x12
    30fe:	89 8b       	std	Y+17, r24	; 0x11
    3100:	89 89       	ldd	r24, Y+17	; 0x11
    3102:	9a 89       	ldd	r25, Y+18	; 0x12
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <Re_Enter_Pass+0x1f0>
    3108:	9a 8b       	std	Y+18, r25	; 0x12
    310a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310c:	8b 89       	ldd	r24, Y+19	; 0x13
    310e:	9c 89       	ldd	r25, Y+20	; 0x14
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	9c 8b       	std	Y+20, r25	; 0x14
    3114:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3116:	8b 89       	ldd	r24, Y+19	; 0x13
    3118:	9c 89       	ldd	r25, Y+20	; 0x14
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	69 f7       	brne	.-38     	; 0x30f8 <Re_Enter_Pass+0x1e4>
    311e:	14 c0       	rjmp	.+40     	; 0x3148 <Re_Enter_Pass+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3120:	6d 89       	ldd	r22, Y+21	; 0x15
    3122:	7e 89       	ldd	r23, Y+22	; 0x16
    3124:	8f 89       	ldd	r24, Y+23	; 0x17
    3126:	98 8d       	ldd	r25, Y+24	; 0x18
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	9c 8b       	std	Y+20, r25	; 0x14
    3132:	8b 8b       	std	Y+19, r24	; 0x13
    3134:	8b 89       	ldd	r24, Y+19	; 0x13
    3136:	9c 89       	ldd	r25, Y+20	; 0x14
    3138:	98 8b       	std	Y+16, r25	; 0x10
    313a:	8f 87       	std	Y+15, r24	; 0x0f
    313c:	8f 85       	ldd	r24, Y+15	; 0x0f
    313e:	98 89       	ldd	r25, Y+16	; 0x10
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <Re_Enter_Pass+0x22c>
    3144:	98 8b       	std	Y+16, r25	; 0x10
    3146:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					controler_response ();
    3148:	0e 94 28 19 	call	0x3250	; 0x3250 <controler_response>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	aa ef       	ldi	r26, 0xFA	; 250
    3152:	b3 e4       	ldi	r27, 0x43	; 67
    3154:	8b 87       	std	Y+11, r24	; 0x0b
    3156:	9c 87       	std	Y+12, r25	; 0x0c
    3158:	ad 87       	std	Y+13, r26	; 0x0d
    315a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	6b 85       	ldd	r22, Y+11	; 0x0b
    315e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3160:	8d 85       	ldd	r24, Y+13	; 0x0d
    3162:	9e 85       	ldd	r25, Y+14	; 0x0e
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a ef       	ldi	r20, 0xFA	; 250
    316a:	54 e4       	ldi	r21, 0x44	; 68
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8f 83       	std	Y+7, r24	; 0x07
    3176:	98 87       	std	Y+8, r25	; 0x08
    3178:	a9 87       	std	Y+9, r26	; 0x09
    317a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    317c:	6f 81       	ldd	r22, Y+7	; 0x07
    317e:	78 85       	ldd	r23, Y+8	; 0x08
    3180:	89 85       	ldd	r24, Y+9	; 0x09
    3182:	9a 85       	ldd	r25, Y+10	; 0x0a
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <Re_Enter_Pass+0x28a>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	3f c0       	rjmp	.+126    	; 0x321c <Re_Enter_Pass+0x308>
	else if (__tmp > 65535)
    319e:	6f 81       	ldd	r22, Y+7	; 0x07
    31a0:	78 85       	ldd	r23, Y+8	; 0x08
    31a2:	89 85       	ldd	r24, Y+9	; 0x09
    31a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <Re_Enter_Pass+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <Re_Enter_Pass+0x2ea>
    31e0:	88 ec       	ldi	r24, 0xC8	; 200
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9c 83       	std	Y+4, r25	; 0x04
    31e6:	8b 83       	std	Y+3, r24	; 0x03
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	9c 81       	ldd	r25, Y+4	; 0x04
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <Re_Enter_Pass+0x2d8>
    31f0:	9c 83       	std	Y+4, r25	; 0x04
    31f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	9e 81       	ldd	r25, Y+6	; 0x06
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <Re_Enter_Pass+0x2cc>
    3206:	14 c0       	rjmp	.+40     	; 0x3230 <Re_Enter_Pass+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	6f 81       	ldd	r22, Y+7	; 0x07
    320a:	78 85       	ldd	r23, Y+8	; 0x08
    320c:	89 85       	ldd	r24, Y+9	; 0x09
    320e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	9a 83       	std	Y+2, r25	; 0x02
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <Re_Enter_Pass+0x314>
    322c:	9a 83       	std	Y+2, r25	; 0x02
    322e:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Plz Re_Enter the ");
	LCD_moveCursor(1,0);
	LCD_displayString("same pass:");
	uint8 key , i ;
	/* get re_password of 5 numbers from keypad and send them to MC_2 */
		for(i=0 ; i<6;i++)
    3230:	8b a5       	ldd	r24, Y+43	; 0x2b
    3232:	8f 5f       	subi	r24, 0xFF	; 255
    3234:	8b a7       	std	Y+43, r24	; 0x2b
    3236:	8b a5       	ldd	r24, Y+43	; 0x2b
    3238:	86 30       	cpi	r24, 0x06	; 6
    323a:	08 f4       	brcc	.+2      	; 0x323e <Re_Enter_Pass+0x32a>
    323c:	8c ce       	rjmp	.-744    	; 0x2f56 <Re_Enter_Pass+0x42>
					_delay_ms(500);
					controler_response ();
				}
				_delay_ms(500);
		}
}
    323e:	ac 96       	adiw	r28, 0x2c	; 44
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	08 95       	ret

00003250 <controler_response>:
/* response function that receive MC_2 response */
void controler_response (void)
{
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	0f 92       	push	r0
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
	uint8 response = UART_recieveByte() ;
    325a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    325e:	89 83       	std	Y+1, r24	; 0x01
	if(response == SAME_PASS)
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	81 30       	cpi	r24, 0x01	; 1
    3264:	19 f4       	brne	.+6      	; 0x326c <controler_response+0x1c>
	{
		 main_options ();
    3266:	0e 94 3f 19 	call	0x327e	; 0x327e <main_options>
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <controler_response+0x26>
	}
	else if (response == NOT_SAME_PASS)
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	88 23       	and	r24, r24
    3270:	11 f4       	brne	.+4      	; 0x3276 <controler_response+0x26>
	{
		Enter_Pass();
    3272:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <Enter_Pass>
	}
}
    3276:	0f 90       	pop	r0
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <main_options>:
/* main option function that control flow of system according to user input */
void main_options (void)
{
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	2f 97       	sbiw	r28, 0x0f	; 15
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
	LCD_moveCursor(0,0);
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	60 e0       	ldi	r22, 0x00	; 0
    3296:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_clearScreen();
    329a:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    329e:	8f e8       	ldi	r24, 0x8F	; 143
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	LCD_moveCursor(1,0);
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    32ae:	8d e9       	ldi	r24, 0x9D	; 157
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	uint8 key;
	key = KEYPAD_getPressedKey();
    32b6:	0e 94 c5 09 	call	0x138a	; 0x138a <KEYPAD_getPressedKey>
    32ba:	8f 87       	std	Y+15, r24	; 0x0f
	   if(key == '+')
    32bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32be:	8b 32       	cpi	r24, 0x2B	; 43
    32c0:	19 f4       	brne	.+6      	; 0x32c8 <main_options+0x4a>
			{
		       Enter_pass_second();
    32c2:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <Enter_pass_second>
    32c6:	05 c0       	rjmp	.+10     	; 0x32d2 <main_options+0x54>
			}
		else if(key == '-')
    32c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ca:	8d 32       	cpi	r24, 0x2D	; 45
    32cc:	11 f4       	brne	.+4      	; 0x32d2 <main_options+0x54>
			{
			   change_pass();
    32ce:	0e 94 46 1c 	call	0x388c	; 0x388c <change_pass>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	aa ef       	ldi	r26, 0xFA	; 250
    32d8:	b3 e4       	ldi	r27, 0x43	; 67
    32da:	8b 87       	std	Y+11, r24	; 0x0b
    32dc:	9c 87       	std	Y+12, r25	; 0x0c
    32de:	ad 87       	std	Y+13, r26	; 0x0d
    32e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a ef       	ldi	r20, 0xFA	; 250
    32f0:	54 e4       	ldi	r21, 0x44	; 68
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	8f 83       	std	Y+7, r24	; 0x07
    32fc:	98 87       	std	Y+8, r25	; 0x08
    32fe:	a9 87       	std	Y+9, r26	; 0x09
    3300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3302:	6f 81       	ldd	r22, Y+7	; 0x07
    3304:	78 85       	ldd	r23, Y+8	; 0x08
    3306:	89 85       	ldd	r24, Y+9	; 0x09
    3308:	9a 85       	ldd	r25, Y+10	; 0x0a
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e8       	ldi	r20, 0x80	; 128
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3316:	88 23       	and	r24, r24
    3318:	2c f4       	brge	.+10     	; 0x3324 <main_options+0xa6>
		__ticks = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9e 83       	std	Y+6, r25	; 0x06
    3320:	8d 83       	std	Y+5, r24	; 0x05
    3322:	3f c0       	rjmp	.+126    	; 0x33a2 <main_options+0x124>
	else if (__tmp > 65535)
    3324:	6f 81       	ldd	r22, Y+7	; 0x07
    3326:	78 85       	ldd	r23, Y+8	; 0x08
    3328:	89 85       	ldd	r24, Y+9	; 0x09
    332a:	9a 85       	ldd	r25, Y+10	; 0x0a
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	4c f5       	brge	.+82     	; 0x338e <main_options+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	6b 85       	ldd	r22, Y+11	; 0x0b
    333e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3340:	8d 85       	ldd	r24, Y+13	; 0x0d
    3342:	9e 85       	ldd	r25, Y+14	; 0x0e
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <main_options+0x106>
    3366:	88 ec       	ldi	r24, 0xC8	; 200
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9c 83       	std	Y+4, r25	; 0x04
    336c:	8b 83       	std	Y+3, r24	; 0x03
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	9c 81       	ldd	r25, Y+4	; 0x04
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <main_options+0xf4>
    3376:	9c 83       	std	Y+4, r25	; 0x04
    3378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	8d 81       	ldd	r24, Y+5	; 0x05
    337c:	9e 81       	ldd	r25, Y+6	; 0x06
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9e 83       	std	Y+6, r25	; 0x06
    3382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	8d 81       	ldd	r24, Y+5	; 0x05
    3386:	9e 81       	ldd	r25, Y+6	; 0x06
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f7       	brne	.-38     	; 0x3366 <main_options+0xe8>
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <main_options+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	6f 81       	ldd	r22, Y+7	; 0x07
    3390:	78 85       	ldd	r23, Y+8	; 0x08
    3392:	89 85       	ldd	r24, Y+9	; 0x09
    3394:	9a 85       	ldd	r25, Y+10	; 0x0a
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9e 83       	std	Y+6, r25	; 0x06
    33a0:	8d 83       	std	Y+5, r24	; 0x05
    33a2:	8d 81       	ldd	r24, Y+5	; 0x05
    33a4:	9e 81       	ldd	r25, Y+6	; 0x06
    33a6:	9a 83       	std	Y+2, r25	; 0x02
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	9a 81       	ldd	r25, Y+2	; 0x02
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <main_options+0x130>
    33b2:	9a 83       	std	Y+2, r25	; 0x02
    33b4:	89 83       	std	Y+1, r24	; 0x01
			}
	_delay_ms(500);
}
    33b6:	2f 96       	adiw	r28, 0x0f	; 15
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <Enter_pass_second>:
/* function that receive password from user when he wants to open the door */
void Enter_pass_second(void)
{
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	ac 97       	sbiw	r28, 0x2c	; 44
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	f8 94       	cli
    33d6:	de bf       	out	0x3e, r29	; 62
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(ENTER_PASS_TWO);
    33dc:	80 ee       	ldi	r24, 0xE0	; 224
    33de:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
	LCD_moveCursor(0,0);
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_clearScreen();
    33ea:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass : ");
    33ee:	80 e6       	ldi	r24, 0x60	; 96
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	LCD_moveCursor(1,0);
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	uint8 key , i ;
	while(UART_recieveByte() != START){}
    33fe:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3402:	84 34       	cpi	r24, 0x44	; 68
    3404:	e1 f7       	brne	.-8      	; 0x33fe <Enter_pass_second+0x36>
	/* get password of 5 numbers from keypad and send them to MC_2 */
		for(i=0 ; i<6;i++)
    3406:	1b a6       	std	Y+43, r1	; 0x2b
    3408:	74 c1       	rjmp	.+744    	; 0x36f2 <Enter_pass_second+0x32a>
		{
		   key = KEYPAD_getPressedKey();
    340a:	0e 94 c5 09 	call	0x138a	; 0x138a <KEYPAD_getPressedKey>
    340e:	8c a7       	std	Y+44, r24	; 0x2c
				if((key >= 0) && (key <= 9))
    3410:	8c a5       	ldd	r24, Y+44	; 0x2c
    3412:	8a 30       	cpi	r24, 0x0A	; 10
    3414:	08 f0       	brcs	.+2      	; 0x3418 <Enter_pass_second+0x50>
    3416:	79 c0       	rjmp	.+242    	; 0x350a <Enter_pass_second+0x142>
				{
					LCD_displayCharacter('*');
    3418:	8a e2       	ldi	r24, 0x2A	; 42
    341a:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayCharacter>
					UART_sendByte(key);
    341e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3420:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	a0 ea       	ldi	r26, 0xA0	; 160
    342a:	b0 e4       	ldi	r27, 0x40	; 64
    342c:	8f a3       	std	Y+39, r24	; 0x27
    342e:	98 a7       	std	Y+40, r25	; 0x28
    3430:	a9 a7       	std	Y+41, r26	; 0x29
    3432:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3434:	6f a1       	ldd	r22, Y+39	; 0x27
    3436:	78 a5       	ldd	r23, Y+40	; 0x28
    3438:	89 a5       	ldd	r24, Y+41	; 0x29
    343a:	9a a5       	ldd	r25, Y+42	; 0x2a
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	4a ef       	ldi	r20, 0xFA	; 250
    3442:	54 e4       	ldi	r21, 0x44	; 68
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	8b a3       	std	Y+35, r24	; 0x23
    344e:	9c a3       	std	Y+36, r25	; 0x24
    3450:	ad a3       	std	Y+37, r26	; 0x25
    3452:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3454:	6b a1       	ldd	r22, Y+35	; 0x23
    3456:	7c a1       	ldd	r23, Y+36	; 0x24
    3458:	8d a1       	ldd	r24, Y+37	; 0x25
    345a:	9e a1       	ldd	r25, Y+38	; 0x26
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e8       	ldi	r20, 0x80	; 128
    3462:	5f e3       	ldi	r21, 0x3F	; 63
    3464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3468:	88 23       	and	r24, r24
    346a:	2c f4       	brge	.+10     	; 0x3476 <Enter_pass_second+0xae>
		__ticks = 1;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	9a a3       	std	Y+34, r25	; 0x22
    3472:	89 a3       	std	Y+33, r24	; 0x21
    3474:	3f c0       	rjmp	.+126    	; 0x34f4 <Enter_pass_second+0x12c>
	else if (__tmp > 65535)
    3476:	6b a1       	ldd	r22, Y+35	; 0x23
    3478:	7c a1       	ldd	r23, Y+36	; 0x24
    347a:	8d a1       	ldd	r24, Y+37	; 0x25
    347c:	9e a1       	ldd	r25, Y+38	; 0x26
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	3f ef       	ldi	r19, 0xFF	; 255
    3482:	4f e7       	ldi	r20, 0x7F	; 127
    3484:	57 e4       	ldi	r21, 0x47	; 71
    3486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    348a:	18 16       	cp	r1, r24
    348c:	4c f5       	brge	.+82     	; 0x34e0 <Enter_pass_second+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    348e:	6f a1       	ldd	r22, Y+39	; 0x27
    3490:	78 a5       	ldd	r23, Y+40	; 0x28
    3492:	89 a5       	ldd	r24, Y+41	; 0x29
    3494:	9a a5       	ldd	r25, Y+42	; 0x2a
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e2       	ldi	r20, 0x20	; 32
    349c:	51 e4       	ldi	r21, 0x41	; 65
    349e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	bc 01       	movw	r22, r24
    34a8:	cd 01       	movw	r24, r26
    34aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	9a a3       	std	Y+34, r25	; 0x22
    34b4:	89 a3       	std	Y+33, r24	; 0x21
    34b6:	0f c0       	rjmp	.+30     	; 0x34d6 <Enter_pass_second+0x10e>
    34b8:	88 ec       	ldi	r24, 0xC8	; 200
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	98 a3       	std	Y+32, r25	; 0x20
    34be:	8f 8f       	std	Y+31, r24	; 0x1f
    34c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34c2:	98 a1       	ldd	r25, Y+32	; 0x20
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	f1 f7       	brne	.-4      	; 0x34c4 <Enter_pass_second+0xfc>
    34c8:	98 a3       	std	Y+32, r25	; 0x20
    34ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34cc:	89 a1       	ldd	r24, Y+33	; 0x21
    34ce:	9a a1       	ldd	r25, Y+34	; 0x22
    34d0:	01 97       	sbiw	r24, 0x01	; 1
    34d2:	9a a3       	std	Y+34, r25	; 0x22
    34d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d6:	89 a1       	ldd	r24, Y+33	; 0x21
    34d8:	9a a1       	ldd	r25, Y+34	; 0x22
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	69 f7       	brne	.-38     	; 0x34b8 <Enter_pass_second+0xf0>
    34de:	94 c0       	rjmp	.+296    	; 0x3608 <Enter_pass_second+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e0:	6b a1       	ldd	r22, Y+35	; 0x23
    34e2:	7c a1       	ldd	r23, Y+36	; 0x24
    34e4:	8d a1       	ldd	r24, Y+37	; 0x25
    34e6:	9e a1       	ldd	r25, Y+38	; 0x26
    34e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	9a a3       	std	Y+34, r25	; 0x22
    34f2:	89 a3       	std	Y+33, r24	; 0x21
    34f4:	89 a1       	ldd	r24, Y+33	; 0x21
    34f6:	9a a1       	ldd	r25, Y+34	; 0x22
    34f8:	9e 8f       	std	Y+30, r25	; 0x1e
    34fa:	8d 8f       	std	Y+29, r24	; 0x1d
    34fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	f1 f7       	brne	.-4      	; 0x3500 <Enter_pass_second+0x138>
    3504:	9e 8f       	std	Y+30, r25	; 0x1e
    3506:	8d 8f       	std	Y+29, r24	; 0x1d
    3508:	7f c0       	rjmp	.+254    	; 0x3608 <Enter_pass_second+0x240>
					_delay_ms(5);
				}
				else if(key == ENTER)
    350a:	8c a5       	ldd	r24, Y+44	; 0x2c
    350c:	8d 30       	cpi	r24, 0x0D	; 13
    350e:	09 f0       	breq	.+2      	; 0x3512 <Enter_pass_second+0x14a>
    3510:	7b c0       	rjmp	.+246    	; 0x3608 <Enter_pass_second+0x240>
				{
					UART_sendByte(ENTER);
    3512:	8d e0       	ldi	r24, 0x0D	; 13
    3514:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	aa ef       	ldi	r26, 0xFA	; 250
    351e:	b3 e4       	ldi	r27, 0x43	; 67
    3520:	89 8f       	std	Y+25, r24	; 0x19
    3522:	9a 8f       	std	Y+26, r25	; 0x1a
    3524:	ab 8f       	std	Y+27, r26	; 0x1b
    3526:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3528:	69 8d       	ldd	r22, Y+25	; 0x19
    352a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    352c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    352e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	4a ef       	ldi	r20, 0xFA	; 250
    3536:	54 e4       	ldi	r21, 0x44	; 68
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8d 8b       	std	Y+21, r24	; 0x15
    3542:	9e 8b       	std	Y+22, r25	; 0x16
    3544:	af 8b       	std	Y+23, r26	; 0x17
    3546:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3548:	6d 89       	ldd	r22, Y+21	; 0x15
    354a:	7e 89       	ldd	r23, Y+22	; 0x16
    354c:	8f 89       	ldd	r24, Y+23	; 0x17
    354e:	98 8d       	ldd	r25, Y+24	; 0x18
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e8       	ldi	r20, 0x80	; 128
    3556:	5f e3       	ldi	r21, 0x3F	; 63
    3558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    355c:	88 23       	and	r24, r24
    355e:	2c f4       	brge	.+10     	; 0x356a <Enter_pass_second+0x1a2>
		__ticks = 1;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9c 8b       	std	Y+20, r25	; 0x14
    3566:	8b 8b       	std	Y+19, r24	; 0x13
    3568:	3f c0       	rjmp	.+126    	; 0x35e8 <Enter_pass_second+0x220>
	else if (__tmp > 65535)
    356a:	6d 89       	ldd	r22, Y+21	; 0x15
    356c:	7e 89       	ldd	r23, Y+22	; 0x16
    356e:	8f 89       	ldd	r24, Y+23	; 0x17
    3570:	98 8d       	ldd	r25, Y+24	; 0x18
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357e:	18 16       	cp	r1, r24
    3580:	4c f5       	brge	.+82     	; 0x35d4 <Enter_pass_second+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3582:	69 8d       	ldd	r22, Y+25	; 0x19
    3584:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3586:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3588:	9c 8d       	ldd	r25, Y+28	; 0x1c
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e2       	ldi	r20, 0x20	; 32
    3590:	51 e4       	ldi	r21, 0x41	; 65
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9c 8b       	std	Y+20, r25	; 0x14
    35a8:	8b 8b       	std	Y+19, r24	; 0x13
    35aa:	0f c0       	rjmp	.+30     	; 0x35ca <Enter_pass_second+0x202>
    35ac:	88 ec       	ldi	r24, 0xC8	; 200
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9a 8b       	std	Y+18, r25	; 0x12
    35b2:	89 8b       	std	Y+17, r24	; 0x11
    35b4:	89 89       	ldd	r24, Y+17	; 0x11
    35b6:	9a 89       	ldd	r25, Y+18	; 0x12
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <Enter_pass_second+0x1f0>
    35bc:	9a 8b       	std	Y+18, r25	; 0x12
    35be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c0:	8b 89       	ldd	r24, Y+19	; 0x13
    35c2:	9c 89       	ldd	r25, Y+20	; 0x14
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	9c 8b       	std	Y+20, r25	; 0x14
    35c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ca:	8b 89       	ldd	r24, Y+19	; 0x13
    35cc:	9c 89       	ldd	r25, Y+20	; 0x14
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	69 f7       	brne	.-38     	; 0x35ac <Enter_pass_second+0x1e4>
    35d2:	14 c0       	rjmp	.+40     	; 0x35fc <Enter_pass_second+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d4:	6d 89       	ldd	r22, Y+21	; 0x15
    35d6:	7e 89       	ldd	r23, Y+22	; 0x16
    35d8:	8f 89       	ldd	r24, Y+23	; 0x17
    35da:	98 8d       	ldd	r25, Y+24	; 0x18
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9c 8b       	std	Y+20, r25	; 0x14
    35e6:	8b 8b       	std	Y+19, r24	; 0x13
    35e8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ea:	9c 89       	ldd	r25, Y+20	; 0x14
    35ec:	98 8b       	std	Y+16, r25	; 0x10
    35ee:	8f 87       	std	Y+15, r24	; 0x0f
    35f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f2:	98 89       	ldd	r25, Y+16	; 0x10
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <Enter_pass_second+0x22c>
    35f8:	98 8b       	std	Y+16, r25	; 0x10
    35fa:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					/* wait until MC_2 be ready to send response */
					while(UART_recieveByte() != START){}
    35fc:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3600:	84 34       	cpi	r24, 0x44	; 68
    3602:	e1 f7       	brne	.-8      	; 0x35fc <Enter_pass_second+0x234>
					contoller_response_two ();
    3604:	0e 94 86 1b 	call	0x370c	; 0x370c <contoller_response_two>
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	aa ef       	ldi	r26, 0xFA	; 250
    360e:	b3 e4       	ldi	r27, 0x43	; 67
    3610:	8b 87       	std	Y+11, r24	; 0x0b
    3612:	9c 87       	std	Y+12, r25	; 0x0c
    3614:	ad 87       	std	Y+13, r26	; 0x0d
    3616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3618:	6b 85       	ldd	r22, Y+11	; 0x0b
    361a:	7c 85       	ldd	r23, Y+12	; 0x0c
    361c:	8d 85       	ldd	r24, Y+13	; 0x0d
    361e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	4a ef       	ldi	r20, 0xFA	; 250
    3626:	54 e4       	ldi	r21, 0x44	; 68
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	8f 83       	std	Y+7, r24	; 0x07
    3632:	98 87       	std	Y+8, r25	; 0x08
    3634:	a9 87       	std	Y+9, r26	; 0x09
    3636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3638:	6f 81       	ldd	r22, Y+7	; 0x07
    363a:	78 85       	ldd	r23, Y+8	; 0x08
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364c:	88 23       	and	r24, r24
    364e:	2c f4       	brge	.+10     	; 0x365a <Enter_pass_second+0x292>
		__ticks = 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	3f c0       	rjmp	.+126    	; 0x36d8 <Enter_pass_second+0x310>
	else if (__tmp > 65535)
    365a:	6f 81       	ldd	r22, Y+7	; 0x07
    365c:	78 85       	ldd	r23, Y+8	; 0x08
    365e:	89 85       	ldd	r24, Y+9	; 0x09
    3660:	9a 85       	ldd	r25, Y+10	; 0x0a
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	4c f5       	brge	.+82     	; 0x36c4 <Enter_pass_second+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3672:	6b 85       	ldd	r22, Y+11	; 0x0b
    3674:	7c 85       	ldd	r23, Y+12	; 0x0c
    3676:	8d 85       	ldd	r24, Y+13	; 0x0d
    3678:	9e 85       	ldd	r25, Y+14	; 0x0e
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e2       	ldi	r20, 0x20	; 32
    3680:	51 e4       	ldi	r21, 0x41	; 65
    3682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9e 83       	std	Y+6, r25	; 0x06
    3698:	8d 83       	std	Y+5, r24	; 0x05
    369a:	0f c0       	rjmp	.+30     	; 0x36ba <Enter_pass_second+0x2f2>
    369c:	88 ec       	ldi	r24, 0xC8	; 200
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	9c 83       	std	Y+4, r25	; 0x04
    36a2:	8b 83       	std	Y+3, r24	; 0x03
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	9c 81       	ldd	r25, Y+4	; 0x04
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	f1 f7       	brne	.-4      	; 0x36a8 <Enter_pass_second+0x2e0>
    36ac:	9c 83       	std	Y+4, r25	; 0x04
    36ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	9e 83       	std	Y+6, r25	; 0x06
    36b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	69 f7       	brne	.-38     	; 0x369c <Enter_pass_second+0x2d4>
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <Enter_pass_second+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c4:	6f 81       	ldd	r22, Y+7	; 0x07
    36c6:	78 85       	ldd	r23, Y+8	; 0x08
    36c8:	89 85       	ldd	r24, Y+9	; 0x09
    36ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	9e 83       	std	Y+6, r25	; 0x06
    36d6:	8d 83       	std	Y+5, r24	; 0x05
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	9a 83       	std	Y+2, r25	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <Enter_pass_second+0x31c>
    36e8:	9a 83       	std	Y+2, r25	; 0x02
    36ea:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Plz Enter Pass : ");
	LCD_moveCursor(1,0);
	uint8 key , i ;
	while(UART_recieveByte() != START){}
	/* get password of 5 numbers from keypad and send them to MC_2 */
		for(i=0 ; i<6;i++)
    36ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ee:	8f 5f       	subi	r24, 0xFF	; 255
    36f0:	8b a7       	std	Y+43, r24	; 0x2b
    36f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    36f4:	86 30       	cpi	r24, 0x06	; 6
    36f6:	08 f4       	brcc	.+2      	; 0x36fa <Enter_pass_second+0x332>
    36f8:	88 ce       	rjmp	.-752    	; 0x340a <Enter_pass_second+0x42>
					while(UART_recieveByte() != START){}
					contoller_response_two ();
				}
				_delay_ms(500);
		}
}
    36fa:	ac 96       	adiw	r28, 0x2c	; 44
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	cd bf       	out	0x3d, r28	; 61
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <contoller_response_two>:
/* function that receive MC_2 response on entered password */
void contoller_response_two (void)
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	67 97       	sbiw	r28, 0x17	; 23
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
	while(UART_recieveByte() != START ){};
    3720:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3724:	84 34       	cpi	r24, 0x44	; 68
    3726:	e1 f7       	brne	.-8      	; 0x3720 <contoller_response_two+0x14>
	uint8 response = UART_recieveByte() ;
    3728:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    372c:	89 83       	std	Y+1, r24	; 0x01
	/* if MC_2 response is true he send open door */
	if(response == DOOR_OPENED)
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	82 30       	cpi	r24, 0x02	; 2
    3732:	09 f0       	breq	.+2      	; 0x3736 <contoller_response_two+0x2a>
    3734:	59 c0       	rjmp	.+178    	; 0x37e8 <contoller_response_two+0xdc>
	{
		LCD_clearScreen();
    3736:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
		LCD_displayString("Door is ");
    3742:	8d ea       	ldi	r24, 0xAD	; 173
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
		LCD_moveCursor(1,0);
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
		LCD_displayString("Unlocking");
    3752:	86 eb       	ldi	r24, 0xB6	; 182
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
		UART_sendByte(DOOR_CLOSED);
    375a:	83 e0       	ldi	r24, 0x03	; 3
    375c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
		while(UART_recieveByte() != START ){}
    3760:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3764:	84 34       	cpi	r24, 0x44	; 68
    3766:	e1 f7       	brne	.-8      	; 0x3760 <contoller_response_two+0x54>
			response = UART_recieveByte() ;
    3768:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    376c:	89 83       	std	Y+1, r24	; 0x01
			if(response == DOOR_CLOSED)
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	83 30       	cpi	r24, 0x03	; 3
    3772:	09 f0       	breq	.+2      	; 0x3776 <contoller_response_two+0x6a>
    3774:	82 c0       	rjmp	.+260    	; 0x387a <contoller_response_two+0x16e>
			{
				LCD_clearScreen();
    3776:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
				LCD_moveCursor(0,0);
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
				/* display door is locking on lcd */
				LCD_displayString("Door is Locking");
    3782:	80 ec       	ldi	r24, 0xC0	; 192
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
				/* initialise and start timer to calculate and hold for 15 seconds */
				Timer1_ConfigType Timer_config = {26473 , 0 ,F_CPU_1024,normal };
    378a:	ce 01       	movw	r24, r28
    378c:	02 96       	adiw	r24, 0x02	; 2
    378e:	9f 87       	std	Y+15, r25	; 0x0f
    3790:	8e 87       	std	Y+14, r24	; 0x0e
    3792:	e9 ee       	ldi	r30, 0xE9	; 233
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	f9 8b       	std	Y+17, r31	; 0x11
    3798:	e8 8b       	std	Y+16, r30	; 0x10
    379a:	f6 e0       	ldi	r31, 0x06	; 6
    379c:	fa 8b       	std	Y+18, r31	; 0x12
    379e:	e8 89       	ldd	r30, Y+16	; 0x10
    37a0:	f9 89       	ldd	r31, Y+17	; 0x11
    37a2:	00 80       	ld	r0, Z
    37a4:	88 89       	ldd	r24, Y+16	; 0x10
    37a6:	99 89       	ldd	r25, Y+17	; 0x11
    37a8:	01 96       	adiw	r24, 0x01	; 1
    37aa:	99 8b       	std	Y+17, r25	; 0x11
    37ac:	88 8b       	std	Y+16, r24	; 0x10
    37ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    37b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    37b2:	00 82       	st	Z, r0
    37b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    37b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    37b8:	01 96       	adiw	r24, 0x01	; 1
    37ba:	9f 87       	std	Y+15, r25	; 0x0f
    37bc:	8e 87       	std	Y+14, r24	; 0x0e
    37be:	9a 89       	ldd	r25, Y+18	; 0x12
    37c0:	91 50       	subi	r25, 0x01	; 1
    37c2:	9a 8b       	std	Y+18, r25	; 0x12
    37c4:	ea 89       	ldd	r30, Y+18	; 0x12
    37c6:	ee 23       	and	r30, r30
    37c8:	51 f7       	brne	.-44     	; 0x379e <contoller_response_two+0x92>
				Timer1_init(&Timer_config);
    37ca:	ce 01       	movw	r24, r28
    37cc:	02 96       	adiw	r24, 0x02	; 2
    37ce:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
				while(ticks != 3){}
    37d2:	80 91 f9 00 	lds	r24, 0x00F9
    37d6:	83 30       	cpi	r24, 0x03	; 3
    37d8:	e1 f7       	brne	.-8      	; 0x37d2 <contoller_response_two+0xc6>
				/* close timer and go to main option screen */
				Timer1_deInit();
    37da:	0e 94 63 06 	call	0xcc6	; 0xcc6 <Timer1_deInit>
				ticks = 0 ;
    37de:	10 92 f9 00 	sts	0x00F9, r1
				main_options();
    37e2:	0e 94 3f 19 	call	0x327e	; 0x327e <main_options>
    37e6:	49 c0       	rjmp	.+146    	; 0x387a <contoller_response_two+0x16e>

			}
	}
	/* else he send Alarm to make MC_1 display error and hold system if user entered password wrong three times */
	else if (response == ALARM)
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	80 3a       	cpi	r24, 0xA0	; 160
    37ec:	09 f0       	breq	.+2      	; 0x37f0 <contoller_response_two+0xe4>
    37ee:	40 c0       	rjmp	.+128    	; 0x3870 <contoller_response_two+0x164>
	{
		UART_sendByte(ALARM);
    37f0:	80 ea       	ldi	r24, 0xA0	; 160
    37f2:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
		while(UART_recieveByte() != START){}
    37f6:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    37fa:	84 34       	cpi	r24, 0x44	; 68
    37fc:	e1 f7       	brne	.-8      	; 0x37f6 <contoller_response_two+0xea>
     	LCD_moveCursor(0,0);
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	60 e0       	ldi	r22, 0x00	; 0
    3802:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
		LCD_clearScreen();
    3806:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
    	LCD_displayString("Error");
    380a:	80 ed       	ldi	r24, 0xD0	; 208
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
    	/* initialise and start timer to hold system in error for 1 min. */
		Timer1_ConfigType Timer_config_buzzer = {0 , 0 ,F_CPU_1024,normal };
    3812:	ce 01       	movw	r24, r28
    3814:	08 96       	adiw	r24, 0x08	; 8
    3816:	9c 8b       	std	Y+20, r25	; 0x14
    3818:	8b 8b       	std	Y+19, r24	; 0x13
    381a:	e3 ee       	ldi	r30, 0xE3	; 227
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	fe 8b       	std	Y+22, r31	; 0x16
    3820:	ed 8b       	std	Y+21, r30	; 0x15
    3822:	f6 e0       	ldi	r31, 0x06	; 6
    3824:	ff 8b       	std	Y+23, r31	; 0x17
    3826:	ed 89       	ldd	r30, Y+21	; 0x15
    3828:	fe 89       	ldd	r31, Y+22	; 0x16
    382a:	00 80       	ld	r0, Z
    382c:	8d 89       	ldd	r24, Y+21	; 0x15
    382e:	9e 89       	ldd	r25, Y+22	; 0x16
    3830:	01 96       	adiw	r24, 0x01	; 1
    3832:	9e 8b       	std	Y+22, r25	; 0x16
    3834:	8d 8b       	std	Y+21, r24	; 0x15
    3836:	eb 89       	ldd	r30, Y+19	; 0x13
    3838:	fc 89       	ldd	r31, Y+20	; 0x14
    383a:	00 82       	st	Z, r0
    383c:	8b 89       	ldd	r24, Y+19	; 0x13
    383e:	9c 89       	ldd	r25, Y+20	; 0x14
    3840:	01 96       	adiw	r24, 0x01	; 1
    3842:	9c 8b       	std	Y+20, r25	; 0x14
    3844:	8b 8b       	std	Y+19, r24	; 0x13
    3846:	9f 89       	ldd	r25, Y+23	; 0x17
    3848:	91 50       	subi	r25, 0x01	; 1
    384a:	9f 8b       	std	Y+23, r25	; 0x17
    384c:	ef 89       	ldd	r30, Y+23	; 0x17
    384e:	ee 23       	and	r30, r30
    3850:	51 f7       	brne	.-44     	; 0x3826 <contoller_response_two+0x11a>
		Timer1_init(&Timer_config_buzzer);
    3852:	ce 01       	movw	r24, r28
    3854:	08 96       	adiw	r24, 0x08	; 8
    3856:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
		while(ticks != 7){}
    385a:	80 91 f9 00 	lds	r24, 0x00F9
    385e:	87 30       	cpi	r24, 0x07	; 7
    3860:	e1 f7       	brne	.-8      	; 0x385a <contoller_response_two+0x14e>
		/* close timer and return to main option menu */
		Timer1_deInit();
    3862:	0e 94 63 06 	call	0xcc6	; 0xcc6 <Timer1_deInit>
		ticks = 0 ;
    3866:	10 92 f9 00 	sts	0x00F9, r1
		main_options ();
    386a:	0e 94 3f 19 	call	0x327e	; 0x327e <main_options>
    386e:	05 c0       	rjmp	.+10     	; 0x387a <contoller_response_two+0x16e>
	}
	/* else he send wrong to give the user a chance to enter password again */
	else if (response == WRONG)
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	8a 3a       	cpi	r24, 0xAA	; 170
    3874:	11 f4       	brne	.+4      	; 0x387a <contoller_response_two+0x16e>
	{
		Enter_pass_second();
    3876:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <Enter_pass_second>
	}

}
    387a:	67 96       	adiw	r28, 0x17	; 23
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	de bf       	out	0x3e, r29	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <change_pass>:
/* change password function */
void change_pass(void)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
    3894:	e8 97       	sbiw	r28, 0x38	; 56
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(CHANGE_PASS);
    38a0:	80 ef       	ldi	r24, 0xF0	; 240
    38a2:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
	LCD_moveCursor(0,0);
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_clearScreen();
    38ae:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass : ");
    38b2:	80 e6       	ldi	r24, 0x60	; 96
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	LCD_moveCursor(1,0);
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	uint8 key , i ,response;
	while(UART_recieveByte() != START){}
    38c2:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    38c6:	84 34       	cpi	r24, 0x44	; 68
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <change_pass+0x36>
	/* get password of 5 numbers from keypad and send them to MC_2 */
		for(i=0 ; i<6;i++)
    38ca:	1c a6       	std	Y+44, r1	; 0x2c
    38cc:	cc c1       	rjmp	.+920    	; 0x3c66 <change_pass+0x3da>
		  {
			   key = KEYPAD_getPressedKey();
    38ce:	0e 94 c5 09 	call	0x138a	; 0x138a <KEYPAD_getPressedKey>
    38d2:	8d a7       	std	Y+45, r24	; 0x2d
					if((key >= 0) && (key <= 9))
    38d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    38d6:	8a 30       	cpi	r24, 0x0A	; 10
    38d8:	08 f0       	brcs	.+2      	; 0x38dc <change_pass+0x50>
    38da:	79 c0       	rjmp	.+242    	; 0x39ce <change_pass+0x142>
					{
						LCD_displayCharacter('*');
    38dc:	8a e2       	ldi	r24, 0x2A	; 42
    38de:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayCharacter>
						UART_sendByte(key);
    38e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    38e4:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	a0 ea       	ldi	r26, 0xA0	; 160
    38ee:	b0 e4       	ldi	r27, 0x40	; 64
    38f0:	8f a3       	std	Y+39, r24	; 0x27
    38f2:	98 a7       	std	Y+40, r25	; 0x28
    38f4:	a9 a7       	std	Y+41, r26	; 0x29
    38f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f8:	6f a1       	ldd	r22, Y+39	; 0x27
    38fa:	78 a5       	ldd	r23, Y+40	; 0x28
    38fc:	89 a5       	ldd	r24, Y+41	; 0x29
    38fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	4a ef       	ldi	r20, 0xFA	; 250
    3906:	54 e4       	ldi	r21, 0x44	; 68
    3908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	8b a3       	std	Y+35, r24	; 0x23
    3912:	9c a3       	std	Y+36, r25	; 0x24
    3914:	ad a3       	std	Y+37, r26	; 0x25
    3916:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3918:	6b a1       	ldd	r22, Y+35	; 0x23
    391a:	7c a1       	ldd	r23, Y+36	; 0x24
    391c:	8d a1       	ldd	r24, Y+37	; 0x25
    391e:	9e a1       	ldd	r25, Y+38	; 0x26
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	40 e8       	ldi	r20, 0x80	; 128
    3926:	5f e3       	ldi	r21, 0x3F	; 63
    3928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    392c:	88 23       	and	r24, r24
    392e:	2c f4       	brge	.+10     	; 0x393a <change_pass+0xae>
		__ticks = 1;
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	9a a3       	std	Y+34, r25	; 0x22
    3936:	89 a3       	std	Y+33, r24	; 0x21
    3938:	3f c0       	rjmp	.+126    	; 0x39b8 <change_pass+0x12c>
	else if (__tmp > 65535)
    393a:	6b a1       	ldd	r22, Y+35	; 0x23
    393c:	7c a1       	ldd	r23, Y+36	; 0x24
    393e:	8d a1       	ldd	r24, Y+37	; 0x25
    3940:	9e a1       	ldd	r25, Y+38	; 0x26
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	3f ef       	ldi	r19, 0xFF	; 255
    3946:	4f e7       	ldi	r20, 0x7F	; 127
    3948:	57 e4       	ldi	r21, 0x47	; 71
    394a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    394e:	18 16       	cp	r1, r24
    3950:	4c f5       	brge	.+82     	; 0x39a4 <change_pass+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3952:	6f a1       	ldd	r22, Y+39	; 0x27
    3954:	78 a5       	ldd	r23, Y+40	; 0x28
    3956:	89 a5       	ldd	r24, Y+41	; 0x29
    3958:	9a a5       	ldd	r25, Y+42	; 0x2a
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e2       	ldi	r20, 0x20	; 32
    3960:	51 e4       	ldi	r21, 0x41	; 65
    3962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	bc 01       	movw	r22, r24
    396c:	cd 01       	movw	r24, r26
    396e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	9a a3       	std	Y+34, r25	; 0x22
    3978:	89 a3       	std	Y+33, r24	; 0x21
    397a:	0f c0       	rjmp	.+30     	; 0x399a <change_pass+0x10e>
    397c:	88 ec       	ldi	r24, 0xC8	; 200
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	98 a3       	std	Y+32, r25	; 0x20
    3982:	8f 8f       	std	Y+31, r24	; 0x1f
    3984:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3986:	98 a1       	ldd	r25, Y+32	; 0x20
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <change_pass+0xfc>
    398c:	98 a3       	std	Y+32, r25	; 0x20
    398e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3990:	89 a1       	ldd	r24, Y+33	; 0x21
    3992:	9a a1       	ldd	r25, Y+34	; 0x22
    3994:	01 97       	sbiw	r24, 0x01	; 1
    3996:	9a a3       	std	Y+34, r25	; 0x22
    3998:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399a:	89 a1       	ldd	r24, Y+33	; 0x21
    399c:	9a a1       	ldd	r25, Y+34	; 0x22
    399e:	00 97       	sbiw	r24, 0x00	; 0
    39a0:	69 f7       	brne	.-38     	; 0x397c <change_pass+0xf0>
    39a2:	ec c0       	rjmp	.+472    	; 0x3b7c <change_pass+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a4:	6b a1       	ldd	r22, Y+35	; 0x23
    39a6:	7c a1       	ldd	r23, Y+36	; 0x24
    39a8:	8d a1       	ldd	r24, Y+37	; 0x25
    39aa:	9e a1       	ldd	r25, Y+38	; 0x26
    39ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	9a a3       	std	Y+34, r25	; 0x22
    39b6:	89 a3       	std	Y+33, r24	; 0x21
    39b8:	89 a1       	ldd	r24, Y+33	; 0x21
    39ba:	9a a1       	ldd	r25, Y+34	; 0x22
    39bc:	9e 8f       	std	Y+30, r25	; 0x1e
    39be:	8d 8f       	std	Y+29, r24	; 0x1d
    39c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	f1 f7       	brne	.-4      	; 0x39c4 <change_pass+0x138>
    39c8:	9e 8f       	std	Y+30, r25	; 0x1e
    39ca:	8d 8f       	std	Y+29, r24	; 0x1d
    39cc:	d7 c0       	rjmp	.+430    	; 0x3b7c <change_pass+0x2f0>
						_delay_ms(5);
					}
					else if(key == ENTER)
    39ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    39d0:	8d 30       	cpi	r24, 0x0D	; 13
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <change_pass+0x14a>
    39d4:	d3 c0       	rjmp	.+422    	; 0x3b7c <change_pass+0x2f0>
					{
						UART_sendByte(ENTER);
    39d6:	8d e0       	ldi	r24, 0x0D	; 13
    39d8:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	aa ef       	ldi	r26, 0xFA	; 250
    39e2:	b3 e4       	ldi	r27, 0x43	; 67
    39e4:	89 8f       	std	Y+25, r24	; 0x19
    39e6:	9a 8f       	std	Y+26, r25	; 0x1a
    39e8:	ab 8f       	std	Y+27, r26	; 0x1b
    39ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ec:	69 8d       	ldd	r22, Y+25	; 0x19
    39ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	4a ef       	ldi	r20, 0xFA	; 250
    39fa:	54 e4       	ldi	r21, 0x44	; 68
    39fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	8d 8b       	std	Y+21, r24	; 0x15
    3a06:	9e 8b       	std	Y+22, r25	; 0x16
    3a08:	af 8b       	std	Y+23, r26	; 0x17
    3a0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a10:	8f 89       	ldd	r24, Y+23	; 0x17
    3a12:	98 8d       	ldd	r25, Y+24	; 0x18
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e8       	ldi	r20, 0x80	; 128
    3a1a:	5f e3       	ldi	r21, 0x3F	; 63
    3a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a20:	88 23       	and	r24, r24
    3a22:	2c f4       	brge	.+10     	; 0x3a2e <change_pass+0x1a2>
		__ticks = 1;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	9c 8b       	std	Y+20, r25	; 0x14
    3a2a:	8b 8b       	std	Y+19, r24	; 0x13
    3a2c:	3f c0       	rjmp	.+126    	; 0x3aac <change_pass+0x220>
	else if (__tmp > 65535)
    3a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a30:	7e 89       	ldd	r23, Y+22	; 0x16
    3a32:	8f 89       	ldd	r24, Y+23	; 0x17
    3a34:	98 8d       	ldd	r25, Y+24	; 0x18
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	3f ef       	ldi	r19, 0xFF	; 255
    3a3a:	4f e7       	ldi	r20, 0x7F	; 127
    3a3c:	57 e4       	ldi	r21, 0x47	; 71
    3a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a42:	18 16       	cp	r1, r24
    3a44:	4c f5       	brge	.+82     	; 0x3a98 <change_pass+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a46:	69 8d       	ldd	r22, Y+25	; 0x19
    3a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e2       	ldi	r20, 0x20	; 32
    3a54:	51 e4       	ldi	r21, 0x41	; 65
    3a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	bc 01       	movw	r22, r24
    3a60:	cd 01       	movw	r24, r26
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9c 8b       	std	Y+20, r25	; 0x14
    3a6c:	8b 8b       	std	Y+19, r24	; 0x13
    3a6e:	0f c0       	rjmp	.+30     	; 0x3a8e <change_pass+0x202>
    3a70:	88 ec       	ldi	r24, 0xC8	; 200
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	9a 8b       	std	Y+18, r25	; 0x12
    3a76:	89 8b       	std	Y+17, r24	; 0x11
    3a78:	89 89       	ldd	r24, Y+17	; 0x11
    3a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <change_pass+0x1f0>
    3a80:	9a 8b       	std	Y+18, r25	; 0x12
    3a82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a84:	8b 89       	ldd	r24, Y+19	; 0x13
    3a86:	9c 89       	ldd	r25, Y+20	; 0x14
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	9c 8b       	std	Y+20, r25	; 0x14
    3a8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a90:	9c 89       	ldd	r25, Y+20	; 0x14
    3a92:	00 97       	sbiw	r24, 0x00	; 0
    3a94:	69 f7       	brne	.-38     	; 0x3a70 <change_pass+0x1e4>
    3a96:	14 c0       	rjmp	.+40     	; 0x3ac0 <change_pass+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a98:	6d 89       	ldd	r22, Y+21	; 0x15
    3a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9c 8b       	std	Y+20, r25	; 0x14
    3aaa:	8b 8b       	std	Y+19, r24	; 0x13
    3aac:	8b 89       	ldd	r24, Y+19	; 0x13
    3aae:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab0:	98 8b       	std	Y+16, r25	; 0x10
    3ab2:	8f 87       	std	Y+15, r24	; 0x0f
    3ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab6:	98 89       	ldd	r25, Y+16	; 0x10
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <change_pass+0x22c>
    3abc:	98 8b       	std	Y+16, r25	; 0x10
    3abe:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						/* waiting MC_2 response after user pressed enter key */
						while(UART_recieveByte() != START){}
    3ac0:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3ac4:	84 34       	cpi	r24, 0x44	; 68
    3ac6:	e1 f7       	brne	.-8      	; 0x3ac0 <change_pass+0x234>
						response = UART_recieveByte();
    3ac8:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3acc:	8b a7       	std	Y+43, r24	; 0x2b
						/* if response equal 0 increment chances */
						if(response == 0)
    3ace:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ad0:	88 23       	and	r24, r24
    3ad2:	09 f0       	breq	.+2      	; 0x3ad6 <change_pass+0x24a>
    3ad4:	4e c0       	rjmp	.+156    	; 0x3b72 <change_pass+0x2e6>
						{
							chances++;
    3ad6:	80 91 f8 00 	lds	r24, 0x00F8
    3ada:	8f 5f       	subi	r24, 0xFF	; 255
    3adc:	80 93 f8 00 	sts	0x00F8, r24
							/* if he entered wrong password 3 times sending Alarm to MC_2 */
							if(chances == 3)
    3ae0:	80 91 f8 00 	lds	r24, 0x00F8
    3ae4:	83 30       	cpi	r24, 0x03	; 3
    3ae6:	09 f0       	breq	.+2      	; 0x3aea <change_pass+0x25e>
    3ae8:	41 c0       	rjmp	.+130    	; 0x3b6c <change_pass+0x2e0>
							{
								chances = 0;
    3aea:	10 92 f8 00 	sts	0x00F8, r1
								UART_sendByte(ALARM);
    3aee:	80 ea       	ldi	r24, 0xA0	; 160
    3af0:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
								while(UART_recieveByte() != START){}
    3af4:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3af8:	84 34       	cpi	r24, 0x44	; 68
    3afa:	e1 f7       	brne	.-8      	; 0x3af4 <change_pass+0x268>
								LCD_moveCursor(0,0);
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
								LCD_clearScreen();
    3b04:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
								LCD_displayString("Error");
    3b08:	80 ed       	ldi	r24, 0xD0	; 208
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
								Timer1_ConfigType Timer_config_buzzer = {0 , 0 ,F_CPU_1024,normal };
    3b10:	ce 01       	movw	r24, r28
    3b12:	8e 96       	adiw	r24, 0x2e	; 46
    3b14:	9d ab       	std	Y+53, r25	; 0x35
    3b16:	8c ab       	std	Y+52, r24	; 0x34
    3b18:	ef ee       	ldi	r30, 0xEF	; 239
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	ff ab       	std	Y+55, r31	; 0x37
    3b1e:	ee ab       	std	Y+54, r30	; 0x36
    3b20:	f6 e0       	ldi	r31, 0x06	; 6
    3b22:	f8 af       	std	Y+56, r31	; 0x38
    3b24:	ee a9       	ldd	r30, Y+54	; 0x36
    3b26:	ff a9       	ldd	r31, Y+55	; 0x37
    3b28:	00 80       	ld	r0, Z
    3b2a:	8e a9       	ldd	r24, Y+54	; 0x36
    3b2c:	9f a9       	ldd	r25, Y+55	; 0x37
    3b2e:	01 96       	adiw	r24, 0x01	; 1
    3b30:	9f ab       	std	Y+55, r25	; 0x37
    3b32:	8e ab       	std	Y+54, r24	; 0x36
    3b34:	ec a9       	ldd	r30, Y+52	; 0x34
    3b36:	fd a9       	ldd	r31, Y+53	; 0x35
    3b38:	00 82       	st	Z, r0
    3b3a:	8c a9       	ldd	r24, Y+52	; 0x34
    3b3c:	9d a9       	ldd	r25, Y+53	; 0x35
    3b3e:	01 96       	adiw	r24, 0x01	; 1
    3b40:	9d ab       	std	Y+53, r25	; 0x35
    3b42:	8c ab       	std	Y+52, r24	; 0x34
    3b44:	98 ad       	ldd	r25, Y+56	; 0x38
    3b46:	91 50       	subi	r25, 0x01	; 1
    3b48:	98 af       	std	Y+56, r25	; 0x38
    3b4a:	e8 ad       	ldd	r30, Y+56	; 0x38
    3b4c:	ee 23       	and	r30, r30
    3b4e:	51 f7       	brne	.-44     	; 0x3b24 <change_pass+0x298>
								Timer1_init(&Timer_config_buzzer);
    3b50:	ce 01       	movw	r24, r28
    3b52:	8e 96       	adiw	r24, 0x2e	; 46
    3b54:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
								while(ticks != 7){}
    3b58:	80 91 f9 00 	lds	r24, 0x00F9
    3b5c:	87 30       	cpi	r24, 0x07	; 7
    3b5e:	e1 f7       	brne	.-8      	; 0x3b58 <change_pass+0x2cc>
								Timer1_deInit();
    3b60:	0e 94 63 06 	call	0xcc6	; 0xcc6 <Timer1_deInit>
								ticks = 0 ;
    3b64:	10 92 f9 00 	sts	0x00F9, r1
								main_options ();
    3b68:	0e 94 3f 19 	call	0x327e	; 0x327e <main_options>
							}
							change_pass();
    3b6c:	0e 94 46 1c 	call	0x388c	; 0x388c <change_pass>
    3b70:	05 c0       	rjmp	.+10     	; 0x3b7c <change_pass+0x2f0>
						}
						/* else restart sestem normaly and receive a new password */
						else if (response == 1)
    3b72:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b74:	81 30       	cpi	r24, 0x01	; 1
    3b76:	11 f4       	brne	.+4      	; 0x3b7c <change_pass+0x2f0>
						{
							Enter_Pass();
    3b78:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <Enter_Pass>
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	aa ef       	ldi	r26, 0xFA	; 250
    3b82:	b3 e4       	ldi	r27, 0x43	; 67
    3b84:	8b 87       	std	Y+11, r24	; 0x0b
    3b86:	9c 87       	std	Y+12, r25	; 0x0c
    3b88:	ad 87       	std	Y+13, r26	; 0x0d
    3b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	4a ef       	ldi	r20, 0xFA	; 250
    3b9a:	54 e4       	ldi	r21, 0x44	; 68
    3b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	8f 83       	std	Y+7, r24	; 0x07
    3ba6:	98 87       	std	Y+8, r25	; 0x08
    3ba8:	a9 87       	std	Y+9, r26	; 0x09
    3baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bac:	6f 81       	ldd	r22, Y+7	; 0x07
    3bae:	78 85       	ldd	r23, Y+8	; 0x08
    3bb0:	89 85       	ldd	r24, Y+9	; 0x09
    3bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	40 e8       	ldi	r20, 0x80	; 128
    3bba:	5f e3       	ldi	r21, 0x3F	; 63
    3bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bc0:	88 23       	and	r24, r24
    3bc2:	2c f4       	brge	.+10     	; 0x3bce <change_pass+0x342>
		__ticks = 1;
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	9e 83       	std	Y+6, r25	; 0x06
    3bca:	8d 83       	std	Y+5, r24	; 0x05
    3bcc:	3f c0       	rjmp	.+126    	; 0x3c4c <change_pass+0x3c0>
	else if (__tmp > 65535)
    3bce:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd0:	78 85       	ldd	r23, Y+8	; 0x08
    3bd2:	89 85       	ldd	r24, Y+9	; 0x09
    3bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	3f ef       	ldi	r19, 0xFF	; 255
    3bda:	4f e7       	ldi	r20, 0x7F	; 127
    3bdc:	57 e4       	ldi	r21, 0x47	; 71
    3bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3be2:	18 16       	cp	r1, r24
    3be4:	4c f5       	brge	.+82     	; 0x3c38 <change_pass+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e2       	ldi	r20, 0x20	; 32
    3bf4:	51 e4       	ldi	r21, 0x41	; 65
    3bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	bc 01       	movw	r22, r24
    3c00:	cd 01       	movw	r24, r26
    3c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	9e 83       	std	Y+6, r25	; 0x06
    3c0c:	8d 83       	std	Y+5, r24	; 0x05
    3c0e:	0f c0       	rjmp	.+30     	; 0x3c2e <change_pass+0x3a2>
    3c10:	88 ec       	ldi	r24, 0xC8	; 200
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	9c 83       	std	Y+4, r25	; 0x04
    3c16:	8b 83       	std	Y+3, r24	; 0x03
    3c18:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	f1 f7       	brne	.-4      	; 0x3c1c <change_pass+0x390>
    3c20:	9c 83       	std	Y+4, r25	; 0x04
    3c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c24:	8d 81       	ldd	r24, Y+5	; 0x05
    3c26:	9e 81       	ldd	r25, Y+6	; 0x06
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	9e 83       	std	Y+6, r25	; 0x06
    3c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c30:	9e 81       	ldd	r25, Y+6	; 0x06
    3c32:	00 97       	sbiw	r24, 0x00	; 0
    3c34:	69 f7       	brne	.-38     	; 0x3c10 <change_pass+0x384>
    3c36:	14 c0       	rjmp	.+40     	; 0x3c60 <change_pass+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c38:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3a:	78 85       	ldd	r23, Y+8	; 0x08
    3c3c:	89 85       	ldd	r24, Y+9	; 0x09
    3c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	9e 83       	std	Y+6, r25	; 0x06
    3c4a:	8d 83       	std	Y+5, r24	; 0x05
    3c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c50:	9a 83       	std	Y+2, r25	; 0x02
    3c52:	89 83       	std	Y+1, r24	; 0x01
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	9a 81       	ldd	r25, Y+2	; 0x02
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	f1 f7       	brne	.-4      	; 0x3c58 <change_pass+0x3cc>
    3c5c:	9a 83       	std	Y+2, r25	; 0x02
    3c5e:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Plz Enter Pass : ");
	LCD_moveCursor(1,0);
	uint8 key , i ,response;
	while(UART_recieveByte() != START){}
	/* get password of 5 numbers from keypad and send them to MC_2 */
		for(i=0 ; i<6;i++)
    3c60:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c62:	8f 5f       	subi	r24, 0xFF	; 255
    3c64:	8c a7       	std	Y+44, r24	; 0x2c
    3c66:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c68:	86 30       	cpi	r24, 0x06	; 6
    3c6a:	08 f4       	brcc	.+2      	; 0x3c6e <change_pass+0x3e2>
    3c6c:	30 ce       	rjmp	.-928    	; 0x38ce <change_pass+0x42>
						}
					}
					_delay_ms(500);
		 }

}
    3c6e:	e8 96       	adiw	r28, 0x38	; 56
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	08 95       	ret

00003c80 <timer_isr>:
/* timer ISR call back function definition */
void timer_isr(void)
{
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
	ticks ++;
    3c88:	80 91 f9 00 	lds	r24, 0x00F9
    3c8c:	8f 5f       	subi	r24, 0xFF	; 255
    3c8e:	80 93 f9 00 	sts	0x00F9, r24
}
    3c92:	cf 91       	pop	r28
    3c94:	df 91       	pop	r29
    3c96:	08 95       	ret

00003c98 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3c98:	df 93       	push	r29
    3c9a:	cf 93       	push	r28
    3c9c:	00 d0       	rcall	.+0      	; 0x3c9e <UART_init+0x6>
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <UART_init+0x8>
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	9c 83       	std	Y+4, r25	; 0x04
    3ca6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3ca8:	1a 82       	std	Y+2, r1	; 0x02
    3caa:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3cac:	eb e2       	ldi	r30, 0x2B	; 43
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	82 e0       	ldi	r24, 0x02	; 2
    3cb2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((((Config_Ptr->bit_data)>>2))<<UCSZ2);
    3cb4:	aa e2       	ldi	r26, 0x2A	; 42
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    3cba:	fc 81       	ldd	r31, Y+4	; 0x04
    3cbc:	80 81       	ld	r24, Z
    3cbe:	86 95       	lsr	r24
    3cc0:	86 95       	lsr	r24
    3cc2:	88 2f       	mov	r24, r24
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	88 0f       	add	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	88 0f       	add	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	88 61       	ori	r24, 0x18	; 24
    3cd0:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (UCSRC | ((Config_Ptr->bit_data)<<4)) | (UCSRC | ((Config_Ptr->stop_bit)<<3)) | (UCSRC | ((Config_Ptr->bit_data)&0x03));
    3cd2:	a0 e4       	ldi	r26, 0x40	; 64
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	e0 e4       	ldi	r30, 0x40	; 64
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	80 81       	ld	r24, Z
    3cdc:	28 2f       	mov	r18, r24
    3cde:	eb 81       	ldd	r30, Y+3	; 0x03
    3ce0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ce2:	80 81       	ld	r24, Z
    3ce4:	88 2f       	mov	r24, r24
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	82 95       	swap	r24
    3cea:	92 95       	swap	r25
    3cec:	90 7f       	andi	r25, 0xF0	; 240
    3cee:	98 27       	eor	r25, r24
    3cf0:	80 7f       	andi	r24, 0xF0	; 240
    3cf2:	98 27       	eor	r25, r24
    3cf4:	82 2b       	or	r24, r18
    3cf6:	28 2f       	mov	r18, r24
    3cf8:	20 68       	ori	r18, 0x80	; 128
    3cfa:	e0 e4       	ldi	r30, 0x40	; 64
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	80 81       	ld	r24, Z
    3d00:	38 2f       	mov	r19, r24
    3d02:	eb 81       	ldd	r30, Y+3	; 0x03
    3d04:	fc 81       	ldd	r31, Y+4	; 0x04
    3d06:	82 81       	ldd	r24, Z+2	; 0x02
    3d08:	88 2f       	mov	r24, r24
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	88 0f       	add	r24, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	83 2b       	or	r24, r19
    3d1a:	28 2b       	or	r18, r24
    3d1c:	e0 e4       	ldi	r30, 0x40	; 64
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	80 81       	ld	r24, Z
    3d22:	98 2f       	mov	r25, r24
    3d24:	eb 81       	ldd	r30, Y+3	; 0x03
    3d26:	fc 81       	ldd	r31, Y+4	; 0x04
    3d28:	80 81       	ld	r24, Z
    3d2a:	83 70       	andi	r24, 0x03	; 3
    3d2c:	89 2b       	or	r24, r25
    3d2e:	82 2b       	or	r24, r18
    3d30:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3d32:	eb 81       	ldd	r30, Y+3	; 0x03
    3d34:	fc 81       	ldd	r31, Y+4	; 0x04
    3d36:	83 81       	ldd	r24, Z+3	; 0x03
    3d38:	94 81       	ldd	r25, Z+4	; 0x04
    3d3a:	cc 01       	movw	r24, r24
    3d3c:	a0 e0       	ldi	r26, 0x00	; 0
    3d3e:	b0 e0       	ldi	r27, 0x00	; 0
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	aa 1f       	adc	r26, r26
    3d46:	bb 1f       	adc	r27, r27
    3d48:	88 0f       	add	r24, r24
    3d4a:	99 1f       	adc	r25, r25
    3d4c:	aa 1f       	adc	r26, r26
    3d4e:	bb 1f       	adc	r27, r27
    3d50:	88 0f       	add	r24, r24
    3d52:	99 1f       	adc	r25, r25
    3d54:	aa 1f       	adc	r26, r26
    3d56:	bb 1f       	adc	r27, r27
    3d58:	9c 01       	movw	r18, r24
    3d5a:	ad 01       	movw	r20, r26
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	92 e1       	ldi	r25, 0x12	; 18
    3d60:	aa e7       	ldi	r26, 0x7A	; 122
    3d62:	b0 e0       	ldi	r27, 0x00	; 0
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__udivmodsi4>
    3d6c:	da 01       	movw	r26, r20
    3d6e:	c9 01       	movw	r24, r18
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	9a 83       	std	Y+2, r25	; 0x02
    3d74:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3d76:	e0 e4       	ldi	r30, 0x40	; 64
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7e:	89 2f       	mov	r24, r25
    3d80:	99 27       	eor	r25, r25
    3d82:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3d84:	e9 e2       	ldi	r30, 0x29	; 41
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	80 83       	st	Z, r24
}
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	0f 90       	pop	r0
    3d94:	cf 91       	pop	r28
    3d96:	df 91       	pop	r29
    3d98:	08 95       	ret

00003d9a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3d9a:	df 93       	push	r29
    3d9c:	cf 93       	push	r28
    3d9e:	0f 92       	push	r0
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3da6:	eb e2       	ldi	r30, 0x2B	; 43
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	80 81       	ld	r24, Z
    3dac:	88 2f       	mov	r24, r24
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	80 72       	andi	r24, 0x20	; 32
    3db2:	90 70       	andi	r25, 0x00	; 0
    3db4:	00 97       	sbiw	r24, 0x00	; 0
    3db6:	b9 f3       	breq	.-18     	; 0x3da6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3db8:	ec e2       	ldi	r30, 0x2C	; 44
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3dc0:	0f 90       	pop	r0
    3dc2:	cf 91       	pop	r28
    3dc4:	df 91       	pop	r29
    3dc6:	08 95       	ret

00003dc8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3dc8:	df 93       	push	r29
    3dca:	cf 93       	push	r28
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3dd0:	eb e2       	ldi	r30, 0x2B	; 43
    3dd2:	f0 e0       	ldi	r31, 0x00	; 0
    3dd4:	80 81       	ld	r24, Z
    3dd6:	88 23       	and	r24, r24
    3dd8:	dc f7       	brge	.-10     	; 0x3dd0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3dda:	ec e2       	ldi	r30, 0x2C	; 44
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	80 81       	ld	r24, Z
}
    3de0:	cf 91       	pop	r28
    3de2:	df 91       	pop	r29
    3de4:	08 95       	ret

00003de6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3de6:	df 93       	push	r29
    3de8:	cf 93       	push	r28
    3dea:	00 d0       	rcall	.+0      	; 0x3dec <UART_sendString+0x6>
    3dec:	0f 92       	push	r0
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	9b 83       	std	Y+3, r25	; 0x03
    3df4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3df6:	19 82       	std	Y+1, r1	; 0x01
    3df8:	0e c0       	rjmp	.+28     	; 0x3e16 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3dfa:	89 81       	ldd	r24, Y+1	; 0x01
    3dfc:	28 2f       	mov	r18, r24
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	9b 81       	ldd	r25, Y+3	; 0x03
    3e04:	fc 01       	movw	r30, r24
    3e06:	e2 0f       	add	r30, r18
    3e08:	f3 1f       	adc	r31, r19
    3e0a:	80 81       	ld	r24, Z
    3e0c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <UART_sendByte>
		i++;
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	8f 5f       	subi	r24, 0xFF	; 255
    3e14:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	28 2f       	mov	r18, r24
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e20:	fc 01       	movw	r30, r24
    3e22:	e2 0f       	add	r30, r18
    3e24:	f3 1f       	adc	r31, r19
    3e26:	80 81       	ld	r24, Z
    3e28:	88 23       	and	r24, r24
    3e2a:	39 f7       	brne	.-50     	; 0x3dfa <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	cf 91       	pop	r28
    3e34:	df 91       	pop	r29
    3e36:	08 95       	ret

00003e38 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3e38:	0f 93       	push	r16
    3e3a:	1f 93       	push	r17
    3e3c:	df 93       	push	r29
    3e3e:	cf 93       	push	r28
    3e40:	00 d0       	rcall	.+0      	; 0x3e42 <UART_receiveString+0xa>
    3e42:	0f 92       	push	r0
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
    3e48:	9b 83       	std	Y+3, r25	; 0x03
    3e4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3e4c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	28 2f       	mov	r18, r24
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	8a 81       	ldd	r24, Y+2	; 0x02
    3e56:	9b 81       	ldd	r25, Y+3	; 0x03
    3e58:	8c 01       	movw	r16, r24
    3e5a:	02 0f       	add	r16, r18
    3e5c:	13 1f       	adc	r17, r19
    3e5e:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3e62:	f8 01       	movw	r30, r16
    3e64:	80 83       	st	Z, r24
    3e66:	0f c0       	rjmp	.+30     	; 0x3e86 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	8f 5f       	subi	r24, 0xFF	; 255
    3e6c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	28 2f       	mov	r18, r24
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	9b 81       	ldd	r25, Y+3	; 0x03
    3e78:	8c 01       	movw	r16, r24
    3e7a:	02 0f       	add	r16, r18
    3e7c:	13 1f       	adc	r17, r19
    3e7e:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <UART_recieveByte>
    3e82:	f8 01       	movw	r30, r16
    3e84:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e90:	fc 01       	movw	r30, r24
    3e92:	e2 0f       	add	r30, r18
    3e94:	f3 1f       	adc	r31, r19
    3e96:	80 81       	ld	r24, Z
    3e98:	83 32       	cpi	r24, 0x23	; 35
    3e9a:	31 f7       	brne	.-52     	; 0x3e68 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	28 2f       	mov	r18, r24
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	e2 0f       	add	r30, r18
    3eaa:	f3 1f       	adc	r31, r19
    3eac:	10 82       	st	Z, r1
}
    3eae:	0f 90       	pop	r0
    3eb0:	0f 90       	pop	r0
    3eb2:	0f 90       	pop	r0
    3eb4:	cf 91       	pop	r28
    3eb6:	df 91       	pop	r29
    3eb8:	1f 91       	pop	r17
    3eba:	0f 91       	pop	r16
    3ebc:	08 95       	ret

00003ebe <__udivmodsi4>:
    3ebe:	a1 e2       	ldi	r26, 0x21	; 33
    3ec0:	1a 2e       	mov	r1, r26
    3ec2:	aa 1b       	sub	r26, r26
    3ec4:	bb 1b       	sub	r27, r27
    3ec6:	fd 01       	movw	r30, r26
    3ec8:	0d c0       	rjmp	.+26     	; 0x3ee4 <__udivmodsi4_ep>

00003eca <__udivmodsi4_loop>:
    3eca:	aa 1f       	adc	r26, r26
    3ecc:	bb 1f       	adc	r27, r27
    3ece:	ee 1f       	adc	r30, r30
    3ed0:	ff 1f       	adc	r31, r31
    3ed2:	a2 17       	cp	r26, r18
    3ed4:	b3 07       	cpc	r27, r19
    3ed6:	e4 07       	cpc	r30, r20
    3ed8:	f5 07       	cpc	r31, r21
    3eda:	20 f0       	brcs	.+8      	; 0x3ee4 <__udivmodsi4_ep>
    3edc:	a2 1b       	sub	r26, r18
    3ede:	b3 0b       	sbc	r27, r19
    3ee0:	e4 0b       	sbc	r30, r20
    3ee2:	f5 0b       	sbc	r31, r21

00003ee4 <__udivmodsi4_ep>:
    3ee4:	66 1f       	adc	r22, r22
    3ee6:	77 1f       	adc	r23, r23
    3ee8:	88 1f       	adc	r24, r24
    3eea:	99 1f       	adc	r25, r25
    3eec:	1a 94       	dec	r1
    3eee:	69 f7       	brne	.-38     	; 0x3eca <__udivmodsi4_loop>
    3ef0:	60 95       	com	r22
    3ef2:	70 95       	com	r23
    3ef4:	80 95       	com	r24
    3ef6:	90 95       	com	r25
    3ef8:	9b 01       	movw	r18, r22
    3efa:	ac 01       	movw	r20, r24
    3efc:	bd 01       	movw	r22, r26
    3efe:	cf 01       	movw	r24, r30
    3f00:	08 95       	ret

00003f02 <__prologue_saves__>:
    3f02:	2f 92       	push	r2
    3f04:	3f 92       	push	r3
    3f06:	4f 92       	push	r4
    3f08:	5f 92       	push	r5
    3f0a:	6f 92       	push	r6
    3f0c:	7f 92       	push	r7
    3f0e:	8f 92       	push	r8
    3f10:	9f 92       	push	r9
    3f12:	af 92       	push	r10
    3f14:	bf 92       	push	r11
    3f16:	cf 92       	push	r12
    3f18:	df 92       	push	r13
    3f1a:	ef 92       	push	r14
    3f1c:	ff 92       	push	r15
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	ca 1b       	sub	r28, r26
    3f2c:	db 0b       	sbc	r29, r27
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	cd bf       	out	0x3d, r28	; 61
    3f38:	09 94       	ijmp

00003f3a <__epilogue_restores__>:
    3f3a:	2a 88       	ldd	r2, Y+18	; 0x12
    3f3c:	39 88       	ldd	r3, Y+17	; 0x11
    3f3e:	48 88       	ldd	r4, Y+16	; 0x10
    3f40:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f42:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f44:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f46:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f48:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f4c:	b9 84       	ldd	r11, Y+9	; 0x09
    3f4e:	c8 84       	ldd	r12, Y+8	; 0x08
    3f50:	df 80       	ldd	r13, Y+7	; 0x07
    3f52:	ee 80       	ldd	r14, Y+6	; 0x06
    3f54:	fd 80       	ldd	r15, Y+5	; 0x05
    3f56:	0c 81       	ldd	r16, Y+4	; 0x04
    3f58:	1b 81       	ldd	r17, Y+3	; 0x03
    3f5a:	aa 81       	ldd	r26, Y+2	; 0x02
    3f5c:	b9 81       	ldd	r27, Y+1	; 0x01
    3f5e:	ce 0f       	add	r28, r30
    3f60:	d1 1d       	adc	r29, r1
    3f62:	0f b6       	in	r0, 0x3f	; 63
    3f64:	f8 94       	cli
    3f66:	de bf       	out	0x3e, r29	; 62
    3f68:	0f be       	out	0x3f, r0	; 63
    3f6a:	cd bf       	out	0x3d, r28	; 61
    3f6c:	ed 01       	movw	r28, r26
    3f6e:	08 95       	ret

00003f70 <itoa>:
    3f70:	fb 01       	movw	r30, r22
    3f72:	9f 01       	movw	r18, r30
    3f74:	e8 94       	clt
    3f76:	42 30       	cpi	r20, 0x02	; 2
    3f78:	c4 f0       	brlt	.+48     	; 0x3faa <itoa+0x3a>
    3f7a:	45 32       	cpi	r20, 0x25	; 37
    3f7c:	b4 f4       	brge	.+44     	; 0x3faa <itoa+0x3a>
    3f7e:	4a 30       	cpi	r20, 0x0A	; 10
    3f80:	29 f4       	brne	.+10     	; 0x3f8c <itoa+0x1c>
    3f82:	97 fb       	bst	r25, 7
    3f84:	1e f4       	brtc	.+6      	; 0x3f8c <itoa+0x1c>
    3f86:	90 95       	com	r25
    3f88:	81 95       	neg	r24
    3f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8c:	64 2f       	mov	r22, r20
    3f8e:	77 27       	eor	r23, r23
    3f90:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__udivmodhi4>
    3f94:	80 5d       	subi	r24, 0xD0	; 208
    3f96:	8a 33       	cpi	r24, 0x3A	; 58
    3f98:	0c f0       	brlt	.+2      	; 0x3f9c <itoa+0x2c>
    3f9a:	89 5d       	subi	r24, 0xD9	; 217
    3f9c:	81 93       	st	Z+, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	00 97       	sbiw	r24, 0x00	; 0
    3fa2:	a1 f7       	brne	.-24     	; 0x3f8c <itoa+0x1c>
    3fa4:	16 f4       	brtc	.+4      	; 0x3faa <itoa+0x3a>
    3fa6:	5d e2       	ldi	r21, 0x2D	; 45
    3fa8:	51 93       	st	Z+, r21
    3faa:	10 82       	st	Z, r1
    3fac:	c9 01       	movw	r24, r18
    3fae:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <strrev>

00003fb2 <strrev>:
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	67 2f       	mov	r22, r23
    3fb8:	71 91       	ld	r23, Z+
    3fba:	77 23       	and	r23, r23
    3fbc:	e1 f7       	brne	.-8      	; 0x3fb6 <strrev+0x4>
    3fbe:	32 97       	sbiw	r30, 0x02	; 2
    3fc0:	04 c0       	rjmp	.+8      	; 0x3fca <strrev+0x18>
    3fc2:	7c 91       	ld	r23, X
    3fc4:	6d 93       	st	X+, r22
    3fc6:	70 83       	st	Z, r23
    3fc8:	62 91       	ld	r22, -Z
    3fca:	ae 17       	cp	r26, r30
    3fcc:	bf 07       	cpc	r27, r31
    3fce:	c8 f3       	brcs	.-14     	; 0x3fc2 <strrev+0x10>
    3fd0:	08 95       	ret

00003fd2 <__udivmodhi4>:
    3fd2:	aa 1b       	sub	r26, r26
    3fd4:	bb 1b       	sub	r27, r27
    3fd6:	51 e1       	ldi	r21, 0x11	; 17
    3fd8:	07 c0       	rjmp	.+14     	; 0x3fe8 <__udivmodhi4_ep>

00003fda <__udivmodhi4_loop>:
    3fda:	aa 1f       	adc	r26, r26
    3fdc:	bb 1f       	adc	r27, r27
    3fde:	a6 17       	cp	r26, r22
    3fe0:	b7 07       	cpc	r27, r23
    3fe2:	10 f0       	brcs	.+4      	; 0x3fe8 <__udivmodhi4_ep>
    3fe4:	a6 1b       	sub	r26, r22
    3fe6:	b7 0b       	sbc	r27, r23

00003fe8 <__udivmodhi4_ep>:
    3fe8:	88 1f       	adc	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	5a 95       	dec	r21
    3fee:	a9 f7       	brne	.-22     	; 0x3fda <__udivmodhi4_loop>
    3ff0:	80 95       	com	r24
    3ff2:	90 95       	com	r25
    3ff4:	bc 01       	movw	r22, r24
    3ff6:	cd 01       	movw	r24, r26
    3ff8:	08 95       	ret

00003ffa <_exit>:
    3ffa:	f8 94       	cli

00003ffc <__stop_program>:
    3ffc:	ff cf       	rjmp	.-2      	; 0x3ffc <__stop_program>

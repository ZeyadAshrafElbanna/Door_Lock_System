/*
 * Challenge4.c
 *
 *  Created on: Oct 11, 2020
 *  Author: Mohamed Tarek
 */
#include <avr/io.h>
#include <avr/interrupt.h>
#include"Timer_1.h"
/* global variable contain the ticks count of the timer */
unsigned char g_tick = 0;

/* Interrupt Service Routine for timer0 compare mode */
void my_ISR(void)
{
	g_tick++;
	if(g_tick == 1)
	{
		PORTC ^= (1<<PC0);     /* Toggle PC0 Pin */
		OCR1A = 375;           /* Set the Compare value to 375 ((375/500) * 100 = 75%) */
	}
	else if(g_tick == 2)
	{
		PORTC ^= (1<<PC0);     /* Toggle PC0 Pin */
		OCR1A = 125;           /* Set the Compare value to 125 ((125/500) * 100 = 25%) */
		g_tick = 0;            /* reset the ticks counter */
	}
}

/*
 * For System clock=8Mhz and prescale F_CPU/8.
 * Timer frequency will be around 1Mhz, Ttimer = 1us
 * So we just need 500 counts to get 500us period.
 * In case we need 25% duty cycle we need to make the timer count 500 counts
 * with 125 counts the value of the PC0 pin is high and 375 counts with low value.
 * Compare interrupt will be generated every 125ms or 375ms to toggle PC0 value.
 */

int main(void)
{
	SREG |= (1<<7);
	Timer1_ConfigType config = {0 , 800 , F_CPU_8 , compar};
	Timer1_init(&config);
    Timer1_setCallBack(my_ISR);
	DDRC |= 0x01;   /* Configure PC0 as output pin */
	PORTC |= 0x01;  /* Set PC0 pin */




    while(1)
    {

    }
}


